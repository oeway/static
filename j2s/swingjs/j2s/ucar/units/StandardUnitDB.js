(function(){var P$=Clazz.newPackage("ucar.units"),p$1={},I$=[[0,'ucar.units.SI','ucar.units.StandardUnitFormat','ucar.units.DerivedUnitImpl','ucar.units.UnitName']],$I$=function(i,n){return(i=(I$[i]||(I$[i]=Clazz.load(I$[0][i])))),!n&&i.$load$&&Clazz.load(i,2),i};
/*c*/var C$=Clazz.newClass(P$, "StandardUnitDB", null, 'ucar.units.UnitDBImpl');

C$.$clinit$=2;

C$.$static$ = function() {C$.$static$=0;
C$.instance=null;
}

Clazz.newMeth(C$, '$init$', function () {
}, 1);

C$.$fields$=[[]
,['O',['instance','ucar.units.StandardUnitDB','format','ucar.units.UnitFormat']]]

Clazz.newMeth(C$, 'c$', function () {
;C$.superclazz.c$$I$I.apply(this,[50, 50]);C$.$init$.apply(this);
this.add$ucar_units_UnitDBImpl($I$(1).instance$().getUnitDB$());
C$.format=$I$(2).instance$();
p$1.au$S$S.apply(this, ["PI", Double.toString$D(3.141592653589793)]);
p$1.au$S$S$S.apply(this, ["percent", "0.01", "%"]);
p$1.au$S$S.apply(this, ["bakersdozen", "13"]);
p$1.au$S$S.apply(this, ["pair", "2"]);
p$1.au$S$S.apply(this, ["dozen", "12"]);
p$1.au$S$S.apply(this, ["ten", "10"]);
p$1.au$S$S.apply(this, ["score", "20"]);
p$1.au$S$S.apply(this, ["hundred", "100"]);
p$1.au$S$S.apply(this, ["thousand", "1000"]);
p$1.au$S$S.apply(this, ["million", "1e6"]);
this.addUnit$ucar_units_Unit($I$(3).DIMENSIONLESS);
p$1.au$S$S.apply(this, ["ppt", "1e-3"]);
p$1.au$S$S.apply(this, ["pptv", "1e-3"]);
p$1.au$S$S.apply(this, ["pptm", "1e-3"]);
p$1.au$S$S.apply(this, ["pptn", "1e-3"]);
p$1.au$S$S.apply(this, ["ppm", "1e-6"]);
p$1.au$S$S.apply(this, ["ppmv", "1e-6"]);
p$1.au$S$S.apply(this, ["ppmm", "1e-6"]);
p$1.au$S$S.apply(this, ["ppmn", "1e-6"]);
p$1.au$S$S.apply(this, ["ppb", "1e-9"]);
p$1.au$S$S.apply(this, ["ppbv", "1e-9"]);
p$1.au$S$S.apply(this, ["ppbm", "1e-9"]);
p$1.au$S$S.apply(this, ["ppbn", "1e-9"]);
p$1.au$S$S.apply(this, ["abampere", "10 ampere"]);
p$1.au$S$S.apply(this, ["gilbert", "7.957747e-1 ampere"]);
p$1.au$S$S.apply(this, ["statampere", "3.335640e-10 ampere"]);
p$1.aa$S$S.apply(this, ["amp", "ampere"]);
p$1.aa$S$S.apply(this, ["biot", "abampere"]);
p$1.aa$S$S.apply(this, ["candle", "candela"]);
p$1.au$S$S.apply(this, ["rankine", "K/1.8"]);
p$1.au$S$S.apply(this, ["fahrenheit", "rankine @ 459.67"]);
p$1.aa$S$S$S.apply(this, ["degree Kelvin", "kelvin", "degrees Kelvin"]);
p$1.aa$S$S$S.apply(this, ["degreeK", "kelvin", "degreesK"]);
p$1.aa$S$S$S.apply(this, ["degree K", "kelvin", "degrees K"]);
p$1.aa$S$S.apply(this, ["Celsius", "degree_Celsius"]);
p$1.aa$S$S$S.apply(this, ["degreeC", "degree_Celsius", "degreesC"]);
p$1.aa$S$S$S.apply(this, ["degree C", "degree_Celsius", "degrees C"]);
p$1.aa$S$S$S.apply(this, ["degree centigrade", "degree_Celsius", "degrees centigrade"]);
p$1.aa$S$S.apply(this, ["centigrade", "degree_Celsius"]);
p$1.aa$S$S$S.apply(this, ["degree Rankine", "rankine", "degrees Rankine"]);
p$1.aa$S$S$S.apply(this, ["degreeR", "rankine", "degreesR"]);
p$1.aa$S$S$S.apply(this, ["degree R", "rankine", "degrees R"]);
p$1.aa$S$S$S.apply(this, ["degree Fahrenheit", "fahrenheit", "degrees Fahrenheit"]);
p$1.aa$S$S$S.apply(this, ["degreeF", "fahrenheit", "degreesF"]);
p$1.aa$S$S$S.apply(this, ["degree F", "fahrenheit", "degrees F"]);
p$1.as$S$S.apply(this, ["degK", "kelvin"]);
p$1.as$S$S.apply(this, ["deg K", "kelvin"]);
p$1.as$S$S.apply(this, ["degC", "degree_Celsius"]);
p$1.as$S$S.apply(this, ["deg C", "degree_Celsius"]);
p$1.as$S$S.apply(this, ["degR", "rankine"]);
p$1.as$S$S.apply(this, ["deg R", "rankine"]);
p$1.as$S$S.apply(this, ["degF", "fahrenheit"]);
p$1.as$S$S.apply(this, ["deg F", "fahrenheit"]);
p$1.au$S$S.apply(this, ["assay ton", "2.916667e-2 kg"]);
p$1.au$S$S.apply(this, ["avoirdupois ounce", "2.834952e-2 kg"]);
p$1.au$S$S$S.apply(this, ["avoirdupois pound", "4.5359237e-1 kg", "lb"]);
p$1.au$S$S.apply(this, ["carat", "2e-4 kg"]);
p$1.au$S$S$S.apply(this, ["grain", "6.479891e-5 kg", "gr"]);
p$1.au$S$S$S.apply(this, ["gram", "1e-3 kg", "g"]);
p$1.au$S$S.apply(this, ["long hundredweight", "5.080235e1 kg"]);
p$1.au$S$S.apply(this, ["pennyweight", "1.555174e-3 kg"]);
p$1.au$S$S.apply(this, ["short hundredweight", "4.535924e1 kg"]);
p$1.au$S$S.apply(this, ["slug", "14.59390 kg"]);
p$1.au$S$S.apply(this, ["troy ounce", "3.110348e-2 kg"]);
p$1.au$S$S.apply(this, ["troy pound", "3.732417e-1 kg"]);
p$1.au$S$S.apply(this, ["unified atomic mass unit", "1.66054e-27 kg"]);
p$1.au$S$S.apply(this, ["scruple", "20 gr"]);
p$1.au$S$S.apply(this, ["apdram", "60 gr"]);
p$1.au$S$S.apply(this, ["apounce", "480 gr"]);
p$1.au$S$S.apply(this, ["appound", "5760 gr"]);
p$1.aa$S$S.apply(this, ["atomic mass unit", "unified_atomic_mass_unit"]);
p$1.aa$S$S.apply(this, ["amu", "unified_atomic_mass_unit"]);
p$1.aa$S$S.apply(this, ["metricton", "metric_ton"]);
p$1.aa$S$S.apply(this, ["apothecary ounce", "troy_ounce"]);
p$1.aa$S$S.apply(this, ["apothecary pound", "troy_pound"]);
p$1.aa$S$S.apply(this, ["pound", "avoirdupois_pound"]);
p$1.aa$S$S.apply(this, ["atomicmassunit", "unified_atomic_mass_unit"]);
p$1.au$S$S.apply(this, ["bag", "94 lb"]);
p$1.au$S$S.apply(this, ["short ton", "2000 lb"]);
p$1.au$S$S.apply(this, ["long ton", "2240 lb"]);
p$1.aa$S$S.apply(this, ["ton", "short_ton"]);
p$1.aa$S$S.apply(this, ["shortton", "short_ton"]);
p$1.aa$S$S.apply(this, ["longton", "long_ton"]);
p$1.au$S$S$S.apply(this, ["astronomical unit", "1.495979e11 m", "AU"]);
p$1.au$S$S.apply(this, ["fermi", "femtometer"]);
p$1.au$S$S.apply(this, ["light year", "9.46073e15 m"]);
p$1.au$S$S.apply(this, ["micron", "micrometer"]);
p$1.au$S$S.apply(this, ["mil", "2.54e-5 m"]);
p$1.au$S$S$S.apply(this, ["parsec", "3.085678e16 m", "prs"]);
p$1.au$S$S.apply(this, ["printers point", "3.514598e-4 m"]);
p$1.au$S$S$S$S.apply(this, ["US survey foot", "1200/3937 m", null, "US survey feet"]);
p$1.au$S$S.apply(this, ["US survey yard", "3 US_survey_feet"]);
p$1.au$S$S.apply(this, ["US survey mile", "5280 US_survey_feet"]);
p$1.aa$S$S.apply(this, ["US statute mile", "US_survey_mile"]);
p$1.au$S$S.apply(this, ["rod", "16.5 US_survey_feet"]);
p$1.au$S$S.apply(this, ["perch", "5.02921005842012 m"]);
p$1.au$S$S.apply(this, ["furlong", "660 US_survey_feet"]);
p$1.au$S$S.apply(this, ["fathom", "6 US_survey_feet"]);
p$1.aa$S$S.apply(this, ["pole", "rod"]);
p$1.au$S$S$S$S.apply(this, ["international inch", ".0254 m", null, "international inches"]);
p$1.au$S$S$S$S.apply(this, ["international foot", "12 international_inches", null, "international feet"]);
p$1.au$S$S.apply(this, ["international yard", "3 international_feet"]);
p$1.au$S$S.apply(this, ["international mile", "5280 international_feet"]);
p$1.aa$S$S$S$S.apply(this, ["inch", "international_inch", null, "in"]);
p$1.aa$S$S$S$S.apply(this, ["foot", "international_foot", "feet", "ft"]);
p$1.aa$S$S$S$S.apply(this, ["yard", "international_yard", null, "yd"]);
p$1.aa$S$S.apply(this, ["mile", "international_mile"]);
p$1.au$S$S.apply(this, ["chain", "2.011684e1 m"]);
p$1.au$S$S.apply(this, ["printers pica", "12 printers_point"]);
p$1.aa$S$S.apply(this, ["astronomicalunit", "astronomical_unit"]);
p$1.aa$S$S.apply(this, ["asu", "astronomical_unit"]);
p$1.aa$S$S.apply(this, ["nmile", "nautical_mile"]);
p$1.aa$S$S.apply(this, ["pica", "printers_pica"]);
p$1.au$S$S.apply(this, ["big point", "in/72"]);
p$1.au$S$S.apply(this, ["barleycorn", "in/3"]);
p$1.au$S$S.apply(this, ["arpentlin", "191.835 ft"]);
p$1.aa$S$S.apply(this, ["sec", "second"]);
p$1.au$S$S.apply(this, ["shake", "1e-8 s"]);
p$1.au$S$S.apply(this, ["sidereal day", "8.616409e4 s"]);
p$1.au$S$S.apply(this, ["sidereal hour", "3.590170e3 s"]);
p$1.au$S$S.apply(this, ["sidereal minute", "5.983617e1 s"]);
p$1.au$S$S.apply(this, ["sidereal second", "0.9972696 s"]);
p$1.au$S$S.apply(this, ["sidereal year", "3.155815e7 s"]);
p$1.au$S$S.apply(this, ["tropical year", "3.15569259747e7 s"]);
p$1.au$S$S.apply(this, ["lunar month", "29.530589 d"]);
p$1.au$S$S.apply(this, ["common year", "365 d"]);
p$1.au$S$S.apply(this, ["leap year", "366 d"]);
p$1.au$S$S.apply(this, ["Julian year", "365.25 d"]);
p$1.au$S$S.apply(this, ["Gregorian year", "365.2425 d"]);
p$1.au$S$S.apply(this, ["sidereal month", "27.321661 d"]);
p$1.au$S$S.apply(this, ["tropical month", "27.321582 d"]);
p$1.as$S$S.apply(this, ["hr", "hour"]);
p$1.au$S$S.apply(this, ["fortnight", "14 d"]);
p$1.au$S$S.apply(this, ["week", "7 d"]);
p$1.au$S$S.apply(this, ["jiffy", "cs"]);
p$1.aa$S$S$S$S.apply(this, ["year", "tropical_year", null, "yr"]);
p$1.au$S$S.apply(this, ["eon", "Gyr"]);
p$1.au$S$S.apply(this, ["month", "yr/12"]);
p$1.aa$S$S$S$S.apply(this, ["anno", "year", null, "ann"]);
p$1.au$S$S.apply(this, ["circle", "360 deg"]);
p$1.au$S$S.apply(this, ["grade", "0.9 deg"]);
p$1.aa$S$S.apply(this, ["turn", "circle"]);
p$1.aa$S$S$S$S.apply(this, ["revolution", "circle", null, "r"]);
p$1.aa$S$S.apply(this, ["degree", "arc_degree"]);
p$1.aa$S$S$S.apply(this, ["degree north", "arc_degree", "degrees north"]);
p$1.aa$S$S$S.apply(this, ["degree east", "arc_degree", "degrees east"]);
p$1.aa$S$S$S.apply(this, ["degree true", "arc_degree", "degrees true"]);
p$1.aa$S$S.apply(this, ["angular degree", "arc_degree"]);
p$1.aa$S$S.apply(this, ["angular minute", "arc_minute"]);
p$1.aa$S$S.apply(this, ["angular second", "arc_second"]);
p$1.aa$S$S.apply(this, ["gon", "grade"]);
p$1.aa$S$S.apply(this, ["arcdegree", "arc_degree"]);
p$1.aa$S$S.apply(this, ["arcminute", "arc_minute"]);
p$1.aa$S$S.apply(this, ["arcsecond", "arc_second"]);
p$1.aa$S$S.apply(this, ["arcdeg", "arc_degree"]);
p$1.aa$S$S.apply(this, ["arcmin", "arc_minute"]);
p$1.as$S$S.apply(this, ["mnt", "arc_minute"]);
p$1.aa$S$S.apply(this, ["arcsec", "arc_second"]);
p$1.aa$S$S$S.apply(this, ["degree N", "degree_north", "degrees N"]);
p$1.aa$S$S$S.apply(this, ["degreeE", "degree_east", "degreesE"]);
p$1.aa$S$S$S.apply(this, ["degree E", "degree_east", "degrees E"]);
p$1.au$S$S$S$S.apply(this, ["degree west", "-1 degree_east", null, "degrees west"]);
p$1.aa$S$S$S.apply(this, ["degreeW", "degree_west", "degreesW"]);
p$1.aa$S$S$S.apply(this, ["degree W", "degree_west", "degrees W"]);
p$1.aa$S$S$S.apply(this, ["degreeT", "degree_true", "degreesT"]);
p$1.aa$S$S$S.apply(this, ["degree T", "degree_true", "degrees T"]);
p$1.au$S$S.apply(this, ["sphere", "4 PI sr"]);
p$1.au$S$S.apply(this, ["standard free fall", "9.806650 m/s2"]);
p$1.aa$S$S.apply(this, ["force", "standard_free_fall"]);
p$1.aa$S$S.apply(this, ["gravity", "standard_free_fall"]);
p$1.aa$S$S.apply(this, ["free fall", "standard_free_fall"]);
p$1.au$S$S.apply(this, ["mercury 0C", "13595.1 gravity kg/m3"]);
p$1.au$S$S.apply(this, ["mercury 60F", "13556.8 gravity kg/m3"]);
p$1.au$S$S.apply(this, ["conventional water", "1000 gravity kg/m3"]);
p$1.au$S$S.apply(this, ["water 4C", "999.972 gravity kg/m3"]);
p$1.au$S$S.apply(this, ["water 60F", "999.001 gravity kg/m3"]);
p$1.aa$S$S.apply(this, ["conventional mercury", "mercury_0C"]);
p$1.aa$S$S.apply(this, ["mercury0C", "mercury_0C"]);
p$1.aa$S$S.apply(this, ["mercury 32F", "mercury_0C"]);
p$1.aa$S$S.apply(this, ["water4C", "water_4C"]);
p$1.aa$S$S.apply(this, ["water 39F", "water_4C"]);
p$1.aa$S$S.apply(this, ["mercury", "conventional_mercury"]);
p$1.aa$S$S.apply(this, ["water", "conventional_water"]);
p$1.as$S$S.apply(this, ["Hg", "mercury"]);
p$1.as$S$S.apply(this, ["H2O", "water"]);
p$1.au$S$S.apply(this, ["circular mil", "5.067075e-10 m2"]);
p$1.au$S$S.apply(this, ["darcy", "9.869233e-13 m2"]);
p$1.aa$S$S.apply(this, ["ha", "hectare"]);
p$1.au$S$S.apply(this, ["acre", "160 rod2"]);
p$1.au$S$S.apply(this, ["abfarad", "GF"]);
p$1.au$S$S.apply(this, ["abhenry", "nH"]);
p$1.au$S$S.apply(this, ["abmho", "GS"]);
p$1.au$S$S.apply(this, ["abohm", "nOhm"]);
p$1.au$S$S.apply(this, ["megohm", "MOhm"]);
p$1.au$S$S.apply(this, ["kilohm", "kOhm"]);
p$1.au$S$S.apply(this, ["abvolt", "1e-8 V"]);
p$1.au$S$S.apply(this, ["e", "1.60217733e-19 C"]);
p$1.au$S$S.apply(this, ["chemical faraday", "9.64957e4 C"]);
p$1.au$S$S.apply(this, ["physical faraday", "9.65219e4 C"]);
p$1.au$S$S.apply(this, ["C12 faraday", "9.648531e4 C"]);
p$1.au$S$S.apply(this, ["gamma", "nT"]);
p$1.au$S$S.apply(this, ["gauss", "1e-4 T"]);
p$1.au$S$S.apply(this, ["maxwell", "1e-8 Wb"]);
p$1.au$S$S$S.apply(this, ["oersted", "7.957747e1 A/m", "Oe"]);
p$1.au$S$S.apply(this, ["statcoulomb", "3.335640e-10 C"]);
p$1.au$S$S.apply(this, ["statfarad", "1.112650e-12 F"]);
p$1.au$S$S.apply(this, ["stathenry", "8.987554e11 H"]);
p$1.au$S$S.apply(this, ["statmho", "1.112650e-12 S"]);
p$1.au$S$S.apply(this, ["statohm", "8.987554e11 Ohm"]);
p$1.au$S$S.apply(this, ["statvolt", "2.997925e2 V"]);
p$1.au$S$S.apply(this, ["unit pole", "1.256637e-7 Wb"]);
p$1.au$S$S.apply(this, ["mho", "S"]);
p$1.aa$S$S.apply(this, ["faraday", "C12 faraday"]);
p$1.au$S$S.apply(this, ["electronvolt", "1.602177e-19 J"]);
p$1.au$S$S.apply(this, ["erg", "1e-7 J"]);
p$1.au$S$S.apply(this, ["IT Btu", "1.05505585262e3 J"]);
p$1.au$S$S.apply(this, ["EC therm", "1.05506e8 J"]);
p$1.au$S$S.apply(this, ["thermochemical calorie", "4.184000 J"]);
p$1.au$S$S.apply(this, ["IT calorie", "4.1868 J"]);
p$1.au$S$S.apply(this, ["ton TNT", "4.184e9 J"]);
p$1.au$S$S.apply(this, ["US therm", "1.054804e8 J"]);
p$1.au$S$S.apply(this, ["watthour", "W.h"]);
p$1.aa$S$S.apply(this, ["therm", "US_therm"]);
p$1.as$S$S.apply(this, ["Wh", "watthour"]);
p$1.aa$S$S.apply(this, ["Btu", "IT_Btu"]);
p$1.aa$S$S.apply(this, ["calorie", "IT_calorie"]);
p$1.aa$S$S.apply(this, ["electron volt", "electronvolt"]);
p$1.au$S$S.apply(this, ["thm", "therm"]);
p$1.au$S$S.apply(this, ["cal", "calorie"]);
p$1.as$S$S.apply(this, ["eV", "electronvolt"]);
p$1.au$S$S.apply(this, ["bev", "gigaelectronvolt"]);
p$1.au$S$S.apply(this, ["dyne", "1e-5 N"]);
p$1.au$S$S.apply(this, ["pond", "9.806650e-3 N"]);
p$1.au$S$S$S.apply(this, ["force kilogram", "9.806650 N", "kgf"]);
p$1.au$S$S$S.apply(this, ["force ounce", "2.780139e-1 N", "ozf"]);
p$1.au$S$S$S.apply(this, ["force pound", "4.4482216152605 N", "lbf"]);
p$1.au$S$S.apply(this, ["poundal", "1.382550e-1 N"]);
p$1.au$S$S.apply(this, ["gf", "gram force"]);
p$1.au$S$S.apply(this, ["force gram", "milliforce_kilogram"]);
p$1.au$S$S.apply(this, ["force ton", "2000 force_pound"]);
p$1.aa$S$S.apply(this, ["ounce force", "force_ounce"]);
p$1.aa$S$S.apply(this, ["kilogram force", "force_kilogram"]);
p$1.aa$S$S.apply(this, ["pound force", "force_pound"]);
p$1.au$S$S.apply(this, ["kip", "kilolbf"]);
p$1.aa$S$S.apply(this, ["ton force", "force_ton"]);
p$1.au$S$S.apply(this, ["gram force", "force_gram"]);
p$1.au$S$S.apply(this, ["clo", "1.55e-1 K.m2.W-1"]);
p$1.au$S$S.apply(this, ["footcandle", "1.076391e-1 lx"]);
p$1.au$S$S.apply(this, ["footlambert", "3.426259 cd/m2"]);
p$1.au$S$S.apply(this, ["lambert", "1e4/PI cd/m2"]);
p$1.au$S$S$S.apply(this, ["stilb", "1e4 cd/m2", "sb"]);
p$1.au$S$S$S.apply(this, ["phot", "1e4 lm/m2", "ph"]);
p$1.au$S$S$S.apply(this, ["nit", "cd.m2", "nt"]);
p$1.au$S$S.apply(this, ["langley", "4.184000e4 J/m2"]);
p$1.au$S$S.apply(this, ["blondel", "1/PI cd/m2"]);
p$1.aa$S$S.apply(this, ["apostilb", "blondel"]);
p$1.au$S$S.apply(this, ["denier", "1.111111e-7 kg/m"]);
p$1.au$S$S.apply(this, ["tex", "1e-6 kg/m"]);
p$1.au$S$S.apply(this, ["perm 0C", "5.72135e-11 kg/(Pa.s.m2)"]);
p$1.au$S$S.apply(this, ["perm 23C", "5.74525e-11 kg/(Pa.s.m2)"]);
p$1.au$S$S$S.apply(this, ["voltampere", "V.A", "VA"]);
p$1.au$S$S.apply(this, ["boiler horsepower", "9.80950e3 W"]);
p$1.au$S$S.apply(this, ["shaft horsepower", "7.456999e2 W"]);
p$1.au$S$S.apply(this, ["metric horsepower", "7.35499 W"]);
p$1.au$S$S.apply(this, ["electric horsepower", "7.460000e2 W"]);
p$1.au$S$S.apply(this, ["water horsepower", "7.46043e2 W"]);
p$1.au$S$S.apply(this, ["UK horsepower", "7.4570e2 W"]);
p$1.au$S$S.apply(this, ["refrigeration ton", "12000 Btu/h"]);
p$1.aa$S$S$S$S.apply(this, ["horsepower", "shaft_horsepower", null, "hp"]);
p$1.aa$S$S.apply(this, ["ton of refrigeration", "refrigeration_ton"]);
p$1.au$S$S$S.apply(this, ["standard atmosphere", "1.01325e5 Pa", "atm"]);
p$1.au$S$S$S.apply(this, ["technical atmosphere", "kg.(0.01 gravity/m)2", "at"]);
p$1.au$S$S.apply(this, ["inch H2O 39F", "inch.water_39F"]);
p$1.au$S$S.apply(this, ["inch H2O 60F", "inch.water_60F"]);
p$1.au$S$S.apply(this, ["inch Hg 32F", "inch.mercury_32F"]);
p$1.au$S$S.apply(this, ["inch Hg 60F", "inch.mercury_60F"]);
p$1.au$S$S.apply(this, ["millimeter Hg 0C", "mm.mercury_0C"]);
p$1.au$S$S.apply(this, ["footH2O", "foot.water"]);
p$1.au$S$S.apply(this, ["cmHg", "cm.Hg"]);
p$1.au$S$S.apply(this, ["cmH2O", "cm.water"]);
p$1.as$S$S.apply(this, ["pal", "pascal"]);
p$1.au$S$S.apply(this, ["inch Hg", "inch.Hg"]);
p$1.aa$S$S.apply(this, ["inch hg", "inch_Hg"]);
p$1.aa$S$S.apply(this, ["inHg", "inch_Hg"]);
p$1.aa$S$S.apply(this, ["in Hg", "inch_Hg"]);
p$1.au$S$S.apply(this, ["millimeter Hg", "mm.Hg"]);
p$1.aa$S$S.apply(this, ["mmHg", "millimeter_Hg"]);
p$1.aa$S$S.apply(this, ["mm Hg", "millimeter_Hg"]);
p$1.aa$S$S.apply(this, ["torr", "millimeter_Hg"]);
p$1.au$S$S.apply(this, ["foot H2O", "foot.water"]);
p$1.aa$S$S.apply(this, ["ftH2O", "foot_H2O"]);
p$1.au$S$S.apply(this, ["psi", "pound.gravity/inch2"]);
p$1.au$S$S.apply(this, ["ksi", "kip/inch2"]);
p$1.au$S$S.apply(this, ["barie", "0.1 N/m2"]);
p$1.aa$S$S.apply(this, ["atmosphere", "standard_atmosphere"]);
p$1.aa$S$S.apply(this, ["barye", "barie"]);
p$1.aa$S$S.apply(this, ["sie", "sievert"]);
p$1.aa$S$S.apply(this, ["knot international", "knot"]);
p$1.aa$S$S.apply(this, ["international knot", "knot"]);
p$1.au$S$S$S.apply(this, ["poise", "1e-1 Pa.s", "P"]);
p$1.au$S$S$S.apply(this, ["stokes", "1e-4 m2/s", "St"]);
p$1.au$S$S.apply(this, ["rhe", "10 (Pa.s)-1"]);
p$1.au$S$S.apply(this, ["acre foot", "1.233489e3 m3"]);
p$1.au$S$S.apply(this, ["board foot", "2.359737e-3 m3"]);
p$1.au$S$S$S.apply(this, ["bushel", "3.523907e-2 m3", "bu"]);
p$1.au$S$S.apply(this, ["UK liquid gallon", "4.546090e-3 m3"]);
p$1.au$S$S.apply(this, ["Canadian liquid gallon", "4.546090e-3 m3"]);
p$1.au$S$S.apply(this, ["US dry gallon", "4.404884e-3 m3"]);
p$1.au$S$S.apply(this, ["US liquid gallon", "3.785412e-3 m3"]);
p$1.au$S$S.apply(this, ["cc", "1e-6 m3"]);
p$1.au$S$S.apply(this, ["stere", "m3"]);
p$1.au$S$S.apply(this, ["register ton", "2.831685 m3"]);
p$1.au$S$S.apply(this, ["US dry quart", "1/4 US_dry_gallon"]);
p$1.au$S$S.apply(this, ["US dry pint", "1/8 US_dry_gallon"]);
p$1.au$S$S.apply(this, ["US liquid quart", "1/4 US_liquid_gallon"]);
p$1.au$S$S.apply(this, ["US liquid pint", "1/8 US_liquid_gallon"]);
p$1.au$S$S.apply(this, ["US liquid cup", "1/16 US_liquid_gallon"]);
p$1.au$S$S.apply(this, ["US liquid gill", "1/32 US_liquid_gallon"]);
p$1.au$S$S.apply(this, ["US fluid ounce", "1/128 US_liquid_gallon"]);
p$1.aa$S$S.apply(this, ["US liquid ounce", "US_fluid_ounce"]);
p$1.au$S$S.apply(this, ["UK liquid quart", "1/4 UK_liquid_gallon"]);
p$1.au$S$S.apply(this, ["UK liquid pint", "1/8 UK_liquid_gallon"]);
p$1.au$S$S.apply(this, ["UK liquid cup", "1/16 UK_liquid_gallon"]);
p$1.au$S$S.apply(this, ["UK liquid gill", "1/32 UK_liquid_gallon"]);
p$1.au$S$S.apply(this, ["UK fluid ounce", "1/160 UK_liquid_gallon"]);
p$1.aa$S$S.apply(this, ["UK liquid ounce", "UK_fluid_ounce"]);
p$1.aa$S$S.apply(this, ["liquid gallon", "US_liquid_gallon"]);
p$1.aa$S$S$S$S.apply(this, ["fluid ounce", "US_fluid_ounce", null, "fl_oz"]);
p$1.aa$S$S.apply(this, ["dry quart", "US_dry_quart"]);
p$1.aa$S$S.apply(this, ["dry pint", "US_dry_pint"]);
p$1.au$S$S.apply(this, ["liquid quart", "1/4 liquid_gallon"]);
p$1.au$S$S.apply(this, ["liquid pint", "1/8 liquid_gallon"]);
p$1.aa$S$S.apply(this, ["gallon", "liquid_gallon"]);
p$1.au$S$S$S.apply(this, ["barrel", "42 US_liquid_gallon", "bbl"]);
p$1.aa$S$S.apply(this, ["quart", "liquid_quart"]);
p$1.aa$S$S$S$S.apply(this, ["pint", "liquid_pint", null, "pt"]);
p$1.au$S$S.apply(this, ["cup", "1/16 liquid_gallon"]);
p$1.au$S$S.apply(this, ["gill", "1/32 liquid_gallon"]);
p$1.au$S$S$S.apply(this, ["tablespoon", "0.5 US_fluid_ounce", "Tbl"]);
p$1.au$S$S$S.apply(this, ["teaspoon", "1/3 tablespoon", "tsp"]);
p$1.au$S$S$S.apply(this, ["peck", "1/4 bushel", "pk"]);
p$1.as$S$S.apply(this, ["floz", "fluid_ounce"]);
p$1.aa$S$S.apply(this, ["acre_feet", "acre_foot"]);
p$1.aa$S$S.apply(this, ["board_feet", "board_foot"]);
p$1.aa$S$S.apply(this, ["tbsp", "tablespoon"]);
p$1.aa$S$S.apply(this, ["tblsp", "tablespoon"]);
p$1.au$S$S.apply(this, ["fldr", "1/8 floz"]);
p$1.au$S$S$S.apply(this, ["dram", "1/16 floz", "dr"]);
p$1.au$S$S.apply(this, ["firkin", "1/4 barrel"]);
p$1.au$S$S.apply(this, ["sverdrup", "1e6 m3/s"]);
p$1.au$S$S.apply(this, ["bit", "1"]);
p$1.au$S$S$S.apply(this, ["baud", "s-1", "Bd"]);
p$1.au$S$S.apply(this, ["bps", "s-1"]);
p$1.au$S$S.apply(this, ["cps", "s-1"]);
p$1.au$S$S.apply(this, ["count", "1"]);
p$1.au$S$S.apply(this, ["kayser", "100 m-1"]);
p$1.au$S$S.apply(this, ["rps", "r/s"]);
p$1.au$S$S.apply(this, ["rpm", "1/60 rps"]);
p$1.au$S$S.apply(this, ["work_year", "2056 h"]);
p$1.au$S$S.apply(this, ["work_month", "1/12 work_year"]);
p$1.aa$S$S$S$S.apply(this, ["geopotential", "gravity", null, "gp"]);
p$1.aa$S$S.apply(this, ["dynamic", "geopotential"]);
C$.format=null;
}, 1);

Clazz.newMeth(C$, 'instance$', function () {
{
if (C$.instance == null ) {
try {
C$.instance=Clazz.new_(C$);
} catch (e) {
if (Clazz.exceptionOf(e,"Exception")){
throw Clazz.new_(Clazz.load('ucar.units.UnitDBException').c$$S$Exception,["Couldn\'t create standard unit-database", e]);
} else {
throw e;
}
}
}}return C$.instance;
}, 1);

Clazz.newMeth(C$, 'au$S$S', function (name, definition) {
p$1.au$S$S$S.apply(this, [name, definition, null]);
}, p$1);

Clazz.newMeth(C$, 'au$S$S$S', function (name, definition, symbol) {
p$1.au$S$S$S$S.apply(this, [name, definition, symbol, null]);
}, p$1);

Clazz.newMeth(C$, 'au$S$S$S$S', function (name, definition, symbol, plural) {
var unit=C$.format.parse$S$ucar_units_UnitDB(definition, this);
if (unit == null ) {
throw Clazz.new_(Clazz.load('ucar.units.NoSuchUnitException').c$$S,[definition]);
}this.addUnit$ucar_units_Unit(unit.clone$ucar_units_UnitName($I$(4).newUnitName$S$S$S(name, plural, symbol)));
}, p$1);

Clazz.newMeth(C$, 'aa$S$S', function (alias, name) {
p$1.aa$S$S$S.apply(this, [alias, name, null]);
}, p$1);

Clazz.newMeth(C$, 'aa$S$S$S', function (alias, name, plural) {
p$1.aa$S$S$S$S.apply(this, [alias, name, plural, null]);
}, p$1);

Clazz.newMeth(C$, 'aa$S$S$S$S', function (alias, name, plural, symbol) {
this.addAlias$S$S$S$S(alias, name, symbol, plural);
}, p$1);

Clazz.newMeth(C$, 'as$S$S', function (symbol, name) {
this.addSymbol$S$S(symbol, name);
}, p$1);

Clazz.newMeth(C$, 'main$SA', function (args) {
var db=C$.instance$();
System.out.println$S("db.get(\"meter\")=" + db.get$S("meter"));
System.out.println$S("db.get(\"meters\")=" + db.get$S("meters"));
System.out.println$S("db.get(\"metre\")=" + db.get$S("metre"));
System.out.println$S("db.get(\"metres\")=" + db.get$S("metres"));
System.out.println$S("db.get(\"m\")=" + db.get$S("m"));
System.out.println$S("db.get(\"newton\")=" + db.get$S("newton"));
System.out.println$S("db.get(\"Cel\")=" + db.get$S("Cel"));
System.out.println$S("db.get(\"Roentgen\")=" + db.get$S("Roentgen"));
System.out.println$S("db.get(\"rad\")=" + db.get$S("rad"));
System.out.println$S("db.get(\"rd\")=" + db.get$S("rd"));
System.out.println$S("db.get(\"perches\")=" + db.get$S("perches"));
System.out.println$S("db.get(\"jiffies\")=" + db.get$S("jiffies"));
System.out.println$S("db.get(\"foo\")=" + db.get$S("foo"));
}, 1);
})();
;Clazz.setTVer('3.2.6-v1');//Created 2020-01-04 11:20:33 Java2ScriptVisitor version 3.2.6-v1 net.sf.j2s.core.jar version 3.2.6-v1
