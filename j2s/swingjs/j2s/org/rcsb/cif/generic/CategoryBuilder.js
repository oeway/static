(function(){var P$=Clazz.newPackage("org.rcsb.cif.generic"),I$=[[0,'org.rcsb.cif.generic.FloatColumnBuilder','org.rcsb.cif.generic.IntColumnBuilder','org.rcsb.cif.generic.StrColumnBuilder','org.rcsb.cif.model.ModelFactory','org.rcsb.cif.model.IntColumn','org.rcsb.cif.model.FloatColumn','org.rcsb.cif.model.StrColumn']],$I$=function(i,n){return(i=(I$[i]||(I$[i]=Clazz.load(I$[0][i])))),!n&&i.$load$&&Clazz.load(i,2),i};
/*c*/var C$=Clazz.newClass(P$, "CategoryBuilder", function(){
Clazz.newInstance(this, arguments,0,C$);
}, ['org.rcsb.cif.model.Builder','.CategoryBuilder']);

C$.$clinit$=1;

Clazz.newMeth(C$, '$init0$', function () {
var c;if((c = C$.superclazz) && (c = c.$init0$))c.apply(this);
this.parent=null;
}, 1);

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$S$org_rcsb_cif_generic_BlockBuilder', function (categoryName, parent) {
;C$.superclazz.c$$S.apply(this, [categoryName]);C$.$init$.apply(this);
this.parent=parent;
}, 1);

Clazz.newMeth(C$, 'enterIntColumn$S', function (columnName) {
return Clazz.new_($I$(2,1).c$$S$S$TP,[this.getCategoryName$(), columnName, this]);
});

Clazz.newMeth(C$, 'enterFloatColumn$S', function (columnName) {
return Clazz.new_($I$(1,1).c$$S$S$TP,[this.getCategoryName$(), columnName, this]);
});

Clazz.newMeth(C$, 'enterStrColumn$S', function (columnName) {
return Clazz.new_($I$(3,1).c$$S$S$TP,[this.getCategoryName$(), columnName, this]);
});

Clazz.newMeth(C$, 'build$', function () {
return $I$(4).createCategoryText$S$java_util_Map(this.categoryName, this.columns);
});

Clazz.newMeth(C$, 'leaveCategory$', function () {
if (this.parent == null ) {
throw Clazz.new_(Clazz.load('IllegalStateException').c$$S,["cannot leave category with undefined parent block"]);
}this.pendingDigests.stream$().filter$java_util_function_Predicate(/*addLambdaReuse org.rcsb.cif.generic.CategoryBuilder$lambda1*/(P$.CategoryBuilder$lambda1$||(P$.CategoryBuilder$lambda1$=(((P$.CategoryBuilder$lambda1||
(function(){/*m*/var C$=Clazz.newClass(P$, "CategoryBuilder$lambda1", function(){Clazz.newInstance(this, arguments[0],1,C$);}, null, 'java.util.function.Predicate', 1);

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);
/*lambda_E*/
Clazz.newMeth(C$, ['test$'], function (child) { return (!this.b$['org.rcsb.cif.generic.CategoryBuilder'].finishedDigests.contains$O(child));});
})()
), Clazz.new_(P$.CategoryBuilder$lambda1.$init$, [this, null])))))).forEach$java_util_function_Consumer(/*addLambdaReuse org.rcsb.cif.generic.CategoryBuilder$lambda2*/(P$.CategoryBuilder$lambda2$||(P$.CategoryBuilder$lambda2$=(((P$.CategoryBuilder$lambda2||
(function(){/*m*/var C$=Clazz.newClass(P$, "CategoryBuilder$lambda2", function(){Clazz.newInstance(this, arguments[0],1,C$);}, null, 'java.util.function.Consumer', 1);

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);
/*lambda_E*/
Clazz.newMeth(C$, ['accept$'], function (child) {
if (Clazz.instanceOf(child, "org.rcsb.cif.generic.IntColumnBuilder")) {
this.b$['org.rcsb.cif.generic.CategoryBuilder'].digest$org_rcsb_cif_generic_IntColumnBuilder.apply(this.b$['org.rcsb.cif.generic.CategoryBuilder'], [child]);
} else if (Clazz.instanceOf(child, "org.rcsb.cif.generic.FloatColumnBuilder")) {
this.b$['org.rcsb.cif.generic.CategoryBuilder'].digest$org_rcsb_cif_generic_FloatColumnBuilder.apply(this.b$['org.rcsb.cif.generic.CategoryBuilder'], [child]);
} else {
this.b$['org.rcsb.cif.generic.CategoryBuilder'].digest$org_rcsb_cif_generic_StrColumnBuilder.apply(this.b$['org.rcsb.cif.generic.CategoryBuilder'], [child]);
}});
})()
), Clazz.new_(P$.CategoryBuilder$lambda2.$init$, [this, null]))))));
return this.parent.digest$org_rcsb_cif_generic_CategoryBuilder(this);
});

Clazz.newMeth(C$, 'digest$org_rcsb_cif_generic_IntColumnBuilder', function (intColumnBuilder) {
this.columns.put$TK$TV(intColumnBuilder.getColumnName$(), org.rcsb.cif.model.Builder.CategoryBuilder.createColumnText$S$S$java_util_List$java_util_List$Class(this.categoryName, intColumnBuilder.getColumnName$(), intColumnBuilder.getValues$(), intColumnBuilder.getMask$(), Clazz.getClass($I$(5))));
this.finishedDigests.add$TE(intColumnBuilder);
return this;
});

Clazz.newMeth(C$, 'digest$org_rcsb_cif_generic_FloatColumnBuilder', function (floatColumnBuilder) {
this.columns.put$TK$TV(floatColumnBuilder.getColumnName$(), org.rcsb.cif.model.Builder.CategoryBuilder.createColumnText$S$S$java_util_List$java_util_List$Class(this.categoryName, floatColumnBuilder.getColumnName$(), floatColumnBuilder.getValues$(), floatColumnBuilder.getMask$(), Clazz.getClass($I$(6))));
this.finishedDigests.add$TE(floatColumnBuilder);
return this;
});

Clazz.newMeth(C$, 'digest$org_rcsb_cif_generic_StrColumnBuilder', function (strColumnBuilder) {
this.columns.put$TK$TV(strColumnBuilder.getColumnName$(), org.rcsb.cif.model.Builder.CategoryBuilder.createColumnText$S$S$java_util_List$java_util_List$Class(this.categoryName, strColumnBuilder.getColumnName$(), strColumnBuilder.getValues$(), strColumnBuilder.getMask$(), Clazz.getClass($I$(7))));
this.finishedDigests.add$TE(strColumnBuilder);
return this;
});
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAnisoB11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][1]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoB12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoB13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoB22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[2][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoB23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[2][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoB33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[3][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_B[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_ratio", this]);
});

Clazz.newMeth(C$, 'enterAnisoU11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][1]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoU12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoU13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoU22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[2][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoU23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[2][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAnisoU33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[3][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoU33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "aniso_U[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterAttachedHydrogens$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "attached_hydrogens", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBEquivGeomMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "B_equiv_geom_mean", this]);
});

Clazz.newMeth(C$, 'enterBEquivGeomMeanEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "B_equiv_geom_mean_esd", this]);
});

Clazz.newMeth(C$, 'enterBIsoOrEquiv$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "B_iso_or_equiv", this]);
});

Clazz.newMeth(C$, 'enterBIsoOrEquivEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "B_iso_or_equiv_esd", this]);
});

Clazz.newMeth(C$, 'enterCalcAttachedAtom$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "calc_attached_atom", this]);
});

Clazz.newMeth(C$, 'enterCalcFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "calc_flag", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_x_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_y_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterCartnZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "Cartn_z_esd", this]);
});

Clazz.newMeth(C$, 'enterChemicalConnNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "chemical_conn_number", this]);
});

Clazz.newMeth(C$, 'enterConstraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "constraints", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "details", this]);
});

Clazz.newMeth(C$, 'enterDisorderAssembly$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "disorder_assembly", this]);
});

Clazz.newMeth(C$, 'enterDisorderGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "disorder_group", this]);
});

Clazz.newMeth(C$, 'enterFootnoteId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "footnote_id", this]);
});

Clazz.newMeth(C$, 'enterFractX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_x", this]);
});

Clazz.newMeth(C$, 'enterFractXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_x_esd", this]);
});

Clazz.newMeth(C$, 'enterFractY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_y", this]);
});

Clazz.newMeth(C$, 'enterFractYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_y_esd", this]);
});

Clazz.newMeth(C$, 'enterFractZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_z", this]);
});

Clazz.newMeth(C$, 'enterFractZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "fract_z_esd", this]);
});

Clazz.newMeth(C$, 'enterGroupPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "group_PDB", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "label_entity_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "occupancy", this]);
});

Clazz.newMeth(C$, 'enterOccupancyEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "occupancy_esd", this]);
});

Clazz.newMeth(C$, 'enterRestraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "restraints", this]);
});

Clazz.newMeth(C$, 'enterSymmetryMultiplicity$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "symmetry_multiplicity", this]);
});

Clazz.newMeth(C$, 'enterThermalDisplaceType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "thermal_displace_type", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterUEquivGeomMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "U_equiv_geom_mean", this]);
});

Clazz.newMeth(C$, 'enterUEquivGeomMeanEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "U_equiv_geom_mean_esd", this]);
});

Clazz.newMeth(C$, 'enterUIsoOrEquiv$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "U_iso_or_equiv", this]);
});

Clazz.newMeth(C$, 'enterUIsoOrEquivEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site", "U_iso_or_equiv_esd", this]);
});

Clazz.newMeth(C$, 'enterWyckoffSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "Wyckoff_symbol", this]);
});

Clazz.newMeth(C$, 'enterAdpType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "adp_type", this]);
});

Clazz.newMeth(C$, 'enterRefinementFlags$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "refinement_flags", this]);
});

Clazz.newMeth(C$, 'enterRefinementFlagsAdp$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "refinement_flags_adp", this]);
});

Clazz.newMeth(C$, 'enterRefinementFlagsOccupancy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "refinement_flags_occupancy", this]);
});

Clazz.newMeth(C$, 'enterRefinementFlagsPosn$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "refinement_flags_posn", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_PDB_residue_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBResidueName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_PDB_residue_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_PDB_strand_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_PDB_atom_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_auth_atom_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormalCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "pdbx_formal_charge", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxTlsGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_tls_group_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxNcsDomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_ncs_dom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxStructGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_struct_group_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxGroupNDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_group_NDB", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_atom_group", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_label_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxNotInAsym$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site", "pdbx_not_in_asym", this]);
});

Clazz.newMeth(C$, 'enterIhmModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site", "ihm_model_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSiteAnisotropBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_site_anisotrop", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterB11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][1]", this]);
});

Clazz.newMeth(C$, 'enterB11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterB12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][2]", this]);
});

Clazz.newMeth(C$, 'enterB12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterB13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][3]", this]);
});

Clazz.newMeth(C$, 'enterB13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterB22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[2][2]", this]);
});

Clazz.newMeth(C$, 'enterB22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterB23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[2][3]", this]);
});

Clazz.newMeth(C$, 'enterB23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterB33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[3][3]", this]);
});

Clazz.newMeth(C$, 'enterB33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "B[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "ratio", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "id", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterU11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][1]", this]);
});

Clazz.newMeth(C$, 'enterU11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterU12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][2]", this]);
});

Clazz.newMeth(C$, 'enterU12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterU13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][3]", this]);
});

Clazz.newMeth(C$, 'enterU13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterU22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[2][2]", this]);
});

Clazz.newMeth(C$, 'enterU22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterU23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[2][3]", this]);
});

Clazz.newMeth(C$, 'enterU23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterU33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[3][3]", this]);
});

Clazz.newMeth(C$, 'enterU33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_site_anisotrop", "U[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxNotInAsym$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_not_in_asym", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_residue_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBResidueName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_residue_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_strand_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_PDB_atom_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_auth_atom_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_site_anisotrop", "pdbx_label_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSitesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_sites", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransfVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "Cartn_transf_vector[3]", this]);
});

Clazz.newMeth(C$, 'enterCartnTransformAxes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "Cartn_transform_axes", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterFractTransfVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_sites", "fract_transf_vector[3]", this]);
});

Clazz.newMeth(C$, 'enterSolutionPrimary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "solution_primary", this]);
});

Clazz.newMeth(C$, 'enterSolutionSecondary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "solution_secondary", this]);
});

Clazz.newMeth(C$, 'enterSolutionHydrogens$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "solution_hydrogens", this]);
});

Clazz.newMeth(C$, 'enterSpecialDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites", "special_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSitesAltBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_sites_alt", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSitesAltEnsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_sites_alt_ens", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt_ens", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt_ens", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSitesAltGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_sites_alt_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt_gen", "alt_id", this]);
});

Clazz.newMeth(C$, 'enterEnsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_alt_gen", "ens_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomSitesFootnoteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_sites_footnote", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_footnote", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_sites_footnote", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AtomTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["atom_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAnalyticalMassPercent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "analytical_mass_percent", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "description", this]);
});

Clazz.newMeth(C$, 'enterNumberInCell$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_type", "number_in_cell", this]);
});

Clazz.newMeth(C$, 'enterOxidationNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["atom_type", "oxidation_number", this]);
});

Clazz.newMeth(C$, 'enterRadiusBond$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "radius_bond", this]);
});

Clazz.newMeth(C$, 'enterRadiusContact$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "radius_contact", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannA1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_a1", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannA2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_a2", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannA3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_a3", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannA4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_a4", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannB1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_b1", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannB2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_b2", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannB3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_b3", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannB4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_b4", this]);
});

Clazz.newMeth(C$, 'enterScatCromerMannC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_Cromer_Mann_c", this]);
});

Clazz.newMeth(C$, 'enterScatDispersionImag$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_dispersion_imag", this]);
});

Clazz.newMeth(C$, 'enterScatDispersionReal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "scat_dispersion_real", this]);
});

Clazz.newMeth(C$, 'enterScatLengthNeutron$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "scat_length_neutron", this]);
});

Clazz.newMeth(C$, 'enterScatSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "scat_source", this]);
});

Clazz.newMeth(C$, 'enterScatVersusStolList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "scat_versus_stol_list", this]);
});

Clazz.newMeth(C$, 'enterSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "symbol", this]);
});

Clazz.newMeth(C$, 'enterScatDispersionSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["atom_type", "scat_dispersion_source", this]);
});

Clazz.newMeth(C$, 'enterPdbxScatCromerMannA5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "pdbx_scat_Cromer_Mann_a5", this]);
});

Clazz.newMeth(C$, 'enterPdbxScatCromerMannB5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["atom_type", "pdbx_scat_Cromer_Mann_b5", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCreationDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit", "creation_date", this]);
});

Clazz.newMeth(C$, 'enterCreationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit", "creation_method", this]);
});

Clazz.newMeth(C$, 'enterRevisionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit", "revision_id", this]);
});

Clazz.newMeth(C$, 'enterUpdateRecord$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit", "update_record", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AuditAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["audit_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_author", "address", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_author", "name", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["audit_author", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterIdentifierORCID$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_author", "identifier_ORCID", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AuditConformBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["audit_conform", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDictLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_conform", "dict_location", this]);
});

Clazz.newMeth(C$, 'enterDictName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_conform", "dict_name", this]);
});

Clazz.newMeth(C$, 'enterDictVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_conform", "dict_version", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AuditContactAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["audit_contact_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_contact_author", "address", this]);
});

Clazz.newMeth(C$, 'enterEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_contact_author", "email", this]);
});

Clazz.newMeth(C$, 'enterFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_contact_author", "fax", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_contact_author", "name", this]);
});

Clazz.newMeth(C$, 'enterPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_contact_author", "phone", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["cell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_alpha", this]);
});

Clazz.newMeth(C$, 'enterAngleAlphaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_alpha_esd", this]);
});

Clazz.newMeth(C$, 'enterAngleBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_beta", this]);
});

Clazz.newMeth(C$, 'enterAngleBetaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_beta_esd", this]);
});

Clazz.newMeth(C$, 'enterAngleGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_gamma", this]);
});

Clazz.newMeth(C$, 'enterAngleGammaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "angle_gamma_esd", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["cell", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["cell", "details", this]);
});

Clazz.newMeth(C$, 'enterFormulaUnitsZ$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell", "formula_units_Z", this]);
});

Clazz.newMeth(C$, 'enterLengthA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_a", this]);
});

Clazz.newMeth(C$, 'enterLengthAEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_a_esd", this]);
});

Clazz.newMeth(C$, 'enterLengthB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_b", this]);
});

Clazz.newMeth(C$, 'enterLengthBEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_b_esd", this]);
});

Clazz.newMeth(C$, 'enterLengthC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_c", this]);
});

Clazz.newMeth(C$, 'enterLengthCEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "length_c_esd", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "volume", this]);
});

Clazz.newMeth(C$, 'enterVolumeEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "volume_esd", this]);
});

Clazz.newMeth(C$, 'enterZPDB$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell", "Z_PDB", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_alpha", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_beta", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_gamma", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleAlphaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_alpha_esd", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleBetaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_beta_esd", this]);
});

Clazz.newMeth(C$, 'enterReciprocalAngleGammaEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_angle_gamma_esd", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_a", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_b", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_c", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthAEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_a_esd", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthBEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_b_esd", this]);
});

Clazz.newMeth(C$, 'enterReciprocalLengthCEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell", "reciprocal_length_c_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxUniqueAxis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["cell", "pdbx_unique_axis", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CellMeasurementBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["cell_measurement", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["cell_measurement", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterPressure$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "pressure", this]);
});

Clazz.newMeth(C$, 'enterPressureEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "pressure_esd", this]);
});

Clazz.newMeth(C$, 'enterRadiation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["cell_measurement", "radiation", this]);
});

Clazz.newMeth(C$, 'enterReflnsUsed$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell_measurement", "reflns_used", this]);
});

Clazz.newMeth(C$, 'enterTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "temp", this]);
});

Clazz.newMeth(C$, 'enterTempEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "temp_esd", this]);
});

Clazz.newMeth(C$, 'enterThetaMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "theta_max", this]);
});

Clazz.newMeth(C$, 'enterThetaMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "theta_min", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement", "wavelength", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CellMeasurementReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["cell_measurement_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell_measurement_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell_measurement_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["cell_measurement_refln", "index_l", this]);
});

Clazz.newMeth(C$, 'enterTheta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["cell_measurement_refln", "theta", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "formula", this]);
});

Clazz.newMeth(C$, 'enterFormulaWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp", "formula_weight", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "id", this]);
});

Clazz.newMeth(C$, 'enterModelDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "model_details", this]);
});

Clazz.newMeth(C$, 'enterModelErf$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "model_erf", this]);
});

Clazz.newMeth(C$, 'enterModelSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "model_source", this]);
});

Clazz.newMeth(C$, 'enterMonNstdClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "mon_nstd_class", this]);
});

Clazz.newMeth(C$, 'enterMonNstdDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "mon_nstd_details", this]);
});

Clazz.newMeth(C$, 'enterMonNstdFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "mon_nstd_flag", this]);
});

Clazz.newMeth(C$, 'enterMonNstdParent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "mon_nstd_parent", this]);
});

Clazz.newMeth(C$, 'enterMonNstdParentCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "mon_nstd_parent_comp_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "name", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "number_atoms_all", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "number_atoms_nh", this]);
});

Clazz.newMeth(C$, 'enterOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterThreeLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "three_letter_code", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "type", this]);
});

Clazz.newMeth(C$, 'enterPdbxSynonyms$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_synonyms", this]);
});

Clazz.newMeth(C$, 'enterPdbxModificationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_modification_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentNo$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "pdbx_component_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxAmbiguousFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_ambiguous_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxReplacedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_replaced_by", this]);
});

Clazz.newMeth(C$, 'enterPdbxReplaces$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_replaces", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormalCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "pdbx_formal_charge", this]);
});

Clazz.newMeth(C$, 'enterPdbxSubcomponentList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_subcomponent_list", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCoordinatesDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_model_coordinates_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCoordinatesDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_model_coordinates_db_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxIdealCoordinatesDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_ideal_coordinates_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxIdealCoordinatesMissingFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_ideal_coordinates_missing_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCoordinatesMissingFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_model_coordinates_missing_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxInitialDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_initial_date", this]);
});

Clazz.newMeth(C$, 'enterPdbxModifiedDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_modified_date", this]);
});

Clazz.newMeth(C$, 'enterPdbxReleaseStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_release_status", this]);
});

Clazz.newMeth(C$, 'enterPdbxProcessingSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_processing_site", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberSubcomponents$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "pdbx_number_subcomponents", this]);
});

Clazz.newMeth(C$, 'enterPdbxClass1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_class_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxClass2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_class_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxCompType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_comp_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxReservedName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_reserved_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_status", this]);
});

Clazz.newMeth(C$, 'enterPdbxTypeModified$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp", "pdbx_type_modified", this]);
});

Clazz.newMeth(C$, 'enterPdbxCasnum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_casnum", this]);
});

Clazz.newMeth(C$, 'enterPdbxSmiles$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_smiles", this]);
});

Clazz.newMeth(C$, 'enterPdbxNscnum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp", "pdbx_nscnum", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_angle", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_angle", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_angle", "atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_angle", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterValueAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_angle", "value_angle", this]);
});

Clazz.newMeth(C$, 'enterValueAngleEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_angle", "value_angle_esd", this]);
});

Clazz.newMeth(C$, 'enterValueDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_angle", "value_dist", this]);
});

Clazz.newMeth(C$, 'enterValueDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_angle", "value_dist_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAltAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "alt_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "charge", this]);
});

Clazz.newMeth(C$, 'enterModelCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterModelCartnXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_x_esd", this]);
});

Clazz.newMeth(C$, 'enterModelCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterModelCartnYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_y_esd", this]);
});

Clazz.newMeth(C$, 'enterModelCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterModelCartnZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "model_Cartn_z_esd", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterPartialCharge$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "partial_charge", this]);
});

Clazz.newMeth(C$, 'enterSubstructCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "substruct_code", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterPdbxAlign$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "pdbx_align", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_component_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_component_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_alt_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_alt_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCartnXIdeal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "pdbx_model_Cartn_x_ideal", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCartnYIdeal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "pdbx_model_Cartn_y_ideal", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelCartnZIdeal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_atom", "pdbx_model_Cartn_z_ideal", this]);
});

Clazz.newMeth(C$, 'enterPdbxStereoConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_stereo_config", this]);
});

Clazz.newMeth(C$, 'enterPdbxAromaticFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_aromatic_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxLeavingAtomFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_leaving_atom_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxResidueNumbering$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "pdbx_residue_numbering", this]);
});

Clazz.newMeth(C$, 'enterPdbxPolymerType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_polymer_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_atom", "pdbx_ref_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "pdbx_component_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentEntityId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_atom", "pdbx_component_entity_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "value_order", this]);
});

Clazz.newMeth(C$, 'enterValueDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_bond", "value_dist", this]);
});

Clazz.newMeth(C$, 'enterValueDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_bond", "value_dist_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_bond", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterPdbxStereoConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "pdbx_stereo_config", this]);
});

Clazz.newMeth(C$, 'enterPdbxAromaticFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_bond", "pdbx_aromatic_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompChirBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_chir", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterAtomConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir", "atom_config", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir", "id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_chir", "number_atoms_all", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_chir", "number_atoms_nh", this]);
});

Clazz.newMeth(C$, 'enterVolumeFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir", "volume_flag", this]);
});

Clazz.newMeth(C$, 'enterVolumeThree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_chir", "volume_three", this]);
});

Clazz.newMeth(C$, 'enterVolumeThreeEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_chir", "volume_three_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompChirAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_chir_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterChirId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir_atom", "chir_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_chir_atom", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_chir_atom", "dev", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_link", "details", this]);
});

Clazz.newMeth(C$, 'enterTypeComp1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_link", "type_comp_1", this]);
});

Clazz.newMeth(C$, 'enterTypeComp2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_link", "type_comp_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompPlaneBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_plane", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_plane", "id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_plane", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_plane", "number_atoms_all", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_comp_plane", "number_atoms_nh", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompPlaneAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_plane_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_plane_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_plane_atom", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterPlaneId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_plane_atom", "plane_id", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_plane_atom", "dist_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompTorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_tor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor", "comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemCompTorValueBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_comp_tor_value", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor_value", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterTorId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_comp_tor_value", "tor_id", this]);
});

Clazz.newMeth(C$, 'enterAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_tor_value", "angle", this]);
});

Clazz.newMeth(C$, 'enterAngleEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_tor_value", "angle_esd", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_tor_value", "dist", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_comp_tor_value", "dist_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link", "id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtom1CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_1_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom2CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_2_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom3CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_3_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_angle", "link_id", this]);
});

Clazz.newMeth(C$, 'enterValueAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_angle", "value_angle", this]);
});

Clazz.newMeth(C$, 'enterValueAngleEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_angle", "value_angle_esd", this]);
});

Clazz.newMeth(C$, 'enterValueDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_angle", "value_dist", this]);
});

Clazz.newMeth(C$, 'enterValueDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_angle", "value_dist_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtom1CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "atom_1_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom2CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "atom_2_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "link_id", this]);
});

Clazz.newMeth(C$, 'enterValueDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_bond", "value_dist", this]);
});

Clazz.newMeth(C$, 'enterValueDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_bond", "value_dist_esd", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_bond", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkChirBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_chir", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "atom_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterAtomConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "atom_config", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "id", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "link_id", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_link_chir", "number_atoms_all", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_link_chir", "number_atoms_nh", this]);
});

Clazz.newMeth(C$, 'enterVolumeFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir", "volume_flag", this]);
});

Clazz.newMeth(C$, 'enterVolumeThree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_chir", "volume_three", this]);
});

Clazz.newMeth(C$, 'enterVolumeThreeEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_chir", "volume_three_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkChirAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_chir_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir_atom", "atom_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterChirId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_chir_atom", "chir_id", this]);
});

Clazz.newMeth(C$, 'enterDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_chir_atom", "dev", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkPlaneBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_plane", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_plane", "id", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_plane", "link_id", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_link_plane", "number_atoms_all", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chem_link_plane", "number_atoms_nh", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkPlaneAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_plane_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_plane_atom", "atom_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_plane_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterPlaneId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_plane_atom", "plane_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkTorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_tor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtom1CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_1_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom2CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_2_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom3CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_3_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtom4CompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_4_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "id", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor", "link_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemLinkTorValueBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chem_link_tor_value", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterTorId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chem_link_tor_value", "tor_id", this]);
});

Clazz.newMeth(C$, 'enterAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_tor_value", "angle", this]);
});

Clazz.newMeth(C$, 'enterAngleEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_tor_value", "angle_esd", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_tor_value", "dist", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chem_link_tor_value", "dist_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemicalBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chemical", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCompoundSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "compound_source", this]);
});

Clazz.newMeth(C$, 'enterMeltingPoint$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "melting_point", this]);
});

Clazz.newMeth(C$, 'enterNameCommon$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "name_common", this]);
});

Clazz.newMeth(C$, 'enterNameMineral$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "name_mineral", this]);
});

Clazz.newMeth(C$, 'enterNameStructureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "name_structure_type", this]);
});

Clazz.newMeth(C$, 'enterNameSystematic$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "name_systematic", this]);
});

Clazz.newMeth(C$, 'enterAbsoluteConfiguration$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "absolute_configuration", this]);
});

Clazz.newMeth(C$, 'enterMeltingPointGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "melting_point_gt", this]);
});

Clazz.newMeth(C$, 'enterMeltingPointLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "melting_point_lt", this]);
});

Clazz.newMeth(C$, 'enterOpticalRotation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "optical_rotation", this]);
});

Clazz.newMeth(C$, 'enterPropertiesBiological$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "properties_biological", this]);
});

Clazz.newMeth(C$, 'enterPropertiesPhysical$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical", "properties_physical", this]);
});

Clazz.newMeth(C$, 'enterTemperatureDecomposition$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_decomposition", this]);
});

Clazz.newMeth(C$, 'enterTemperatureDecompositionEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_decomposition_esd", this]);
});

Clazz.newMeth(C$, 'enterTemperatureDecompositionGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_decomposition_gt", this]);
});

Clazz.newMeth(C$, 'enterTemperatureDecompositionLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_decomposition_lt", this]);
});

Clazz.newMeth(C$, 'enterTemperatureSublimation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_sublimation", this]);
});

Clazz.newMeth(C$, 'enterTemperatureSublimationEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_sublimation_esd", this]);
});

Clazz.newMeth(C$, 'enterTemperatureSublimationGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_sublimation_gt", this]);
});

Clazz.newMeth(C$, 'enterTemperatureSublimationLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical", "temperature_sublimation_lt", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemicalConnAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chemical_conn_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_atom", "charge", this]);
});

Clazz.newMeth(C$, 'enterDisplayX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical_conn_atom", "display_x", this]);
});

Clazz.newMeth(C$, 'enterDisplayY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical_conn_atom", "display_y", this]);
});

Clazz.newMeth(C$, 'enterNCA$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_atom", "NCA", this]);
});

Clazz.newMeth(C$, 'enterNH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_atom", "NH", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_atom", "number", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_conn_atom", "type_symbol", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemicalConnBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chemical_conn_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtom1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_bond", "atom_1", this]);
});

Clazz.newMeth(C$, 'enterAtom2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["chemical_conn_bond", "atom_2", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_conn_bond", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ChemicalFormulaBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["chemical_formula", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAnalytical$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "analytical", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterIupac$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "iupac", this]);
});

Clazz.newMeth(C$, 'enterMoiety$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "moiety", this]);
});

Clazz.newMeth(C$, 'enterStructural$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "structural", this]);
});

Clazz.newMeth(C$, 'enterSum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["chemical_formula", "sum", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical_formula", "weight", this]);
});

Clazz.newMeth(C$, 'enterWeightMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["chemical_formula", "weight_meas", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CitationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["citation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAbstract$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "abstract", this]);
});

Clazz.newMeth(C$, 'enterAbstractIdCAS$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "abstract_id_CAS", this]);
});

Clazz.newMeth(C$, 'enterBookIdISBN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "book_id_ISBN", this]);
});

Clazz.newMeth(C$, 'enterBookPublisher$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "book_publisher", this]);
});

Clazz.newMeth(C$, 'enterBookPublisherCity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "book_publisher_city", this]);
});

Clazz.newMeth(C$, 'enterBookTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "book_title", this]);
});

Clazz.newMeth(C$, 'enterCoordinateLinkage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "coordinate_linkage", this]);
});

Clazz.newMeth(C$, 'enterCountry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "country", this]);
});

Clazz.newMeth(C$, 'enterDatabaseIdMedline$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["citation", "database_id_Medline", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "id", this]);
});

Clazz.newMeth(C$, 'enterJournalAbbrev$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_abbrev", this]);
});

Clazz.newMeth(C$, 'enterJournalIdASTM$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_id_ASTM", this]);
});

Clazz.newMeth(C$, 'enterJournalIdCSD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_id_CSD", this]);
});

Clazz.newMeth(C$, 'enterJournalIdISSN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_id_ISSN", this]);
});

Clazz.newMeth(C$, 'enterJournalFull$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_full", this]);
});

Clazz.newMeth(C$, 'enterJournalIssue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_issue", this]);
});

Clazz.newMeth(C$, 'enterJournalVolume$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "journal_volume", this]);
});

Clazz.newMeth(C$, 'enterLanguage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "language", this]);
});

Clazz.newMeth(C$, 'enterPageFirst$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "page_first", this]);
});

Clazz.newMeth(C$, 'enterPageLast$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "page_last", this]);
});

Clazz.newMeth(C$, 'enterTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "title", this]);
});

Clazz.newMeth(C$, 'enterYear$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["citation", "year", this]);
});

Clazz.newMeth(C$, 'enterDatabaseIdCSD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "database_id_CSD", this]);
});

Clazz.newMeth(C$, 'enterPdbxDatabaseIdDOI$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "pdbx_database_id_DOI", this]);
});

Clazz.newMeth(C$, 'enterPdbxDatabaseIdPubMed$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["citation", "pdbx_database_id_PubMed", this]);
});

Clazz.newMeth(C$, 'enterUnpublishedFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation", "unpublished_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CitationAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["citation_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation_author", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation_author", "name", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["citation_author", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterIdentifierORCID$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation_author", "identifier_ORCID", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "CitationEditorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["citation_editor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation_editor", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["citation_editor", "name", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["citation_editor", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ComputingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["computing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCellRefinement$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "cell_refinement", this]);
});

Clazz.newMeth(C$, 'enterDataCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "data_collection", this]);
});

Clazz.newMeth(C$, 'enterDataReduction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "data_reduction", this]);
});

Clazz.newMeth(C$, 'enterMolecularGraphics$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "molecular_graphics", this]);
});

Clazz.newMeth(C$, 'enterPublicationMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "publication_material", this]);
});

Clazz.newMeth(C$, 'enterStructureRefinement$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "structure_refinement", this]);
});

Clazz.newMeth(C$, 'enterStructureSolution$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "structure_solution", this]);
});

Clazz.newMeth(C$, 'enterPdbxStructureRefinementMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "pdbx_structure_refinement_method", this]);
});

Clazz.newMeth(C$, 'enterPdbxDataReductionIi$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "pdbx_data_reduction_ii", this]);
});

Clazz.newMeth(C$, 'enterPdbxDataReductionDs$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["computing", "pdbx_data_reduction_ds", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabaseBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterJournalASTM$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "journal_ASTM", this]);
});

Clazz.newMeth(C$, 'enterJournalCSD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "journal_CSD", this]);
});

Clazz.newMeth(C$, 'enterCSDHistory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "CSD_history", this]);
});

Clazz.newMeth(C$, 'enterCodeCAS$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_CAS", this]);
});

Clazz.newMeth(C$, 'enterCodeCSD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_CSD", this]);
});

Clazz.newMeth(C$, 'enterCodeICSD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_ICSD", this]);
});

Clazz.newMeth(C$, 'enterCodeMDF$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_MDF", this]);
});

Clazz.newMeth(C$, 'enterCodeNBS$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_NBS", this]);
});

Clazz.newMeth(C$, 'enterCodePDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_PDB", this]);
});

Clazz.newMeth(C$, 'enterCodePDF$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_PDF", this]);
});

Clazz.newMeth(C$, 'enterCodeDepnumCcdcFiz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_depnum_ccdc_fiz", this]);
});

Clazz.newMeth(C$, 'enterCodeDepnumCcdcJournal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_depnum_ccdc_journal", this]);
});

Clazz.newMeth(C$, 'enterCodeDepnumCcdcArchive$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "code_depnum_ccdc_archive", this]);
});

Clazz.newMeth(C$, 'enterPdbxCodeNDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "pdbx_code_NDB", this]);
});

Clazz.newMeth(C$, 'enterPdbxCodePDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "pdbx_code_PDB", this]);
});

Clazz.newMeth(C$, 'enterPdbxRelatedCodesPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database", "pdbx_related_codes_PDB", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Database2Builder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_2", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDatabaseId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_2", "database_id", this]);
});

Clazz.newMeth(C$, 'enterDatabaseCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_2", "database_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBCaveatBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_caveat", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["database_PDB_caveat", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_caveat", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBMatrixBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_matrix", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_matrix", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterOrigx11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[1][1]", this]);
});

Clazz.newMeth(C$, 'enterOrigx12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[1][2]", this]);
});

Clazz.newMeth(C$, 'enterOrigx13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[1][3]", this]);
});

Clazz.newMeth(C$, 'enterOrigx21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[2][1]", this]);
});

Clazz.newMeth(C$, 'enterOrigx22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[2][2]", this]);
});

Clazz.newMeth(C$, 'enterOrigx23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[2][3]", this]);
});

Clazz.newMeth(C$, 'enterOrigx31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[3][1]", this]);
});

Clazz.newMeth(C$, 'enterOrigx32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[3][2]", this]);
});

Clazz.newMeth(C$, 'enterOrigx33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx[3][3]", this]);
});

Clazz.newMeth(C$, 'enterOrigxVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterOrigxVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterOrigxVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "origx_vector[3]", this]);
});

Clazz.newMeth(C$, 'enterScale11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[1][1]", this]);
});

Clazz.newMeth(C$, 'enterScale12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[1][2]", this]);
});

Clazz.newMeth(C$, 'enterScale13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[1][3]", this]);
});

Clazz.newMeth(C$, 'enterScale21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[2][1]", this]);
});

Clazz.newMeth(C$, 'enterScale22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[2][2]", this]);
});

Clazz.newMeth(C$, 'enterScale23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[2][3]", this]);
});

Clazz.newMeth(C$, 'enterScale31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[3][1]", this]);
});

Clazz.newMeth(C$, 'enterScale32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[3][2]", this]);
});

Clazz.newMeth(C$, 'enterScale33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale[3][3]", this]);
});

Clazz.newMeth(C$, 'enterScaleVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterScaleVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterScaleVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_matrix", "scale_vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBRemarkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_remark", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["database_PDB_remark", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_remark", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBRevBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_rev", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAuthorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "author_name", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "date", this]);
});

Clazz.newMeth(C$, 'enterDateOriginal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "date_original", this]);
});

Clazz.newMeth(C$, 'enterModType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "mod_type", this]);
});

Clazz.newMeth(C$, 'enterNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["database_PDB_rev", "num", this]);
});

Clazz.newMeth(C$, 'enterReplacedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "replaced_by", this]);
});

Clazz.newMeth(C$, 'enterReplaces$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "replaces", this]);
});

Clazz.newMeth(C$, 'enterStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "status", this]);
});

Clazz.newMeth(C$, 'enterPdbxRecordRevised1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "pdbx_record_revised_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxRecordRevised2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "pdbx_record_revised_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxRecordRevised3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "pdbx_record_revised_3", this]);
});

Clazz.newMeth(C$, 'enterPdbxRecordRevised4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev", "pdbx_record_revised_4", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBRevRecordBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_rev_record", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev_record", "details", this]);
});

Clazz.newMeth(C$, 'enterRevNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["database_PDB_rev_record", "rev_num", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_rev_record", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DatabasePDBTvectBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["database_PDB_tvect", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_tvect", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["database_PDB_tvect", "id", this]);
});

Clazz.newMeth(C$, 'enterVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_tvect", "vector[1]", this]);
});

Clazz.newMeth(C$, 'enterVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_tvect", "vector[2]", this]);
});

Clazz.newMeth(C$, 'enterVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["database_PDB_tvect", "vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAmbientEnvironment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "ambient_environment", this]);
});

Clazz.newMeth(C$, 'enterAmbientTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_temp", this]);
});

Clazz.newMeth(C$, 'enterAmbientTempDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "ambient_temp_details", this]);
});

Clazz.newMeth(C$, 'enterAmbientTempEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_temp_esd", this]);
});

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterCrystalSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "crystal_support", this]);
});

Clazz.newMeth(C$, 'enterCrystalTreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "crystal_treatment", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "id", this]);
});

Clazz.newMeth(C$, 'enterAmbientPressure$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_pressure", this]);
});

Clazz.newMeth(C$, 'enterAmbientPressureEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_pressure_esd", this]);
});

Clazz.newMeth(C$, 'enterAmbientPressureGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_pressure_gt", this]);
});

Clazz.newMeth(C$, 'enterAmbientPressureLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_pressure_lt", this]);
});

Clazz.newMeth(C$, 'enterAmbientTempGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_temp_gt", this]);
});

Clazz.newMeth(C$, 'enterAmbientTempLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn", "ambient_temp_lt", this]);
});

Clazz.newMeth(C$, 'enterPdbxSerialCrystalExperiment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn", "pdbx_serial_crystal_experiment", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnAttenuatorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_attenuator", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_attenuator", "code", this]);
});

Clazz.newMeth(C$, 'enterScale$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_attenuator", "scale", this]);
});

Clazz.newMeth(C$, 'enterMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_attenuator", "material", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnDetectorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_detector", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_detector", "details", this]);
});

Clazz.newMeth(C$, 'enterDetector$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_detector", "detector", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_detector", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_detector", "type", this]);
});

Clazz.newMeth(C$, 'enterAreaResolMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_detector", "area_resol_mean", this]);
});

Clazz.newMeth(C$, 'enterDtime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_detector", "dtime", this]);
});

Clazz.newMeth(C$, 'enterPdbxFramesTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_detector", "pdbx_frames_total", this]);
});

Clazz.newMeth(C$, 'enterPdbxCollectionTimeTotal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_detector", "pdbx_collection_time_total", this]);
});

Clazz.newMeth(C$, 'enterPdbxCollectionDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_detector", "pdbx_collection_date", this]);
});

Clazz.newMeth(C$, 'enterPdbxFrequency$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_detector", "pdbx_frequency", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnMeasurementBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_measurement", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "details", this]);
});

Clazz.newMeth(C$, 'enterDevice$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "device", this]);
});

Clazz.newMeth(C$, 'enterDeviceDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "device_details", this]);
});

Clazz.newMeth(C$, 'enterDeviceType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "device_type", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "method", this]);
});

Clazz.newMeth(C$, 'enterSpecimenSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "specimen_support", this]);
});

Clazz.newMeth(C$, 'enterPdbxDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_measurement", "pdbx_date", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnOrientMatrixBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_orient_matrix", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_orient_matrix", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_orient_matrix", "type", this]);
});

Clazz.newMeth(C$, 'enterUB11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[1][1]", this]);
});

Clazz.newMeth(C$, 'enterUB12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[1][2]", this]);
});

Clazz.newMeth(C$, 'enterUB13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[1][3]", this]);
});

Clazz.newMeth(C$, 'enterUB21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[2][1]", this]);
});

Clazz.newMeth(C$, 'enterUB22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[2][2]", this]);
});

Clazz.newMeth(C$, 'enterUB23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[2][3]", this]);
});

Clazz.newMeth(C$, 'enterUB31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[3][1]", this]);
});

Clazz.newMeth(C$, 'enterUB32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[3][2]", this]);
});

Clazz.newMeth(C$, 'enterUB33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_matrix", "UB[3][3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnOrientReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_orient_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleChi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_chi", this]);
});

Clazz.newMeth(C$, 'enterAngleKappa$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_kappa", this]);
});

Clazz.newMeth(C$, 'enterAngleOmega$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_omega", this]);
});

Clazz.newMeth(C$, 'enterAnglePhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_phi", this]);
});

Clazz.newMeth(C$, 'enterAnglePsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_psi", this]);
});

Clazz.newMeth(C$, 'enterAngleTheta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_orient_refln", "angle_theta", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_orient_refln", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_orient_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_orient_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_orient_refln", "index_l", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnRadiationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_radiation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCollimation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "collimation", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterFilterEdge$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation", "filter_edge", this]);
});

Clazz.newMeth(C$, 'enterInhomogeneity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation", "inhomogeneity", this]);
});

Clazz.newMeth(C$, 'enterMonochromator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "monochromator", this]);
});

Clazz.newMeth(C$, 'enterPolarisnNorm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation", "polarisn_norm", this]);
});

Clazz.newMeth(C$, 'enterPolarisnRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation", "polarisn_ratio", this]);
});

Clazz.newMeth(C$, 'enterProbe$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "probe", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "type", this]);
});

Clazz.newMeth(C$, 'enterXraySymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "xray_symbol", this]);
});

Clazz.newMeth(C$, 'enterWavelengthId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "wavelength_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxMonochromaticOrLaueML$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_monochromatic_or_laue_m_l", this]);
});

Clazz.newMeth(C$, 'enterPdbxWavelengthList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_wavelength_list", this]);
});

Clazz.newMeth(C$, 'enterPdbxWavelength$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_wavelength", this]);
});

Clazz.newMeth(C$, 'enterPdbxDiffrnProtocol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_diffrn_protocol", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnalyzer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_analyzer", this]);
});

Clazz.newMeth(C$, 'enterPdbxScatteringType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation", "pdbx_scattering_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnRadiationWavelengthBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_radiation_wavelength", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_radiation_wavelength", "id", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation_wavelength", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterWt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_radiation_wavelength", "wt", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleChi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_chi", this]);
});

Clazz.newMeth(C$, 'enterAngleKappa$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_kappa", this]);
});

Clazz.newMeth(C$, 'enterAngleOmega$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_omega", this]);
});

Clazz.newMeth(C$, 'enterAnglePhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_phi", this]);
});

Clazz.newMeth(C$, 'enterAnglePsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_psi", this]);
});

Clazz.newMeth(C$, 'enterAngleTheta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "angle_theta", this]);
});

Clazz.newMeth(C$, 'enterAttenuatorCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "attenuator_code", this]);
});

Clazz.newMeth(C$, 'enterCountsBg1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "counts_bg_1", this]);
});

Clazz.newMeth(C$, 'enterCountsBg2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "counts_bg_2", this]);
});

Clazz.newMeth(C$, 'enterCountsNet$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "counts_net", this]);
});

Clazz.newMeth(C$, 'enterCountsPeak$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "counts_peak", this]);
});

Clazz.newMeth(C$, 'enterCountsTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "counts_total", this]);
});

Clazz.newMeth(C$, 'enterDetectSlitHoriz$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "detect_slit_horiz", this]);
});

Clazz.newMeth(C$, 'enterDetectSlitVert$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "detect_slit_vert", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterElapsedTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "elapsed_time", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "id", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_refln", "index_l", this]);
});

Clazz.newMeth(C$, 'enterIntensityNet$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "intensity_net", this]);
});

Clazz.newMeth(C$, 'enterIntensitySigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "intensity_sigma", this]);
});

Clazz.newMeth(C$, 'enterScaleGroupCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "scale_group_code", this]);
});

Clazz.newMeth(C$, 'enterScanMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "scan_mode", this]);
});

Clazz.newMeth(C$, 'enterScanModeBackgd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "scan_mode_backgd", this]);
});

Clazz.newMeth(C$, 'enterScanRate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "scan_rate", this]);
});

Clazz.newMeth(C$, 'enterScanTimeBackgd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "scan_time_backgd", this]);
});

Clazz.newMeth(C$, 'enterScanWidth$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "scan_width", this]);
});

Clazz.newMeth(C$, 'enterSintOverLambda$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "sint_over_lambda", this]);
});

Clazz.newMeth(C$, 'enterStandardCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "standard_code", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterWavelengthId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "wavelength_id", this]);
});

Clazz.newMeth(C$, 'enterClassCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_refln", "class_code", this]);
});

Clazz.newMeth(C$, 'enterIntensityU$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_refln", "intensity_u", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnReflnsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_reflns", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAvREquivalents$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "av_R_equivalents", this]);
});

Clazz.newMeth(C$, 'enterAvSigmaIOverNetI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "av_sigmaI_over_netI", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_reflns", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterLimitHMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_h_max", this]);
});

Clazz.newMeth(C$, 'enterLimitHMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_h_min", this]);
});

Clazz.newMeth(C$, 'enterLimitKMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_k_max", this]);
});

Clazz.newMeth(C$, 'enterLimitKMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_k_min", this]);
});

Clazz.newMeth(C$, 'enterLimitLMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_l_max", this]);
});

Clazz.newMeth(C$, 'enterLimitLMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "limit_l_min", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "number", this]);
});

Clazz.newMeth(C$, 'enterReductionProcess$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_reflns", "reduction_process", this]);
});

Clazz.newMeth(C$, 'enterThetaMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "theta_max", this]);
});

Clazz.newMeth(C$, 'enterThetaMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "theta_min", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterTransfMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "transf_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterAvUnetI_netI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "av_unetI/netI", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_d_res_low", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterPdbxPercentPossibleObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_percent_possible_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxRmergeIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_Rmerge_I_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxRsymValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_Rsym_value", this]);
});

Clazz.newMeth(C$, 'enterPdbxChiSquared$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_chi_squared", this]);
});

Clazz.newMeth(C$, 'enterPdbxRedundancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_redundancy", this]);
});

Clazz.newMeth(C$, 'enterPdbxRejects$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "pdbx_rejects", this]);
});

Clazz.newMeth(C$, 'enterPdbxObservedCriterion$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns", "pdbx_observed_criterion", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns", "pdbx_number_obs", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnScaleGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_scale_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_scale_group", "code", this]);
});

Clazz.newMeth(C$, 'enterINet$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_scale_group", "I_net", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnSourceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_source", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCurrent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_source", "current", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "details", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_source", "power", this]);
});

Clazz.newMeth(C$, 'enterSize$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "size", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "source", this]);
});

Clazz.newMeth(C$, 'enterTarget$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "target", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "type", this]);
});

Clazz.newMeth(C$, 'enterVoltage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_source", "voltage", this]);
});

Clazz.newMeth(C$, 'enterTake_offAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_source", "take-off_angle", this]);
});

Clazz.newMeth(C$, 'enterPdbxWavelengthList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_wavelength_list", this]);
});

Clazz.newMeth(C$, 'enterPdbxWavelength$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_wavelength", this]);
});

Clazz.newMeth(C$, 'enterPdbxSynchrotronBeamline$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_synchrotron_beamline", this]);
});

Clazz.newMeth(C$, 'enterPdbxSynchrotronSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_synchrotron_site", this]);
});

Clazz.newMeth(C$, 'enterPdbxSynchrotronYN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_synchrotron_y_n", this]);
});

Clazz.newMeth(C$, 'enterPdbxSourceSpecificBeamline$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_source", "pdbx_source_specific_beamline", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnStandardReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_standard_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_standard_refln", "code", this]);
});

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_standard_refln", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_standard_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_standard_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_standard_refln", "index_l", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnStandardsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_standards", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_standards", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDecay$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_standards", "decay_%", this]);
});

Clazz.newMeth(C$, 'enterIntervalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_standards", "interval_count", this]);
});

Clazz.newMeth(C$, 'enterIntervalTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_standards", "interval_time", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_standards", "number", this]);
});

Clazz.newMeth(C$, 'enterScaleSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_standards", "scale_sigma", this]);
});

Clazz.newMeth(C$, 'enterScaleU$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_standards", "scale_u", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "details", this]);
});

Clazz.newMeth(C$, 'enterFormulaWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["entity", "formula_weight", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "id", this]);
});

Clazz.newMeth(C$, 'enterSrcMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "src_method", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "type", this]);
});

Clazz.newMeth(C$, 'enterPdbxDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_description", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberOfMolecules$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity", "pdbx_number_of_molecules", this]);
});

Clazz.newMeth(C$, 'enterPdbxParentEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_parent_entity_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxMutation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_mutation", this]);
});

Clazz.newMeth(C$, 'enterPdbxFragment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_fragment", this]);
});

Clazz.newMeth(C$, 'enterPdbxEc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_ec", this]);
});

Clazz.newMeth(C$, 'enterPdbxModification$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_modification", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeightExptl$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["entity", "pdbx_formula_weight_exptl", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeightExptlMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_formula_weight_exptl_method", this]);
});

Clazz.newMeth(C$, 'enterPdbxTargetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity", "pdbx_target_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxEntitiesPerBiologicalUnit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["entity", "pdbx_entities_per_biological_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityKeywordsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_keywords", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "text", this]);
});

Clazz.newMeth(C$, 'enterPdbxMutation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "pdbx_mutation", this]);
});

Clazz.newMeth(C$, 'enterPdbxFragment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "pdbx_fragment", this]);
});

Clazz.newMeth(C$, 'enterPdbxEc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "pdbx_ec", this]);
});

Clazz.newMeth(C$, 'enterPdbxAntibodyIsotype$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_keywords", "pdbx_antibody_isotype", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_link", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_link", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_link", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_link", "entity_seq_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_link", "entity_seq_num_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityNameComBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_name_com", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_com", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_com", "name", this]);
});

Clazz.newMeth(C$, 'enterPdbxProvenance$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_com", "pdbx_provenance", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityNameSysBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_name_sys", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_sys", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_sys", "name", this]);
});

Clazz.newMeth(C$, 'enterSystem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_name_sys", "system", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityPolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_poly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterNstdChirality$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "nstd_chirality", this]);
});

Clazz.newMeth(C$, 'enterNstdLinkage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "nstd_linkage", this]);
});

Clazz.newMeth(C$, 'enterNstdMonomer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "nstd_monomer", this]);
});

Clazz.newMeth(C$, 'enterNumberOfMonomers$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_poly", "number_of_monomers", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "type", this]);
});

Clazz.newMeth(C$, 'enterTypeDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "type_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_strand_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqOneLetterCodeCan$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_one_letter_code_can", this]);
});

Clazz.newMeth(C$, 'enterPdbxTargetIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_target_identifier", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqOneLetterCodeSample$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_one_letter_code_sample", this]);
});

Clazz.newMeth(C$, 'enterPdbxExplicitLinkingFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_explicit_linking_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxSequenceEvidenceCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_sequence_evidence_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxBuildSelfReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_build_self_reference", this]);
});

Clazz.newMeth(C$, 'enterPdbxNTerminalSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_N_terminal_seq_one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxCTerminalSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_C_terminal_seq_one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqThreeLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_three_letter_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_db_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqDbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly", "pdbx_seq_db_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqAlignBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_poly", "pdbx_seq_align_begin", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqAlignEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_poly", "pdbx_seq_align_end", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntityPolySeqBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_poly_seq", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly_seq", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterHetero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly_seq", "hetero", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_poly_seq", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_poly_seq", "num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entry", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxDOI$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entry", "pdbx_DOI", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntryLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entry_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entry_link", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entry_link", "id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entry_link", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ExptlBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["exptl", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAbsorptCoefficientMu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl", "absorpt_coefficient_mu", this]);
});

Clazz.newMeth(C$, 'enterAbsorptCorrectionTMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl", "absorpt_correction_T_max", this]);
});

Clazz.newMeth(C$, 'enterAbsorptCorrectionTMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl", "absorpt_correction_T_min", this]);
});

Clazz.newMeth(C$, 'enterAbsorptCorrectionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "absorpt_correction_type", this]);
});

Clazz.newMeth(C$, 'enterAbsorptProcessDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "absorpt_process_details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCrystalsNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["exptl", "crystals_number", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "details", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "method", this]);
});

Clazz.newMeth(C$, 'enterMethodDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl", "method_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ExptlCrystalBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["exptl_crystal", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterColour$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "colour", this]);
});

Clazz.newMeth(C$, 'enterDensityDiffrn$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_diffrn", this]);
});

Clazz.newMeth(C$, 'enterDensityMatthews$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_Matthews", this]);
});

Clazz.newMeth(C$, 'enterDensityMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "density_method", this]);
});

Clazz.newMeth(C$, 'enterDensityPercentSol$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_percent_sol", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "description", this]);
});

Clazz.newMeth(C$, 'enterF000$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["exptl_crystal", "F_000", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "id", this]);
});

Clazz.newMeth(C$, 'enterPreparation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "preparation", this]);
});

Clazz.newMeth(C$, 'enterSizeMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "size_max", this]);
});

Clazz.newMeth(C$, 'enterSizeMid$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "size_mid", this]);
});

Clazz.newMeth(C$, 'enterSizeMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "size_min", this]);
});

Clazz.newMeth(C$, 'enterSizeRad$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "size_rad", this]);
});

Clazz.newMeth(C$, 'enterColourLustre$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "colour_lustre", this]);
});

Clazz.newMeth(C$, 'enterColourModifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "colour_modifier", this]);
});

Clazz.newMeth(C$, 'enterColourPrimary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "colour_primary", this]);
});

Clazz.newMeth(C$, 'enterDensityMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_esd", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_gt", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_lt", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_temp", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasTempEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_temp_esd", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasTempGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_temp_gt", this]);
});

Clazz.newMeth(C$, 'enterDensityMeasTempLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "density_meas_temp_lt", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalImageUrl$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_image_url", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalImageFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_image_format", this]);
});

Clazz.newMeth(C$, 'enterPdbxMosaicity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_mosaicity", this]);
});

Clazz.newMeth(C$, 'enterPdbxMosaicityEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_mosaicity_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalImage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_image", this]);
});

Clazz.newMeth(C$, 'enterPdbxX_rayImage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "pdbx_x-ray_image", this]);
});

Clazz.newMeth(C$, 'enterPdbxX_rayImageType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal", "pdbx_x-ray_image_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalDiffrnLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_diffrn_limit", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalDiffrnLifetime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_diffrn_lifetime", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalDirection1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_direction_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalDirection2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_direction_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxCrystalDirection3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal", "pdbx_crystal_direction_3", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ExptlCrystalFaceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["exptl_crystal_face", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_face", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterDiffrChi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_face", "diffr_chi", this]);
});

Clazz.newMeth(C$, 'enterDiffrKappa$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_face", "diffr_kappa", this]);
});

Clazz.newMeth(C$, 'enterDiffrPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_face", "diffr_phi", this]);
});

Clazz.newMeth(C$, 'enterDiffrPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_face", "diffr_psi", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["exptl_crystal_face", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["exptl_crystal_face", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["exptl_crystal_face", "index_l", this]);
});

Clazz.newMeth(C$, 'enterPerpDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_face", "perp_dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ExptlCrystalGrowBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["exptl_crystal_grow", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterApparatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "apparatus", this]);
});

Clazz.newMeth(C$, 'enterAtmosphere$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "atmosphere", this]);
});

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "details", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "method", this]);
});

Clazz.newMeth(C$, 'enterMethodRef$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "method_ref", this]);
});

Clazz.newMeth(C$, 'enterPH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_grow", "pH", this]);
});

Clazz.newMeth(C$, 'enterPressure$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_grow", "pressure", this]);
});

Clazz.newMeth(C$, 'enterPressureEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_grow", "pressure_esd", this]);
});

Clazz.newMeth(C$, 'enterSeeding$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "seeding", this]);
});

Clazz.newMeth(C$, 'enterSeedingRef$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "seeding_ref", this]);
});

Clazz.newMeth(C$, 'enterTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_grow", "temp", this]);
});

Clazz.newMeth(C$, 'enterTempDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "temp_details", this]);
});

Clazz.newMeth(C$, 'enterTempEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["exptl_crystal_grow", "temp_esd", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "time", this]);
});

Clazz.newMeth(C$, 'enterPdbxDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "pdbx_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxPHRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow", "pdbx_pH_range", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ExptlCrystalGrowCompBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["exptl_crystal_grow_comp", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterConc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "conc", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "details", this]);
});

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "name", this]);
});

Clazz.newMeth(C$, 'enterSolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "sol_id", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "volume", this]);
});

Clazz.newMeth(C$, 'enterPdbxConcFinal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_conc_final", this]);
});

Clazz.newMeth(C$, 'enterPdbxBath$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_bath", this]);
});

Clazz.newMeth(C$, 'enterPdbxSalt$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_salt", this]);
});

Clazz.newMeth(C$, 'enterPdbxSoakSalt$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_soak_salt", this]);
});

Clazz.newMeth(C$, 'enterPdbxSoakSolv$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_soak_solv", this]);
});

Clazz.newMeth(C$, 'enterPdbxSolv$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["exptl_crystal_grow_comp", "pdbx_solv", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_angle", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_angle", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId3$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_angle", "atom_site_label_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_label_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "atom_site_auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterPublFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "publ_flag", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "site_symmetry_3", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_angle", "value", this]);
});

Clazz.newMeth(C$, 'enterValueEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_angle", "value_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "pdbx_atom_site_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "pdbx_atom_site_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_angle", "pdbx_atom_site_PDB_ins_code_3", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_angle", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_bond", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_bond", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_bond", "dist", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_bond", "dist_esd", this]);
});

Clazz.newMeth(C$, 'enterPublFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "publ_flag", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterValence$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_bond", "valence", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "pdbx_atom_site_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_bond", "pdbx_atom_site_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_bond", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomContactBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom_contact", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_contact", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_contact", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_contact", "dist", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_contact", "dist_esd", this]);
});

Clazz.newMeth(C$, 'enterPublFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "publ_flag", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "pdbx_atom_site_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_contact", "pdbx_atom_site_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_contact", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomHbondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom_hbond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleDHA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "angle_DHA", this]);
});

Clazz.newMeth(C$, 'enterAngleDHAEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "angle_DHA_esd", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_alt_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_asym_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_atom_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_comp_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqIdA$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_hbond", "atom_site_label_seq_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_alt_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_asym_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_atom_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_comp_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqIdD$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_hbond", "atom_site_label_seq_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_alt_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_asym_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_atom_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_label_comp_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqIdH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_hbond", "atom_site_label_seq_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_asym_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_atom_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_comp_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqIdA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_seq_id_A", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_asym_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_atom_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_comp_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqIdD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_seq_id_D", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_asym_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_atom_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_comp_id_H", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqIdH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "atom_site_auth_seq_id_H", this]);
});

Clazz.newMeth(C$, 'enterDistDA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_DA", this]);
});

Clazz.newMeth(C$, 'enterDistDAEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_DA_esd", this]);
});

Clazz.newMeth(C$, 'enterDistDH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_DH", this]);
});

Clazz.newMeth(C$, 'enterDistDHEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_DH_esd", this]);
});

Clazz.newMeth(C$, 'enterDistHA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_HA", this]);
});

Clazz.newMeth(C$, 'enterDistHAEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_hbond", "dist_HA_esd", this]);
});

Clazz.newMeth(C$, 'enterPublFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "publ_flag", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetryA$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "site_symmetry_A", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetryD$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "site_symmetry_D", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetryH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_hbond", "site_symmetry_H", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "GeomTorsionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["geom_torsion", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_torsion", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_torsion", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId3$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_torsion", "atom_site_label_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_alt_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_comp_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId4$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_torsion", "atom_site_label_seq_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_label_asym_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_asym_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_comp_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "atom_site_auth_seq_id_4", this]);
});

Clazz.newMeth(C$, 'enterPublFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "publ_flag", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "site_symmetry_3", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "site_symmetry_4", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_torsion", "value", this]);
});

Clazz.newMeth(C$, 'enterValueEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["geom_torsion", "value_esd", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "pdbx_atom_site_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "pdbx_atom_site_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "pdbx_atom_site_PDB_ins_code_3", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomSitePDBInsCode4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["geom_torsion", "pdbx_atom_site_PDB_ins_code_4", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["geom_torsion", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "JournalBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["journal", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCodenASTM$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coden_ASTM", this]);
});

Clazz.newMeth(C$, 'enterCodenCambridge$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coden_Cambridge", this]);
});

Clazz.newMeth(C$, 'enterCoeditorAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_address", this]);
});

Clazz.newMeth(C$, 'enterCoeditorCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_code", this]);
});

Clazz.newMeth(C$, 'enterCoeditorEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_email", this]);
});

Clazz.newMeth(C$, 'enterCoeditorFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_fax", this]);
});

Clazz.newMeth(C$, 'enterCoeditorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_name", this]);
});

Clazz.newMeth(C$, 'enterCoeditorNotes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_notes", this]);
});

Clazz.newMeth(C$, 'enterCoeditorPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "coeditor_phone", this]);
});

Clazz.newMeth(C$, 'enterDataValidationNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "data_validation_number", this]);
});

Clazz.newMeth(C$, 'enterDateAccepted$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_accepted", this]);
});

Clazz.newMeth(C$, 'enterDateFromCoeditor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_from_coeditor", this]);
});

Clazz.newMeth(C$, 'enterDateToCoeditor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_to_coeditor", this]);
});

Clazz.newMeth(C$, 'enterDatePrintersFinal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_printers_final", this]);
});

Clazz.newMeth(C$, 'enterDatePrintersFirst$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_printers_first", this]);
});

Clazz.newMeth(C$, 'enterDateProofsIn$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_proofs_in", this]);
});

Clazz.newMeth(C$, 'enterDateProofsOut$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_proofs_out", this]);
});

Clazz.newMeth(C$, 'enterDateRecdCopyright$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_recd_copyright", this]);
});

Clazz.newMeth(C$, 'enterDateRecdElectronic$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_recd_electronic", this]);
});

Clazz.newMeth(C$, 'enterDateRecdHardCopy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "date_recd_hard_copy", this]);
});

Clazz.newMeth(C$, 'enterIssue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "issue", this]);
});

Clazz.newMeth(C$, 'enterLanguage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "language", this]);
});

Clazz.newMeth(C$, 'enterNameFull$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "name_full", this]);
});

Clazz.newMeth(C$, 'enterPageFirst$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "page_first", this]);
});

Clazz.newMeth(C$, 'enterPageLast$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "page_last", this]);
});

Clazz.newMeth(C$, 'enterPaperCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "paper_category", this]);
});

Clazz.newMeth(C$, 'enterSupplPublNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "suppl_publ_number", this]);
});

Clazz.newMeth(C$, 'enterSupplPublPages$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "suppl_publ_pages", this]);
});

Clazz.newMeth(C$, 'enterTecheditorAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_address", this]);
});

Clazz.newMeth(C$, 'enterTecheditorCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_code", this]);
});

Clazz.newMeth(C$, 'enterTecheditorEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_email", this]);
});

Clazz.newMeth(C$, 'enterTecheditorFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_fax", this]);
});

Clazz.newMeth(C$, 'enterTecheditorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_name", this]);
});

Clazz.newMeth(C$, 'enterTecheditorNotes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_notes", this]);
});

Clazz.newMeth(C$, 'enterTecheditorPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "techeditor_phone", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "volume", this]);
});

Clazz.newMeth(C$, 'enterYear$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal", "year", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "JournalIndexBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["journal_index", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSubterm$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal_index", "subterm", this]);
});

Clazz.newMeth(C$, 'enterTerm$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal_index", "term", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["journal_index", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing", "method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingAveragingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_averaging", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_averaging", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_averaging", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_averaging", "method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingIsomorphousBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_isomorphous", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_isomorphous", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_isomorphous", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_isomorphous", "method", this]);
});

Clazz.newMeth(C$, 'enterParent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_isomorphous", "parent", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMADBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MAD", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD", "method", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_d_res_low", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD", "pdbx_reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD", "pdbx_reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD", "pdbx_reflns", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_fom_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_fom", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_cullis", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_R_kraut", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_loc_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_loc", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_power_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD", "pdbx_power", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberDataSets$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD", "pdbx_number_data_sets", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnomScatMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD", "pdbx_anom_scat_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMADClustBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MAD_clust", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterExptId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_clust", "expt_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_clust", "id", this]);
});

Clazz.newMeth(C$, 'enterNumberSet$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD_clust", "number_set", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMADExptBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MAD_expt", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDeltaDeltaPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "delta_delta_phi", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "delta_phi", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhiSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "delta_phi_sigma", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_expt", "id", this]);
});

Clazz.newMeth(C$, 'enterMeanFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "mean_fom", this]);
});

Clazz.newMeth(C$, 'enterNumberClust$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MAD_expt", "number_clust", this]);
});

Clazz.newMeth(C$, 'enterRNormalAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "R_normal_all", this]);
});

Clazz.newMeth(C$, 'enterRNormalAnomScat$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_expt", "R_normal_anom_scat", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMADRatioBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MAD_ratio", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterExptId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_ratio", "expt_id", this]);
});

Clazz.newMeth(C$, 'enterClustId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_ratio", "clust_id", this]);
});

Clazz.newMeth(C$, 'enterRatioOneWl$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "ratio_one_wl", this]);
});

Clazz.newMeth(C$, 'enterRatioOneWlCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "ratio_one_wl_centric", this]);
});

Clazz.newMeth(C$, 'enterRatioTwoWl$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "ratio_two_wl", this]);
});

Clazz.newMeth(C$, 'enterWavelength1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "wavelength_1", this]);
});

Clazz.newMeth(C$, 'enterWavelength2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_ratio", "wavelength_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMADSetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MAD_set", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterClustId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_set", "clust_id", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterExptId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_set", "expt_id", this]);
});

Clazz.newMeth(C$, 'enterFDoublePrime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "f_double_prime", this]);
});

Clazz.newMeth(C$, 'enterFPrime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "f_prime", this]);
});

Clazz.newMeth(C$, 'enterSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_set", "set_id", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterWavelengthDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_set", "wavelength_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MAD_set", "pdbx_atom_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxFPrimeRefined$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "pdbx_f_prime_refined", this]);
});

Clazz.newMeth(C$, 'enterPdbxFDoublePrimeRefined$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MAD_set", "pdbx_f_double_prime_refined", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR", "details", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterFOM$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR", "FOM", this]);
});

Clazz.newMeth(C$, 'enterFOMAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR", "FOM_acentric", this]);
});

Clazz.newMeth(C$, 'enterFOMCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR", "FOM_centric", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR", "method", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR", "reflns", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCriterion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR", "reflns_criterion", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberDerivatives$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR", "pdbx_number_derivatives", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRDerBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR_der", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDerSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der", "der_set_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der", "id", this]);
});

Clazz.newMeth(C$, 'enterNativeSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der", "native_set_id", this]);
});

Clazz.newMeth(C$, 'enterNumberOfSites$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der", "number_of_sites", this]);
});

Clazz.newMeth(C$, 'enterPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "power_centric", this]);
});

Clazz.newMeth(C$, 'enterRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterRCullisAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "R_cullis_anomalous", this]);
});

Clazz.newMeth(C$, 'enterRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsAnomalous$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der", "reflns_anomalous", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der", "reflns_criteria", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_R_kraut", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_loc_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_loc", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_fom_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_fom", this]);
});

Clazz.newMeth(C$, 'enterPdbxPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_power", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_R_cullis", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der", "pdbx_reflns", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRDerReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR_der_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_refln", "der_id", this]);
});

Clazz.newMeth(C$, 'enterFCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_calc", this]);
});

Clazz.newMeth(C$, 'enterFCalcAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_calc_au", this]);
});

Clazz.newMeth(C$, 'enterFMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_meas", this]);
});

Clazz.newMeth(C$, 'enterFMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_meas_au", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_meas_sigma", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigmaAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "F_meas_sigma_au", this]);
});

Clazz.newMeth(C$, 'enterHLAIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "HL_A_iso", this]);
});

Clazz.newMeth(C$, 'enterHLBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "HL_B_iso", this]);
});

Clazz.newMeth(C$, 'enterHLCIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "HL_C_iso", this]);
});

Clazz.newMeth(C$, 'enterHLDIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "HL_D_iso", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der_refln", "index_l", this]);
});

Clazz.newMeth(C$, 'enterPhaseCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_refln", "phase_calc", this]);
});

Clazz.newMeth(C$, 'enterSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_refln", "set_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRDerShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR_der_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_shell", "der_id", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "fom", this]);
});

Clazz.newMeth(C$, 'enterHaAmpl$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "ha_ampl", this]);
});

Clazz.newMeth(C$, 'enterLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "loc", this]);
});

Clazz.newMeth(C$, 'enterPhase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "phase", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "power", this]);
});

Clazz.newMeth(C$, 'enterRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "R_cullis", this]);
});

Clazz.newMeth(C$, 'enterRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "R_kraut", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der_shell", "reflns", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_loc_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_power_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_fom_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflnsCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_der_shell", "pdbx_reflns_acentric", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRDerSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR_der_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_site", "atom_type_symbol", this]);
});

Clazz.newMeth(C$, 'enterBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "B_iso", this]);
});

Clazz.newMeth(C$, 'enterBIsoEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "B_iso_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_x_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_y_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterCartnZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "Cartn_z_esd", this]);
});

Clazz.newMeth(C$, 'enterDerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_site", "der_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_site", "details", this]);
});

Clazz.newMeth(C$, 'enterFractX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_x", this]);
});

Clazz.newMeth(C$, 'enterFractXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_x_esd", this]);
});

Clazz.newMeth(C$, 'enterFractY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_y", this]);
});

Clazz.newMeth(C$, 'enterFractYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_y_esd", this]);
});

Clazz.newMeth(C$, 'enterFractZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_z", this]);
});

Clazz.newMeth(C$, 'enterFractZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "fract_z_esd", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_MIR_der_site", "id", this]);
});

Clazz.newMeth(C$, 'enterOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "occupancy", this]);
});

Clazz.newMeth(C$, 'enterOccupancyAnom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "occupancy_anom", this]);
});

Clazz.newMeth(C$, 'enterOccupancyAnomSu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "occupancy_anom_su", this]);
});

Clazz.newMeth(C$, 'enterOccupancyIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "occupancy_iso", this]);
});

Clazz.newMeth(C$, 'enterOccupancyIsoSu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_der_site", "occupancy_iso_su", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingMIRShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_MIR_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterFOM$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "FOM", this]);
});

Clazz.newMeth(C$, 'enterFOMAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "FOM_acentric", this]);
});

Clazz.newMeth(C$, 'enterFOMCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "FOM_centric", this]);
});

Clazz.newMeth(C$, 'enterLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "loc", this]);
});

Clazz.newMeth(C$, 'enterMeanPhase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "mean_phase", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "power", this]);
});

Clazz.newMeth(C$, 'enterRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "R_cullis", this]);
});

Clazz.newMeth(C$, 'enterRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "R_kraut", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_shell", "reflns", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_shell", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsAnomalous$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_shell", "reflns_anomalous", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_MIR_shell", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_loc_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_power_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterPdbxRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_MIR_shell", "pdbx_R_cullis_acentric", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingSetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_set", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCellAngleAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_angle_alpha", this]);
});

Clazz.newMeth(C$, 'enterCellAngleBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_angle_beta", this]);
});

Clazz.newMeth(C$, 'enterCellAngleGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_angle_gamma", this]);
});

Clazz.newMeth(C$, 'enterCellLengthA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_length_a", this]);
});

Clazz.newMeth(C$, 'enterCellLengthB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_length_b", this]);
});

Clazz.newMeth(C$, 'enterCellLengthC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "cell_length_c", this]);
});

Clazz.newMeth(C$, 'enterDetectorSpecific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set", "detector_specific", this]);
});

Clazz.newMeth(C$, 'enterDetectorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set", "detector_type", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set", "id", this]);
});

Clazz.newMeth(C$, 'enterRadiationSourceSpecific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set", "radiation_source_specific", this]);
});

Clazz.newMeth(C$, 'enterRadiationWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "radiation_wavelength", this]);
});

Clazz.newMeth(C$, 'enterTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "temp", this]);
});

Clazz.newMeth(C$, 'enterPdbxTempDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set", "pdbx_temp_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "pdbx_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set", "pdbx_d_res_low", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PhasingSetReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["phasing_set_refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["phasing_set_refln", "set_id", this]);
});

Clazz.newMeth(C$, 'enterFMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set_refln", "F_meas", this]);
});

Clazz.newMeth(C$, 'enterFMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set_refln", "F_meas_au", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set_refln", "F_meas_sigma", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigmaAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["phasing_set_refln", "F_meas_sigma_au", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_set_refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_set_refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["phasing_set_refln", "index_l", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PublBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["publ", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterContactAuthor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author_address", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author_email", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author_fax", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author_name", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_author_phone", this]);
});

Clazz.newMeth(C$, 'enterContactLetter$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "contact_letter", this]);
});

Clazz.newMeth(C$, 'enterManuscriptCreation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "manuscript_creation", this]);
});

Clazz.newMeth(C$, 'enterManuscriptProcessed$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "manuscript_processed", this]);
});

Clazz.newMeth(C$, 'enterManuscriptText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "manuscript_text", this]);
});

Clazz.newMeth(C$, 'enterRequestedCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "requested_category", this]);
});

Clazz.newMeth(C$, 'enterRequestedCoeditorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "requested_coeditor_name", this]);
});

Clazz.newMeth(C$, 'enterRequestedJournal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "requested_journal", this]);
});

Clazz.newMeth(C$, 'enterSectionAbstract$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_abstract", this]);
});

Clazz.newMeth(C$, 'enterSectionAcknowledgements$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_acknowledgements", this]);
});

Clazz.newMeth(C$, 'enterSectionComment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_comment", this]);
});

Clazz.newMeth(C$, 'enterSectionDiscussion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_discussion", this]);
});

Clazz.newMeth(C$, 'enterSectionExperimental$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_experimental", this]);
});

Clazz.newMeth(C$, 'enterSectionExptlPrep$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_exptl_prep", this]);
});

Clazz.newMeth(C$, 'enterSectionExptlRefinement$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_exptl_refinement", this]);
});

Clazz.newMeth(C$, 'enterSectionExptlSolution$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_exptl_solution", this]);
});

Clazz.newMeth(C$, 'enterSectionFigureCaptions$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_figure_captions", this]);
});

Clazz.newMeth(C$, 'enterSectionIntroduction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_introduction", this]);
});

Clazz.newMeth(C$, 'enterSectionReferences$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_references", this]);
});

Clazz.newMeth(C$, 'enterSectionSynopsis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_synopsis", this]);
});

Clazz.newMeth(C$, 'enterSectionTableLegends$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_table_legends", this]);
});

Clazz.newMeth(C$, 'enterSectionTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_title", this]);
});

Clazz.newMeth(C$, 'enterSectionTitleFootnote$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ", "section_title_footnote", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PublAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["publ_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_author", "address", this]);
});

Clazz.newMeth(C$, 'enterEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_author", "email", this]);
});

Clazz.newMeth(C$, 'enterFootnote$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_author", "footnote", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_author", "name", this]);
});

Clazz.newMeth(C$, 'enterIdIucr$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_author", "id_iucr", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PublBodyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["publ_body", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterContents$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_body", "contents", this]);
});

Clazz.newMeth(C$, 'enterElement$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_body", "element", this]);
});

Clazz.newMeth(C$, 'enterFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_body", "format", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_body", "label", this]);
});

Clazz.newMeth(C$, 'enterTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_body", "title", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PublManuscriptInclBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["publ_manuscript_incl", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_manuscript_incl", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterExtraDefn$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_manuscript_incl", "extra_defn", this]);
});

Clazz.newMeth(C$, 'enterExtraInfo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_manuscript_incl", "extra_info", this]);
});

Clazz.newMeth(C$, 'enterExtraItem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["publ_manuscript_incl", "extra_item", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAnisoB11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[1][1]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[1][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[1][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[2][2]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[2][3]", this]);
});

Clazz.newMeth(C$, 'enterAnisoB33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "aniso_B[3][3]", this]);
});

Clazz.newMeth(C$, 'enterBIsoMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "B_iso_max", this]);
});

Clazz.newMeth(C$, 'enterBIsoMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "B_iso_mean", this]);
});

Clazz.newMeth(C$, 'enterBIsoMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "B_iso_min", this]);
});

Clazz.newMeth(C$, 'enterCorrelationCoeffFoToFc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "correlation_coeff_Fo_to_Fc", this]);
});

Clazz.newMeth(C$, 'enterCorrelationCoeffFoToFcFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "correlation_coeff_Fo_to_Fc_free", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "details", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_max", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityMaxEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_max_esd", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_min", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityMinEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_min_esd", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_rms", this]);
});

Clazz.newMeth(C$, 'enterDiffDensityRmsEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "diff_density_rms_esd", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterLsAbsStructureDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_abs_structure_details", this]);
});

Clazz.newMeth(C$, 'enterLsAbsStructureFlack$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_abs_structure_Flack", this]);
});

Clazz.newMeth(C$, 'enterLsAbsStructureFlackEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_abs_structure_Flack_esd", this]);
});

Clazz.newMeth(C$, 'enterLsAbsStructureRogers$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_abs_structure_Rogers", this]);
});

Clazz.newMeth(C$, 'enterLsAbsStructureRogersEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_abs_structure_Rogers_esd", this]);
});

Clazz.newMeth(C$, 'enterLsDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterLsDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_d_res_low", this]);
});

Clazz.newMeth(C$, 'enterLsExtinctionCoef$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_extinction_coef", this]);
});

Clazz.newMeth(C$, 'enterLsExtinctionCoefEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_extinction_coef_esd", this]);
});

Clazz.newMeth(C$, 'enterLsExtinctionExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_extinction_expression", this]);
});

Clazz.newMeth(C$, 'enterLsExtinctionMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_extinction_method", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_all", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitAllEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_all_esd", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_obs", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitObsEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_obs_esd", this]);
});

Clazz.newMeth(C$, 'enterLsHydrogenTreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_hydrogen_treatment", this]);
});

Clazz.newMeth(C$, 'enterLsMatrixType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_matrix_type", this]);
});

Clazz.newMeth(C$, 'enterLsNumberConstraints$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_constraints", this]);
});

Clazz.newMeth(C$, 'enterLsNumberParameters$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_parameters", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_reflns_all", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsRFree$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsRWork$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_reflns_R_work", this]);
});

Clazz.newMeth(C$, 'enterLsNumberRestraints$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "ls_number_restraints", this]);
});

Clazz.newMeth(C$, 'enterLsPercentReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_percent_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterLsPercentReflnsRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_percent_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_all", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRFreeError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_R_free_error", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRFreeErrorDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_R_factor_R_free_error_details", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterLsRFsqdFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_Fsqd_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterLsRIFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_I_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterLsRedundancyReflnsAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_redundancy_reflns_all", this]);
});

Clazz.newMeth(C$, 'enterLsRedundancyReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_redundancy_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterLsRestrainedSAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_restrained_S_all", this]);
});

Clazz.newMeth(C$, 'enterLsRestrainedSObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_restrained_S_obs", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverEsdMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_esd_max", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverEsdMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_esd_mean", this]);
});

Clazz.newMeth(C$, 'enterLsStructureFactorCoef$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_structure_factor_coef", this]);
});

Clazz.newMeth(C$, 'enterLsWeightingDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_weighting_details", this]);
});

Clazz.newMeth(C$, 'enterLsWeightingScheme$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "ls_weighting_scheme", this]);
});

Clazz.newMeth(C$, 'enterLsWRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_wR_factor_all", this]);
});

Clazz.newMeth(C$, 'enterLsWRFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_wR_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterLsWRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_wR_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterLsWRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_wR_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "occupancy_max", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "occupancy_min", this]);
});

Clazz.newMeth(C$, 'enterSolventModelDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "solvent_model_details", this]);
});

Clazz.newMeth(C$, 'enterSolventModelParamBsol$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "solvent_model_param_bsol", this]);
});

Clazz.newMeth(C$, 'enterSolventModelParamKsol$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "solvent_model_param_ksol", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_R_factor_gt", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_gt", this]);
});

Clazz.newMeth(C$, 'enterLsGoodnessOfFitRef$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_goodness_of_fit_ref", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverSuMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_su_max", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverSuMaxLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_su_max_lt", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverSuMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_su_mean", this]);
});

Clazz.newMeth(C$, 'enterLsShiftOverSuMeanLt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "ls_shift_over_su_mean_lt", this]);
});

Clazz.newMeth(C$, 'enterPdbxLsSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_ls_sigma_I", this]);
});

Clazz.newMeth(C$, 'enterPdbxLsSigmaF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_ls_sigma_F", this]);
});

Clazz.newMeth(C$, 'enterPdbxLsSigmaFsqd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_ls_sigma_Fsqd", this]);
});

Clazz.newMeth(C$, 'enterPdbxDataCutoffHighAbsF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_data_cutoff_high_absF", this]);
});

Clazz.newMeth(C$, 'enterPdbxDataCutoffHighRmsAbsF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_data_cutoff_high_rms_absF", this]);
});

Clazz.newMeth(C$, 'enterPdbxDataCutoffLowAbsF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_data_cutoff_low_absF", this]);
});

Clazz.newMeth(C$, 'enterPdbxIsotropicThermalModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_isotropic_thermal_model", this]);
});

Clazz.newMeth(C$, 'enterPdbxLsCrossValidMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_ls_cross_valid_method", this]);
});

Clazz.newMeth(C$, 'enterPdbxMethodToDetermineStruct$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_method_to_determine_struct", this]);
});

Clazz.newMeth(C$, 'enterPdbxStartingModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_starting_model", this]);
});

Clazz.newMeth(C$, 'enterPdbxStereochemistryTargetValues$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_stereochemistry_target_values", this]);
});

Clazz.newMeth(C$, 'enterPdbxRFreeSelectionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_R_Free_selection_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxStereochemTargetValSpecCase$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_stereochem_target_val_spec_case", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallESUR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_ESU_R", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallESURFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_ESU_R_Free", this]);
});

Clazz.newMeth(C$, 'enterPdbxSolventVdwProbeRadii$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_solvent_vdw_probe_radii", this]);
});

Clazz.newMeth(C$, 'enterPdbxSolventIonProbeRadii$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_solvent_ion_probe_radii", this]);
});

Clazz.newMeth(C$, 'enterPdbxSolventShrinkageRadii$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_solvent_shrinkage_radii", this]);
});

Clazz.newMeth(C$, 'enterPdbxRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_real_space_R", this]);
});

Clazz.newMeth(C$, 'enterPdbxDensityCorrelation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_density_correlation", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdNumberOfPowderPatterns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "pdbx_pd_number_of_powder_patterns", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdNumberOfPoints$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "pdbx_pd_number_of_points", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdMeasNumberOfPoints$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "pdbx_pd_meas_number_of_points", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdProcLsProfRFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_pd_proc_ls_prof_R_factor", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdProcLsProfWRFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_pd_proc_ls_prof_wR_factor", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdMarquardtCorrelationCoeff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_pd_Marquardt_correlation_coeff", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdFsqrdRFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_pd_Fsqrd_R_factor", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdLsMatrixBandWidth$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine", "pdbx_pd_ls_matrix_band_width", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallPhaseError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_phase_error", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallSURFreeCruickshankDPI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_SU_R_free_Cruickshank_DPI", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallSURFreeBlowDPI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_SU_R_free_Blow_DPI", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallSURBlowDPI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_SU_R_Blow_DPI", this]);
});

Clazz.newMeth(C$, 'enterPdbxTLSResidualADPFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_TLS_residual_ADP_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine", "pdbx_diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterOverallSUB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_SU_B", this]);
});

Clazz.newMeth(C$, 'enterOverallSUML$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_SU_ML", this]);
});

Clazz.newMeth(C$, 'enterOverallSURCruickshankDPI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_SU_R_Cruickshank_DPI", this]);
});

Clazz.newMeth(C$, 'enterOverallSURFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_SU_R_free", this]);
});

Clazz.newMeth(C$, 'enterOverallFOMFreeRSet$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_FOM_free_R_set", this]);
});

Clazz.newMeth(C$, 'enterOverallFOMWorkRSet$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "overall_FOM_work_R_set", this]);
});

Clazz.newMeth(C$, 'enterPdbxAverageFscOverall$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_average_fsc_overall", this]);
});

Clazz.newMeth(C$, 'enterPdbxAverageFscWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_average_fsc_work", this]);
});

Clazz.newMeth(C$, 'enterPdbxAverageFscFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_average_fsc_free", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallESUB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_ESU_B", this]);
});

Clazz.newMeth(C$, 'enterPdbxOverallESUML$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine", "pdbx_overall_ESU_ML", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineAnalyzeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_analyze", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_analyze", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_analyze", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiCoordinateErrorFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_coordinate_error_free", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiCoordinateErrorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_coordinate_error_obs", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiDResLowFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_d_res_low_free", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiDResLowObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_d_res_low_obs", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiSigmaAFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_sigma_a_free", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiSigmaAFreeDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_analyze", "Luzzati_sigma_a_free_details", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiSigmaAObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "Luzzati_sigma_a_obs", this]);
});

Clazz.newMeth(C$, 'enterLuzzatiSigmaAObsDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_analyze", "Luzzati_sigma_a_obs_details", this]);
});

Clazz.newMeth(C$, 'enterNumberDisorderedResidues$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "number_disordered_residues", this]);
});

Clazz.newMeth(C$, 'enterOccupancySumHydrogen$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "occupancy_sum_hydrogen", this]);
});

Clazz.newMeth(C$, 'enterOccupancySumNonHydrogen$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "occupancy_sum_non_hydrogen", this]);
});

Clazz.newMeth(C$, 'enterRGDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "RG_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterRGDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "RG_d_res_low", this]);
});

Clazz.newMeth(C$, 'enterRGFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "RG_free", this]);
});

Clazz.newMeth(C$, 'enterRGWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "RG_work", this]);
});

Clazz.newMeth(C$, 'enterRGFreeWorkRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "RG_free_work_ratio", this]);
});

Clazz.newMeth(C$, 'enterPdbxLuzzatiDResHighObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_analyze", "pdbx_Luzzati_d_res_high_obs", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineBIsoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_B_iso", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "class", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "details", this]);
});

Clazz.newMeth(C$, 'enterTreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "treatment", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_B_iso", "value", this]);
});

Clazz.newMeth(C$, 'enterPdbxResidueName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "pdbx_residue_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxStrand$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "pdbx_strand", this]);
});

Clazz.newMeth(C$, 'enterPdbxResidueNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_B_iso", "pdbx_residue_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineFunctMinimizedBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_funct_minimized", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_funct_minimized", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterNumberTerms$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_funct_minimized", "number_terms", this]);
});

Clazz.newMeth(C$, 'enterResidual$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_funct_minimized", "residual", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_funct_minimized", "type", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_funct_minimized", "weight", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineHistBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_hist", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_hist", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterCycleId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_hist", "cycle_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_hist", "details", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsSolvent$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_atoms_solvent", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_atoms_total", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_reflns_all", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsRFree$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsRWork$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "number_reflns_R_work", this]);
});

Clazz.newMeth(C$, 'enterRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "R_factor_all", this]);
});

Clazz.newMeth(C$, 'enterRFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "R_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "R_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "R_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberResiduesTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_residues_total", this]);
});

Clazz.newMeth(C$, 'enterPdbxBIsoMeanLigand$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "pdbx_B_iso_mean_ligand", this]);
});

Clazz.newMeth(C$, 'enterPdbxBIsoMeanSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_hist", "pdbx_B_iso_mean_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsProtein$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_protein", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsNucleicAcid$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_nucleic_acid", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsLigand$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_ligand", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsLipid$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_lipid", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsCarb$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_carb", this]);
});

Clazz.newMeth(C$, 'enterPdbxPseudoAtomDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_hist", "pdbx_pseudo_atom_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsSolvent$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAtomsTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_hist", "pdbx_number_atoms_total", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineLsRestrBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_ls_restr", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterCriterion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr", "criterion", this]);
});

Clazz.newMeth(C$, 'enterDevIdeal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr", "dev_ideal", this]);
});

Clazz.newMeth(C$, 'enterDevIdealTarget$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr", "dev_ideal_target", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_restr", "number", this]);
});

Clazz.newMeth(C$, 'enterRejects$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_restr", "rejects", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr", "type", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr", "weight", this]);
});

Clazz.newMeth(C$, 'enterPdbxRestraintFunction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr", "pdbx_restraint_function", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineLsRestrNcsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_ls_restr_ncs", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterDomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "dom_id", this]);
});

Clazz.newMeth(C$, 'enterNcsModelDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "ncs_model_details", this]);
});

Clazz.newMeth(C$, 'enterRmsDevBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "rms_dev_B_iso", this]);
});

Clazz.newMeth(C$, 'enterRmsDevPosition$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "rms_dev_position", this]);
});

Clazz.newMeth(C$, 'enterWeightBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "weight_B_iso", this]);
});

Clazz.newMeth(C$, 'enterWeightPosition$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "weight_position", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterPdbxType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_number", this]);
});

Clazz.newMeth(C$, 'enterPdbxRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_rms", this]);
});

Clazz.newMeth(C$, 'enterPdbxWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_weight", this]);
});

Clazz.newMeth(C$, 'enterPdbxEnsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_ncs", "pdbx_ens_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineLsRestrTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_ls_restr_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDistanceCutoffHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_type", "distance_cutoff_high", this]);
});

Clazz.newMeth(C$, 'enterDistanceCutoffLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_restr_type", "distance_cutoff_low", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_restr_type", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineLsShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_ls_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_shell", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_shell", "number_reflns_all", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_shell", "number_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsRFree$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_shell", "number_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsRWork$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_shell", "number_reflns_R_work", this]);
});

Clazz.newMeth(C$, 'enterPercentReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "percent_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterPercentReflnsRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "percent_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "R_factor_all", this]);
});

Clazz.newMeth(C$, 'enterRFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "R_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "R_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterRFactorRFreeError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "R_factor_R_free_error", this]);
});

Clazz.newMeth(C$, 'enterRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "R_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterRedundancyReflnsAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "redundancy_reflns_all", this]);
});

Clazz.newMeth(C$, 'enterRedundancyReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "redundancy_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterWRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "wR_factor_all", this]);
});

Clazz.newMeth(C$, 'enterWRFactorObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "wR_factor_obs", this]);
});

Clazz.newMeth(C$, 'enterWRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "wR_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterWRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "wR_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterPdbxTotalNumberOfBinsUsed$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refine_ls_shell", "pdbx_total_number_of_bins_used", this]);
});

Clazz.newMeth(C$, 'enterPdbxPhaseError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "pdbx_phase_error", this]);
});

Clazz.newMeth(C$, 'enterPdbxFscWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "pdbx_fsc_work", this]);
});

Clazz.newMeth(C$, 'enterPdbxFscFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_shell", "pdbx_fsc_free", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineOccupancyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_occupancy", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_occupancy", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_occupancy", "class", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_occupancy", "details", this]);
});

Clazz.newMeth(C$, 'enterTreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_occupancy", "treatment", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_occupancy", "value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refln", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterACalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "A_calc", this]);
});

Clazz.newMeth(C$, 'enterACalcAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "A_calc_au", this]);
});

Clazz.newMeth(C$, 'enterAMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "A_meas", this]);
});

Clazz.newMeth(C$, 'enterAMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "A_meas_au", this]);
});

Clazz.newMeth(C$, 'enterBCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "B_calc", this]);
});

Clazz.newMeth(C$, 'enterBCalcAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "B_calc_au", this]);
});

Clazz.newMeth(C$, 'enterBMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "B_meas", this]);
});

Clazz.newMeth(C$, 'enterBMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "B_meas_au", this]);
});

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterFCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_calc", this]);
});

Clazz.newMeth(C$, 'enterFCalcAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_calc_au", this]);
});

Clazz.newMeth(C$, 'enterFMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_meas", this]);
});

Clazz.newMeth(C$, 'enterFMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_meas_au", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_meas_sigma", this]);
});

Clazz.newMeth(C$, 'enterFMeasSigmaAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_meas_sigma_au", this]);
});

Clazz.newMeth(C$, 'enterFSquaredCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_squared_calc", this]);
});

Clazz.newMeth(C$, 'enterFSquaredMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_squared_meas", this]);
});

Clazz.newMeth(C$, 'enterFSquaredSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "F_squared_sigma", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "fom", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "index_l", this]);
});

Clazz.newMeth(C$, 'enterIntensityCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "intensity_calc", this]);
});

Clazz.newMeth(C$, 'enterIntensityMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "intensity_meas", this]);
});

Clazz.newMeth(C$, 'enterIntensitySigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "intensity_sigma", this]);
});

Clazz.newMeth(C$, 'enterStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "status", this]);
});

Clazz.newMeth(C$, 'enterPhaseCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "phase_calc", this]);
});

Clazz.newMeth(C$, 'enterPhaseMeas$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "phase_meas", this]);
});

Clazz.newMeth(C$, 'enterRefinementStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "refinement_status", this]);
});

Clazz.newMeth(C$, 'enterScaleGroupCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "scale_group_code", this]);
});

Clazz.newMeth(C$, 'enterSintOverLambda$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "sint_over_lambda", this]);
});

Clazz.newMeth(C$, 'enterSymmetryEpsilon$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "symmetry_epsilon", this]);
});

Clazz.newMeth(C$, 'enterSymmetryMultiplicity$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "symmetry_multiplicity", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterWavelengthId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "wavelength_id", this]);
});

Clazz.newMeth(C$, 'enterClassCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "class_code", this]);
});

Clazz.newMeth(C$, 'enterDSpacing$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "d_spacing", this]);
});

Clazz.newMeth(C$, 'enterIncludeStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "include_status", this]);
});

Clazz.newMeth(C$, 'enterMeanPathLengthTbar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "mean_path_length_tbar", this]);
});

Clazz.newMeth(C$, 'enterPdbxFCalcPartSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_calc_part_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxPhaseCalcPartSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_phase_calc_part_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxFCalcWithSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_calc_with_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxPhaseCalcWithSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_phase_calc_with_solvent", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnomDifference$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_anom_difference", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnomDifferenceSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_anom_difference_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxIPlus$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_I_plus", this]);
});

Clazz.newMeth(C$, 'enterPdbxIMinus$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_I_minus", this]);
});

Clazz.newMeth(C$, 'enterPdbxFPlus$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_plus", this]);
});

Clazz.newMeth(C$, 'enterPdbxFMinus$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_minus", this]);
});

Clazz.newMeth(C$, 'enterPdbxIPlusSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_I_plus_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxIMinusSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_I_minus_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxFMinusSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_minus_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxFPlusSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_F_plus_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxHLAIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_HL_A_iso", this]);
});

Clazz.newMeth(C$, 'enterPdbxHLBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_HL_B_iso", this]);
});

Clazz.newMeth(C$, 'enterPdbxHLCIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_HL_C_iso", this]);
});

Clazz.newMeth(C$, 'enterPdbxHLDIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_HL_D_iso", this]);
});

Clazz.newMeth(C$, 'enterPdbxFiberLayer$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "pdbx_fiber_layer", this]);
});

Clazz.newMeth(C$, 'enterPdbxFiberCoordinate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_fiber_coordinate", this]);
});

Clazz.newMeth(C$, 'enterPdbxFiberFMeasAu$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_fiber_F_meas_au", this]);
});

Clazz.newMeth(C$, 'enterPdbxFWT$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_FWT", this]);
});

Clazz.newMeth(C$, 'enterPdbxPHWT$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_PHWT", this]);
});

Clazz.newMeth(C$, 'enterPdbxDELFWT$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_DELFWT", this]);
});

Clazz.newMeth(C$, 'enterPdbxDELPHWT$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_DELPHWT", this]);
});

Clazz.newMeth(C$, 'enterPdbxDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refln", "pdbx_diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRFreeFlag$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln", "pdbx_r_free_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnomalousDiff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_anomalous_diff", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnomalousDiffSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_anomalous_diff_sigma", this]);
});

Clazz.newMeth(C$, 'enterPdbxPhaseCycle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_phase_cycle", this]);
});

Clazz.newMeth(C$, 'enterPdbxCosPhaseCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_cos_phase_calc", this]);
});

Clazz.newMeth(C$, 'enterPdbxSinPhaseCalc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln", "pdbx_sin_phase_calc", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnSysAbsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refln_sys_abs", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln_sys_abs", "I", this]);
});

Clazz.newMeth(C$, 'enterIOverSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln_sys_abs", "I_over_sigmaI", this]);
});

Clazz.newMeth(C$, 'enterIndexH$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln_sys_abs", "index_h", this]);
});

Clazz.newMeth(C$, 'enterIndexK$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln_sys_abs", "index_k", this]);
});

Clazz.newMeth(C$, 'enterIndexL$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["refln_sys_abs", "index_l", this]);
});

Clazz.newMeth(C$, 'enterSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refln_sys_abs", "sigmaI", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["reflns", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBIsoWilsonEstimate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "B_iso_Wilson_estimate", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterDataReductionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "data_reduction_details", this]);
});

Clazz.newMeth(C$, 'enterDataReductionMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "data_reduction_method", this]);
});

Clazz.newMeth(C$, 'enterDResolutionHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "d_resolution_high", this]);
});

Clazz.newMeth(C$, 'enterDResolutionLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "d_resolution_low", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "details", this]);
});

Clazz.newMeth(C$, 'enterLimitHMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_h_max", this]);
});

Clazz.newMeth(C$, 'enterLimitHMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_h_min", this]);
});

Clazz.newMeth(C$, 'enterLimitKMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_k_max", this]);
});

Clazz.newMeth(C$, 'enterLimitKMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_k_min", this]);
});

Clazz.newMeth(C$, 'enterLimitLMax$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_l_max", this]);
});

Clazz.newMeth(C$, 'enterLimitLMin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "limit_l_min", this]);
});

Clazz.newMeth(C$, 'enterNumberAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "number_all", this]);
});

Clazz.newMeth(C$, 'enterNumberObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "number_obs", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "observed_criterion", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionFMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_F_max", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionFMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_F_min", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionIMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_I_max", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionIMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_I_min", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionSigmaF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_sigma_F", this]);
});

Clazz.newMeth(C$, 'enterObservedCriterionSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "observed_criterion_sigma_I", this]);
});

Clazz.newMeth(C$, 'enterPercentPossibleObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "percent_possible_obs", this]);
});

Clazz.newMeth(C$, 'enterRFreeDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "R_free_details", this]);
});

Clazz.newMeth(C$, 'enterRmergeFAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "Rmerge_F_all", this]);
});

Clazz.newMeth(C$, 'enterRmergeFObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "Rmerge_F_obs", this]);
});

Clazz.newMeth(C$, 'enterFriedelCoverage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "Friedel_coverage", this]);
});

Clazz.newMeth(C$, 'enterNumberGt$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "number_gt", this]);
});

Clazz.newMeth(C$, 'enterThresholdExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "threshold_expression", this]);
});

Clazz.newMeth(C$, 'enterPdbxRedundancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_redundancy", this]);
});

Clazz.newMeth(C$, 'enterPdbxRmergeIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rmerge_I_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxRmergeIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rmerge_I_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxRsymValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rsym_value", this]);
});

Clazz.newMeth(C$, 'enterPdbxNetIOverAvSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_netI_over_av_sigmaI", this]);
});

Clazz.newMeth(C$, 'enterPdbxNetIOverSigmaI$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_netI_over_sigmaI", this]);
});

Clazz.newMeth(C$, 'enterPdbxResNetIOverAvSigmaI2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_res_netI_over_av_sigmaI_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxResNetIOverSigmaI2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_res_netI_over_sigmaI_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxChiSquared$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_chi_squared", this]);
});

Clazz.newMeth(C$, 'enterPdbxScalingRejects$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "pdbx_scaling_rejects", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResHighOpt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_d_res_high_opt", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResLowOpt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_d_res_low_opt", this]);
});

Clazz.newMeth(C$, 'enterPdbxDResOptMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "pdbx_d_res_opt_method", this]);
});

Clazz.newMeth(C$, 'enterPhaseCalculationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "phase_calculation_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxRrimIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rrim_I_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxRpimIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rpim_I_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxDOpt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_d_opt", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberMeasuredAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "pdbx_number_measured_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns", "pdbx_diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterPdbxCCHalf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_CC_half", this]);
});

Clazz.newMeth(C$, 'enterPdbxRSplit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_R_split", this]);
});

Clazz.newMeth(C$, 'enterPdbxRedundancyReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_redundancy_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAnomalous$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns", "pdbx_number_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRrimIAllAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rrim_I_all_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRpimIAllAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rpim_I_all_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRmergeIAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns", "pdbx_Rmerge_I_anomalous", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnsScaleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["reflns_scale", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterGroupCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns_scale", "group_code", this]);
});

Clazz.newMeth(C$, 'enterMeasF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_scale", "meas_F", this]);
});

Clazz.newMeth(C$, 'enterMeasFSquared$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_scale", "meas_F_squared", this]);
});

Clazz.newMeth(C$, 'enterMeasIntensity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_scale", "meas_intensity", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnsShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["reflns_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterMeanIOverSigIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "meanI_over_sigI_all", this]);
});

Clazz.newMeth(C$, 'enterMeanIOverSigIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "meanI_over_sigI_obs", this]);
});

Clazz.newMeth(C$, 'enterNumberMeasuredAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_measured_all", this]);
});

Clazz.newMeth(C$, 'enterNumberMeasuredObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_measured_obs", this]);
});

Clazz.newMeth(C$, 'enterNumberPossible$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_possible", this]);
});

Clazz.newMeth(C$, 'enterNumberUniqueAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_unique_all", this]);
});

Clazz.newMeth(C$, 'enterNumberUniqueObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_unique_obs", this]);
});

Clazz.newMeth(C$, 'enterPercentPossibleAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "percent_possible_all", this]);
});

Clazz.newMeth(C$, 'enterPercentPossibleObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "percent_possible_obs", this]);
});

Clazz.newMeth(C$, 'enterRmergeFAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_F_all", this]);
});

Clazz.newMeth(C$, 'enterRmergeFObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_F_obs", this]);
});

Clazz.newMeth(C$, 'enterRmergeIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_I_all", this]);
});

Clazz.newMeth(C$, 'enterRmergeIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_I_obs", this]);
});

Clazz.newMeth(C$, 'enterMeanIOverSigIGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "meanI_over_sigI_gt", this]);
});

Clazz.newMeth(C$, 'enterMeanIOverUIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "meanI_over_uI_all", this]);
});

Clazz.newMeth(C$, 'enterMeanIOverUIGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "meanI_over_uI_gt", this]);
});

Clazz.newMeth(C$, 'enterNumberMeasuredGt$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_measured_gt", this]);
});

Clazz.newMeth(C$, 'enterNumberUniqueGt$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "number_unique_gt", this]);
});

Clazz.newMeth(C$, 'enterPercentPossibleGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "percent_possible_gt", this]);
});

Clazz.newMeth(C$, 'enterRmergeFGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_F_gt", this]);
});

Clazz.newMeth(C$, 'enterRmergeIGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "Rmerge_I_gt", this]);
});

Clazz.newMeth(C$, 'enterPdbxRedundancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_redundancy", this]);
});

Clazz.newMeth(C$, 'enterPdbxRsymValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rsym_value", this]);
});

Clazz.newMeth(C$, 'enterPdbxChiSquared$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_chi_squared", this]);
});

Clazz.newMeth(C$, 'enterPdbxNetIOverSigmaIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_netI_over_sigmaI_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxNetIOverSigmaIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_netI_over_sigmaI_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxRrimIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rrim_I_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxRpimIAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rpim_I_all", this]);
});

Clazz.newMeth(C$, 'enterPdbxRejects$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "pdbx_rejects", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$, 'enterPdbxDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns_shell", "pdbx_diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxCCHalf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_CC_half", this]);
});

Clazz.newMeth(C$, 'enterPdbxRSplit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_R_split", this]);
});

Clazz.newMeth(C$, 'enterPdbxRedundancyReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_redundancy_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumberAnomalous$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_shell", "pdbx_number_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRrimIAllAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rrim_I_all_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRpimIAllAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rpim_I_all_anomalous", this]);
});

Clazz.newMeth(C$, 'enterPdbxRmergeIAllAnomalous$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_shell", "pdbx_Rmerge_I_all_anomalous", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "SoftwareBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["software", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterClassification$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "classification", this]);
});

Clazz.newMeth(C$, 'enterCompilerName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "compiler_name", this]);
});

Clazz.newMeth(C$, 'enterCompilerVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "compiler_version", this]);
});

Clazz.newMeth(C$, 'enterContactAuthor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "contact_author", this]);
});

Clazz.newMeth(C$, 'enterContactAuthorEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "contact_author_email", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "date", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "description", this]);
});

Clazz.newMeth(C$, 'enterDependencies$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "dependencies", this]);
});

Clazz.newMeth(C$, 'enterHardware$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "hardware", this]);
});

Clazz.newMeth(C$, 'enterLanguage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "language", this]);
});

Clazz.newMeth(C$, 'enterLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "location", this]);
});

Clazz.newMeth(C$, 'enterMods$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "mods", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "name", this]);
});

Clazz.newMeth(C$, 'enterOs$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "os", this]);
});

Clazz.newMeth(C$, 'enterOsVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "os_version", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "type", this]);
});

Clazz.newMeth(C$, 'enterVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["software", "version", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["software", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "title", this]);
});

Clazz.newMeth(C$, 'enterPdbxDescriptor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_descriptor", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_model_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct", "pdbx_formula_weight", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeightMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_formula_weight_method", this]);
});

Clazz.newMeth(C$, 'enterPdbxModelTypeDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_model_type_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxCASPFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_CASP_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxTitleText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct", "pdbx_title_text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructAsymBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_asym", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxModified$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_modified", this]);
});

Clazz.newMeth(C$, 'enterPdbxBlankPDBChainidFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_blank_PDB_chainid_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_PDB_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrder$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_asym", "pdbx_order", this]);
});

Clazz.newMeth(C$, 'enterPdbxFractionPerAsymUnit$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_asym", "pdbx_fraction_per_asym_unit", this]);
});

Clazz.newMeth(C$, 'enterPdbxMissingNumBeginOfChainNotInSeqres$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_asym", "pdbx_missing_num_begin_of_chain_not_in_seqres", this]);
});

Clazz.newMeth(C$, 'enterPdbxMissingNumEndOfChainNotInSeqres$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_asym", "pdbx_missing_num_end_of_chain_not_in_seqres", this]);
});

Clazz.newMeth(C$, 'enterPdbxMissingNumBeginOfChainInSeqres$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_asym", "pdbx_missing_num_begin_of_chain_in_seqres", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructBiolBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_biol", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxParentBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "pdbx_parent_biol_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol", "pdbx_formula_weight", this]);
});

Clazz.newMeth(C$, 'enterPdbxFormulaWeightMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "pdbx_formula_weight_method", this]);
});

Clazz.newMeth(C$, 'enterPdbxAggregationState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "pdbx_aggregation_state", this]);
});

Clazz.newMeth(C$, 'enterPdbxAssemblyMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol", "pdbx_assembly_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructBiolGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_biol_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "details", this]);
});

Clazz.newMeth(C$, 'enterSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "symmetry", this]);
});

Clazz.newMeth(C$, 'enterPdbxFullSymmetryOperation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_full_symmetry_operation", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBOrder$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_biol_gen", "pdbx_PDB_order", this]);
});

Clazz.newMeth(C$, 'enterPdbxNewAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_new_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxNewPdbAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_new_pdb_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxColorRed$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_gen", "pdbx_color_red", this]);
});

Clazz.newMeth(C$, 'enterPdbxColorGreen$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_gen", "pdbx_color_green", this]);
});

Clazz.newMeth(C$, 'enterPdbxColorBlue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_gen", "pdbx_color_blue", this]);
});

Clazz.newMeth(C$, 'enterPdbxAfterBeginResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_after_begin_residue_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxAfterEndResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_after_end_residue_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxBeforeBeginResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_before_begin_residue_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxBeforeEndResidueNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_gen", "pdbx_before_end_residue_no", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructBiolKeywordsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_biol_keywords", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_keywords", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_keywords", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructBiolViewBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_biol_view", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_view", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_view", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_biol_view", "id", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "rot_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterPdbxVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "pdbx_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterPdbxVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "pdbx_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterPdbxVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_biol_view", "pdbx_vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructConfBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_conf", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conf", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conf", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterConfTypeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "conf_type_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "details", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conf", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conf", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxBegPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "pdbx_beg_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxEndPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "pdbx_end_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBHelixClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "pdbx_PDB_helix_class", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBHelixLength$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conf", "pdbx_PDB_helix_length", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBHelixId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf", "pdbx_PDB_helix_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructConfTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_conf_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf_type", "criteria", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf_type", "id", this]);
});

Clazz.newMeth(C$, 'enterReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conf_type", "reference", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructConnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_conn", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterConnTypeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "conn_type_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conn", "ptnr1_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conn", "ptnr1_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1Role$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_role", this]);
});

Clazz.newMeth(C$, 'enterPtnr1Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr1_symmetry", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conn", "ptnr2_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conn", "ptnr2_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2Role$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_role", this]);
});

Clazz.newMeth(C$, 'enterPtnr2Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "ptnr2_symmetry", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1StandardCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_standard_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr2PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr2_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr2AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr2_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr2LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr2_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_PDB_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxDistValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_conn", "pdbx_dist_value", this]);
});

Clazz.newMeth(C$, 'enterPdbxValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_value_order", this]);
});

Clazz.newMeth(C$, 'enterPdbxLeavingAtomFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_leaving_atom_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1ModName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_mod_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1SugarName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_sugar_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1ReplacedAtom$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_replaced_atom", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr3AuthInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr3_auth_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1AtomStereoConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_atom_stereo_config", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr1LeavingAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr1_leaving_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr2AtomStereoConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr2_atom_stereo_config", this]);
});

Clazz.newMeth(C$, 'enterPdbxPtnr2LeavingAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_ptnr2_leaving_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRole$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn", "pdbx_role", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructConnTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_conn_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn_type", "criteria", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn_type", "id", this]);
});

Clazz.newMeth(C$, 'enterReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_conn_type", "reference", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructKeywordsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_keywords", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_keywords", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_keywords", "text", this]);
});

Clazz.newMeth(C$, 'enterPdbxKeywords$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_keywords", "pdbx_keywords", this]);
});

Clazz.newMeth(C$, 'enterPdbxDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_keywords", "pdbx_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructMonDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_mon_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_details", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterProtCis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_details", "prot_cis", this]);
});

Clazz.newMeth(C$, 'enterRSCC$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_details", "RSCC", this]);
});

Clazz.newMeth(C$, 'enterRSR$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_details", "RSR", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructMonNuclBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_mon_nucl", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "alpha", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "beta", this]);
});

Clazz.newMeth(C$, 'enterChi1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "chi1", this]);
});

Clazz.newMeth(C$, 'enterChi2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "chi2", this]);
});

Clazz.newMeth(C$, 'enterDelta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "delta", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "details", this]);
});

Clazz.newMeth(C$, 'enterEpsilon$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "epsilon", this]);
});

Clazz.newMeth(C$, 'enterGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "gamma", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_nucl", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_mon_nucl", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterMeanBAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "mean_B_all", this]);
});

Clazz.newMeth(C$, 'enterMeanBBase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "mean_B_base", this]);
});

Clazz.newMeth(C$, 'enterMeanBPhos$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "mean_B_phos", this]);
});

Clazz.newMeth(C$, 'enterMeanBSugar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "mean_B_sugar", this]);
});

Clazz.newMeth(C$, 'enterNu0$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "nu0", this]);
});

Clazz.newMeth(C$, 'enterNu1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "nu1", this]);
});

Clazz.newMeth(C$, 'enterNu2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "nu2", this]);
});

Clazz.newMeth(C$, 'enterNu3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "nu3", this]);
});

Clazz.newMeth(C$, 'enterNu4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "nu4", this]);
});

Clazz.newMeth(C$, 'enterP$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "P", this]);
});

Clazz.newMeth(C$, 'enterRSCCAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSCC_all", this]);
});

Clazz.newMeth(C$, 'enterRSCCBase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSCC_base", this]);
});

Clazz.newMeth(C$, 'enterRSCCPhos$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSCC_phos", this]);
});

Clazz.newMeth(C$, 'enterRSCCSugar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSCC_sugar", this]);
});

Clazz.newMeth(C$, 'enterRSRAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSR_all", this]);
});

Clazz.newMeth(C$, 'enterRSRBase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSR_base", this]);
});

Clazz.newMeth(C$, 'enterRSRPhos$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSR_phos", this]);
});

Clazz.newMeth(C$, 'enterRSRSugar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "RSR_sugar", this]);
});

Clazz.newMeth(C$, 'enterTau0$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "tau0", this]);
});

Clazz.newMeth(C$, 'enterTau1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "tau1", this]);
});

Clazz.newMeth(C$, 'enterTau2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "tau2", this]);
});

Clazz.newMeth(C$, 'enterTau3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "tau3", this]);
});

Clazz.newMeth(C$, 'enterTau4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "tau4", this]);
});

Clazz.newMeth(C$, 'enterTaum$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "taum", this]);
});

Clazz.newMeth(C$, 'enterZeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_nucl", "zeta", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructMonProtBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_mon_prot", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterChi1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "chi1", this]);
});

Clazz.newMeth(C$, 'enterChi2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "chi2", this]);
});

Clazz.newMeth(C$, 'enterChi3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "chi3", this]);
});

Clazz.newMeth(C$, 'enterChi4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "chi4", this]);
});

Clazz.newMeth(C$, 'enterChi5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "chi5", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "details", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_mon_prot", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRSCCAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSCC_all", this]);
});

Clazz.newMeth(C$, 'enterRSCCMain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSCC_main", this]);
});

Clazz.newMeth(C$, 'enterRSCCSide$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSCC_side", this]);
});

Clazz.newMeth(C$, 'enterRSRAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSR_all", this]);
});

Clazz.newMeth(C$, 'enterRSRMain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSR_main", this]);
});

Clazz.newMeth(C$, 'enterRSRSide$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "RSR_side", this]);
});

Clazz.newMeth(C$, 'enterMeanBAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "mean_B_all", this]);
});

Clazz.newMeth(C$, 'enterMeanBMain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "mean_B_main", this]);
});

Clazz.newMeth(C$, 'enterMeanBSide$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "mean_B_side", this]);
});

Clazz.newMeth(C$, 'enterOmega$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "omega", this]);
});

Clazz.newMeth(C$, 'enterPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "phi", this]);
});

Clazz.newMeth(C$, 'enterPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_mon_prot", "psi", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructMonProtCisBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_mon_prot_cis", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_mon_prot_cis", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxOmegaAngle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_omega_angle", this]);
});

Clazz.newMeth(C$, 'enterPdbxId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_auth_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_mon_prot_cis", "pdbx_auth_ins_code_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructNcsDomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ncs_dom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxEnsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom", "pdbx_ens_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructNcsDomLimBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ncs_dom_lim", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBegLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "dom_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSelectionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "selection_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxComponentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ncs_dom_lim", "pdbx_component_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineCode$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_dom_lim", "pdbx_refine_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxEnsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_dom_lim", "pdbx_ens_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructNcsEnsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ncs_ens", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens", "id", this]);
});

Clazz.newMeth(C$, 'enterPointGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens", "point_group", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructNcsEnsGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ncs_ens_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens_gen", "dom_id_1", this]);
});

Clazz.newMeth(C$, 'enterDomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens_gen", "dom_id_2", this]);
});

Clazz.newMeth(C$, 'enterEnsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens_gen", "ens_id", this]);
});

Clazz.newMeth(C$, 'enterOperId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_ens_gen", "oper_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructNcsOperBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ncs_oper", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_oper", "code", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_oper", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ncs_oper", "id", this]);
});

Clazz.newMeth(C$, 'enterMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "vector[1]", this]);
});

Clazz.newMeth(C$, 'enterVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "vector[2]", this]);
});

Clazz.newMeth(C$, 'enterVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_ncs_oper", "vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructRefBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ref", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "id", this]);
});

Clazz.newMeth(C$, 'enterSeqAlign$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "seq_align", this]);
});

Clazz.newMeth(C$, 'enterSeqDif$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "seq_dif", this]);
});

Clazz.newMeth(C$, 'enterPdbxDbAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "pdbx_db_accession", this]);
});

Clazz.newMeth(C$, 'enterPdbxDbIsoform$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "pdbx_db_isoform", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "pdbx_seq_one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxAlignBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "pdbx_align_begin", this]);
});

Clazz.newMeth(C$, 'enterPdbxAlignEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref", "pdbx_align_end", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructRefSeqBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ref_seq", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAlignId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "align_id", this]);
});

Clazz.newMeth(C$, 'enterDbAlignBeg$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq", "db_align_beg", this]);
});

Clazz.newMeth(C$, 'enterDbAlignEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq", "db_align_end", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "details", this]);
});

Clazz.newMeth(C$, 'enterRefId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "ref_id", this]);
});

Clazz.newMeth(C$, 'enterSeqAlignBeg$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq", "seq_align_beg", this]);
});

Clazz.newMeth(C$, 'enterSeqAlignEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq", "seq_align_end", this]);
});

Clazz.newMeth(C$, 'enterPdbxStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_strand_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxDbAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_db_accession", this]);
});

Clazz.newMeth(C$, 'enterPdbxDbAlignBegInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_db_align_beg_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxDbAlignEndInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_db_align_end_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPDBIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_PDB_id_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqAlignBeg$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_auth_seq_align_beg", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqAlignEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_auth_seq_align_end", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqAlignBegInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_seq_align_beg_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqAlignEndInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq", "pdbx_seq_align_end_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructRefSeqDifBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_ref_seq_dif", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAlignId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "align_id", this]);
});

Clazz.newMeth(C$, 'enterDbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "db_mon_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "details", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq_dif", "seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdbIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_pdb_id_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_pdb_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_auth_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_seq_db_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqDbAccessionCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_seq_db_accession_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqDbSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_seq_db_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_ref_seq_dif", "pdbx_ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSheetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_sheet", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet", "id", this]);
});

Clazz.newMeth(C$, 'enterNumberStrands$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet", "number_strands", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSheetHbondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_sheet_hbond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterRange1BegLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_beg_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1BegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange1EndLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_end_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1EndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2BegLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_beg_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2BegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2EndLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_end_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2EndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange1BegAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_beg_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1BegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange1EndAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_end_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1EndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_1_end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2BegAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_beg_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2BegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2EndAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_end_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2EndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_2_end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRangeId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_id_1", this]);
});

Clazz.newMeth(C$, 'enterRangeId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "range_id_2", this]);
});

Clazz.newMeth(C$, 'enterSheetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "sheet_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1BegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1BegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1EndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1EndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1BegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1BegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1BegPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_beg_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1EndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1EndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange1EndPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_1_end_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2BegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2BegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2BegPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_beg_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2EndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2EndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRange2EndLabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_hbond", "pdbx_range_2_end_label_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSheetOrderBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_sheet_order", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOffset$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_order", "offset", this]);
});

Clazz.newMeth(C$, 'enterRangeId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_order", "range_id_1", this]);
});

Clazz.newMeth(C$, 'enterRangeId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_order", "range_id_2", this]);
});

Clazz.newMeth(C$, 'enterSense$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_order", "sense", this]);
});

Clazz.newMeth(C$, 'enterSheetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_order", "sheet_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSheetRangeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_sheet_range", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_range", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_range", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_range", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_range", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "id", this]);
});

Clazz.newMeth(C$, 'enterSheetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "sheet_id", this]);
});

Clazz.newMeth(C$, 'enterSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "symmetry", this]);
});

Clazz.newMeth(C$, 'enterPdbxBegPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "pdbx_beg_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxEndPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_range", "pdbx_end_PDB_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSheetTopologyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_sheet_topology", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOffset$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_sheet_topology", "offset", this]);
});

Clazz.newMeth(C$, 'enterRangeId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_topology", "range_id_1", this]);
});

Clazz.newMeth(C$, 'enterRangeId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_topology", "range_id_2", this]);
});

Clazz.newMeth(C$, 'enterSense$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_topology", "sense", this]);
});

Clazz.newMeth(C$, 'enterSheetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_sheet_topology", "sheet_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumResidues$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_site", "pdbx_num_residues", this]);
});

Clazz.newMeth(C$, 'enterPdbxEvidenceCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "pdbx_evidence_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "pdbx_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "pdbx_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "pdbx_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site", "pdbx_auth_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSiteGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_site_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_site_gen", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSiteId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "site_id", this]);
});

Clazz.newMeth(C$, 'enterSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "symmetry", this]);
});

Clazz.newMeth(C$, 'enterPdbxAuthInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_gen", "pdbx_auth_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPdbxNumRes$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["struct_site_gen", "pdbx_num_res", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSiteKeywordsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_site_keywords", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSiteId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_keywords", "site_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_keywords", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "StructSiteViewBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["struct_site_view", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_view", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_view", "id", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["struct_site_view", "rot_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterSiteId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["struct_site_view", "site_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "SymmetryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["symmetry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCellSetting$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry", "cell_setting", this]);
});

Clazz.newMeth(C$, 'enterIntTablesNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["symmetry", "Int_Tables_number", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupNameHall$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry", "space_group_name_Hall", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupNameH_M$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry", "space_group_name_H-M", this]);
});

Clazz.newMeth(C$, 'enterPdbxFullSpaceGroupNameH_M$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry", "pdbx_full_space_group_name_H-M", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "SymmetryEquivBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["symmetry_equiv", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry_equiv", "id", this]);
});

Clazz.newMeth(C$, 'enterPosAsXyz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["symmetry_equiv", "pos_as_xyz", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "AuditLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["audit_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBlockCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_link", "block_code", this]);
});

Clazz.newMeth(C$, 'enterBlockDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["audit_link", "block_description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "DiffrnReflnsClassBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["diffrn_reflns_class", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAvREq$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns_class", "av_R_eq", this]);
});

Clazz.newMeth(C$, 'enterAvSgI_I$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns_class", "av_sgI/I", this]);
});

Clazz.newMeth(C$, 'enterAvUI_I$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns_class", "av_uI/I", this]);
});

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_reflns_class", "code", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["diffrn_reflns_class", "description", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns_class", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["diffrn_reflns_class", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["diffrn_reflns_class", "number", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "RefineLsClassBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["refine_ls_class", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["refine_ls_class", "code", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterRFactorGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "R_factor_gt", this]);
});

Clazz.newMeth(C$, 'enterRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "R_factor_all", this]);
});

Clazz.newMeth(C$, 'enterRFsqdFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "R_Fsqd_factor", this]);
});

Clazz.newMeth(C$, 'enterRIFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "R_I_factor", this]);
});

Clazz.newMeth(C$, 'enterWRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["refine_ls_class", "wR_factor_all", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ReflnsClassBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["reflns_class", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns_class", "code", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["reflns_class", "description", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterNumberGt$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_class", "number_gt", this]);
});

Clazz.newMeth(C$, 'enterNumberTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["reflns_class", "number_total", this]);
});

Clazz.newMeth(C$, 'enterRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "R_factor_all", this]);
});

Clazz.newMeth(C$, 'enterRFactorGt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "R_factor_gt", this]);
});

Clazz.newMeth(C$, 'enterRFsqdFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "R_Fsqd_factor", this]);
});

Clazz.newMeth(C$, 'enterRIFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "R_I_factor", this]);
});

Clazz.newMeth(C$, 'enterWRFactorAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["reflns_class", "wR_factor_all", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "SpaceGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["space_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalSystem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group", "crystal_system", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group", "id", this]);
});

Clazz.newMeth(C$, 'enterITNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["space_group", "IT_number", this]);
});

Clazz.newMeth(C$, 'enterNameHall$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group", "name_Hall", this]);
});

Clazz.newMeth(C$, 'enterNameH_MAlt$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group", "name_H-M_alt", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "SpaceGroupSymopBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["space_group_symop", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group_symop", "id", this]);
});

Clazz.newMeth(C$, 'enterOperationXyz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group_symop", "operation_xyz", this]);
});

Clazz.newMeth(C$, 'enterSgId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["space_group_symop", "sg_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ValenceParamBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["valence_param", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtom1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_param", "atom_1", this]);
});

Clazz.newMeth(C$, 'enterAtom1Valence$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["valence_param", "atom_1_valence", this]);
});

Clazz.newMeth(C$, 'enterAtom2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_param", "atom_2", this]);
});

Clazz.newMeth(C$, 'enterAtom2Valence$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["valence_param", "atom_2_valence", this]);
});

Clazz.newMeth(C$, 'enterB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["valence_param", "B", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_param", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_param", "id", this]);
});

Clazz.newMeth(C$, 'enterRefId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_param", "ref_id", this]);
});

Clazz.newMeth(C$, 'enterRo$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["valence_param", "Ro", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "ValenceRefBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["valence_ref", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_ref", "id", this]);
});

Clazz.newMeth(C$, 'enterReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["valence_ref", "reference", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCurrentVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit", "current_version", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxVersionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_version", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_version", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterRevisionDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_version", "revision_date", this]);
});

Clazz.newMeth(C$, 'enterMajorVersion$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_version", "major_version", this]);
});

Clazz.newMeth(C$, 'enterMinorVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_version", "minor_version", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_version", "details", this]);
});

Clazz.newMeth(C$, 'enterRevisionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_version", "revision_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_author", "address", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_author", "name", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_author", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseMessageBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_message", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMessageId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "message_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "date", this]);
});

Clazz.newMeth(C$, 'enterContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "content_type", this]);
});

Clazz.newMeth(C$, 'enterMessageType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "message_type", this]);
});

Clazz.newMeth(C$, 'enterSender$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "sender", this]);
});

Clazz.newMeth(C$, 'enterSenderAddressFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "sender_address_fax", this]);
});

Clazz.newMeth(C$, 'enterSenderAddressPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "sender_address_phone", this]);
});

Clazz.newMeth(C$, 'enterSenderAddressEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "sender_address_email", this]);
});

Clazz.newMeth(C$, 'enterSenderAddressMail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "sender_address_mail", this]);
});

Clazz.newMeth(C$, 'enterReceiver$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "receiver", this]);
});

Clazz.newMeth(C$, 'enterReceiverAddressFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "receiver_address_fax", this]);
});

Clazz.newMeth(C$, 'enterReceiverAddressPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "receiver_address_phone", this]);
});

Clazz.newMeth(C$, 'enterReceiverAddressEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "receiver_address_email", this]);
});

Clazz.newMeth(C$, 'enterReceiverAddressMail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "receiver_address_mail", this]);
});

Clazz.newMeth(C$, 'enterMessage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_message", "message", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabasePDBObsSprBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_PDB_obs_spr", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_obs_spr", "id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_obs_spr", "date", this]);
});

Clazz.newMeth(C$, 'enterPdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_obs_spr", "pdb_id", this]);
});

Clazz.newMeth(C$, 'enterReplacePdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_obs_spr", "replace_pdb_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_obs_spr", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseProcBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_proc", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_proc", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCycleId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_proc", "cycle_id", this]);
});

Clazz.newMeth(C$, 'enterDateBeginCycle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_proc", "date_begin_cycle", this]);
});

Clazz.newMeth(C$, 'enterDateEndCycle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_proc", "date_end_cycle", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_proc", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseRemarkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_remark", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_remark", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_remark", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseStatusBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_status", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterStatusCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "status_code", this]);
});

Clazz.newMeth(C$, 'enterAuthorReleaseStatusCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "author_release_status_code", this]);
});

Clazz.newMeth(C$, 'enterStatusCodeSf$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "status_code_sf", this]);
});

Clazz.newMeth(C$, 'enterStatusCodeMr$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "status_code_mr", this]);
});

Clazz.newMeth(C$, 'enterDepReleaseCodeCoordinates$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "dep_release_code_coordinates", this]);
});

Clazz.newMeth(C$, 'enterDepReleaseCodeSequence$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "dep_release_code_sequence", this]);
});

Clazz.newMeth(C$, 'enterDepReleaseCodeStructFact$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "dep_release_code_struct_fact", this]);
});

Clazz.newMeth(C$, 'enterDepReleaseCodeNmrConstraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "dep_release_code_nmr_constraints", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterRecvdDepositForm$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_deposit_form", this]);
});

Clazz.newMeth(C$, 'enterDateDepositionForm$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_deposition_form", this]);
});

Clazz.newMeth(C$, 'enterDateBeginDeposition$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_begin_deposition", this]);
});

Clazz.newMeth(C$, 'enterDateBeginProcessing$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_begin_processing", this]);
});

Clazz.newMeth(C$, 'enterDateEndProcessing$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_end_processing", this]);
});

Clazz.newMeth(C$, 'enterDateBeginReleasePreparation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_begin_release_preparation", this]);
});

Clazz.newMeth(C$, 'enterDateAuthorReleaseRequest$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_author_release_request", this]);
});

Clazz.newMeth(C$, 'enterRecvdCoordinates$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_coordinates", this]);
});

Clazz.newMeth(C$, 'enterDateCoordinates$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_coordinates", this]);
});

Clazz.newMeth(C$, 'enterRecvdStructFact$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_struct_fact", this]);
});

Clazz.newMeth(C$, 'enterDateStructFact$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_struct_fact", this]);
});

Clazz.newMeth(C$, 'enterRecvdNmrConstraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_nmr_constraints", this]);
});

Clazz.newMeth(C$, 'enterDateNmrConstraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_nmr_constraints", this]);
});

Clazz.newMeth(C$, 'enterRecvdInternalApproval$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_internal_approval", this]);
});

Clazz.newMeth(C$, 'enterRecvdManuscript$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_manuscript", this]);
});

Clazz.newMeth(C$, 'enterDateManuscript$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_manuscript", this]);
});

Clazz.newMeth(C$, 'enterNameDepositor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "name_depositor", this]);
});

Clazz.newMeth(C$, 'enterRecvdAuthorApproval$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_author_approval", this]);
});

Clazz.newMeth(C$, 'enterAuthorApprovalType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "author_approval_type", this]);
});

Clazz.newMeth(C$, 'enterDateAuthorApproval$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_author_approval", this]);
});

Clazz.newMeth(C$, 'enterRecvdInitialDepositionDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_initial_deposition_date", this]);
});

Clazz.newMeth(C$, 'enterDateSubmitted$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_submitted", this]);
});

Clazz.newMeth(C$, 'enterRcsbAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "rcsb_annotator", this]);
});

Clazz.newMeth(C$, 'enterDateOfSfRelease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_of_sf_release", this]);
});

Clazz.newMeth(C$, 'enterDateOfMrRelease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_of_mr_release", this]);
});

Clazz.newMeth(C$, 'enterDateOfPDBRelease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_of_PDB_release", this]);
});

Clazz.newMeth(C$, 'enterDateHoldCoordinates$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_hold_coordinates", this]);
});

Clazz.newMeth(C$, 'enterDateHoldStructFact$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_hold_struct_fact", this]);
});

Clazz.newMeth(C$, 'enterDateHoldNmrConstraints$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_hold_nmr_constraints", this]);
});

Clazz.newMeth(C$, 'enterHoldForPublication$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "hold_for_publication", this]);
});

Clazz.newMeth(C$, 'enterSGEntry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "SG_entry", this]);
});

Clazz.newMeth(C$, 'enterPdbDateOfAuthorApproval$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "pdb_date_of_author_approval", this]);
});

Clazz.newMeth(C$, 'enterDepositSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "deposit_site", this]);
});

Clazz.newMeth(C$, 'enterProcessSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "process_site", this]);
});

Clazz.newMeth(C$, 'enterDepReleaseCodeChemicalShifts$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "dep_release_code_chemical_shifts", this]);
});

Clazz.newMeth(C$, 'enterRecvdChemicalShifts$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "recvd_chemical_shifts", this]);
});

Clazz.newMeth(C$, 'enterDateChemicalShifts$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_chemical_shifts", this]);
});

Clazz.newMeth(C$, 'enterDateHoldChemicalShifts$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_hold_chemical_shifts", this]);
});

Clazz.newMeth(C$, 'enterStatusCodeCs$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "status_code_cs", this]);
});

Clazz.newMeth(C$, 'enterDateOfCsRelease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_of_cs_release", this]);
});

Clazz.newMeth(C$, 'enterMethodsDevelopmentCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "methods_development_category", this]);
});

Clazz.newMeth(C$, 'enterPdbFormatCompatible$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "pdb_format_compatible", this]);
});

Clazz.newMeth(C$, 'enterAuthReqRelDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "auth_req_rel_date", this]);
});

Clazz.newMeth(C$, 'enterNdbTid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "ndb_tid", this]);
});

Clazz.newMeth(C$, 'enterStatusCoordinatesInNDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "status_coordinates_in_NDB", this]);
});

Clazz.newMeth(C$, 'enterDateRevised$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_revised", this]);
});

Clazz.newMeth(C$, 'enterReplacedEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "replaced_entry_id", this]);
});

Clazz.newMeth(C$, 'enterRevisionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "revision_id", this]);
});

Clazz.newMeth(C$, 'enterRevisionDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "revision_description", this]);
});

Clazz.newMeth(C$, 'enterPdbxAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "pdbx_annotator", this]);
});

Clazz.newMeth(C$, 'enterDateOfNDBRelease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_of_NDB_release", this]);
});

Clazz.newMeth(C$, 'enterDateReleasedToPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "date_released_to_PDB", this]);
});

Clazz.newMeth(C$, 'enterSkipPDBREMARK500$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "skip_PDB_REMARK_500", this]);
});

Clazz.newMeth(C$, 'enterSkipPDBREMARK$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "skip_PDB_REMARK", this]);
});

Clazz.newMeth(C$, 'enterTitleSuppression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status", "title_suppression", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityNameBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_name", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name", "name", this]);
});

Clazz.newMeth(C$, 'enterNameType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name", "name_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPrereleaseSeqBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_prerelease_seq", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prerelease_seq", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prerelease_seq", "seq_one_letter_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPolySeqSchemeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_poly_seq_scheme", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterHetero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "hetero", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterNdbSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "ndb_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "pdb_seq_num", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "auth_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "pdb_mon_id", this]);
});

Clazz.newMeth(C$, 'enterAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "auth_mon_id", this]);
});

Clazz.newMeth(C$, 'enterPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_poly_seq_scheme", "pdb_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNonpolySchemeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nonpoly_scheme", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterNdbSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "ndb_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "pdb_seq_num", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "auth_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "pdb_mon_id", this]);
});

Clazz.newMeth(C$, 'enterAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "auth_mon_id", this]);
});

Clazz.newMeth(C$, 'enterPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonpoly_scheme", "pdb_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterRFactorAllNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "R_factor_all_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterRFactorObsNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "R_factor_obs_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRFactor4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_factor_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRFactorNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_factor_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRErrorNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_error_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRValTestSetSizePercNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_test_set_size_perc_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRValTestSetCtNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_test_set_ct_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsObsNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "number_reflns_obs_no_cutoff", this]);
});

Clazz.newMeth(C$, 'enterRFactorAll4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "R_factor_all_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterRFactorObs4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "R_factor_obs_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRVal4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRValTestSetSizePerc4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_test_set_size_perc_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRValTestSetCt4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_test_set_ct_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterNumberReflnsObs4sigCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "number_reflns_obs_4sig_cutoff", this]);
});

Clazz.newMeth(C$, 'enterFreeRValNoCutoff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine", "free_R_val_no_cutoff", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructSheetHbondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_sheet_hbond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterRangeId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_id_1", this]);
});

Clazz.newMeth(C$, 'enterRangeId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_id_2", this]);
});

Clazz.newMeth(C$, 'enterSheetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "sheet_id", this]);
});

Clazz.newMeth(C$, 'enterRange1LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange1LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterRange1LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterRange1AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange1AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange1AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterRange1AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterRange1PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_1_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterRange2LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterRange2LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterRange2AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRange2AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRange2AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterRange2AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterRange2PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_sheet_hbond", "range_2_PDB_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxXplorFileBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_xplor_file", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSerialNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_xplor_file", "serial_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_xplor_file", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterParamFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_xplor_file", "param_file", this]);
});

Clazz.newMeth(C$, 'enterTopolFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_xplor_file", "topol_file", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineAuxFileBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine_aux_file", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSerialNo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_aux_file", "serial_no", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_aux_file", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_aux_file", "file_name", this]);
});

Clazz.newMeth(C$, 'enterFileType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_aux_file", "file_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseRelatedBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_related", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_related", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_related", "details", this]);
});

Clazz.newMeth(C$, 'enterDbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_related", "db_id", this]);
});

Clazz.newMeth(C$, 'enterContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_related", "content_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_assembly", "id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_assembly", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_assembly", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterNumCopies$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_assembly", "num_copies", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxExptlCrystalGrowCompBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_exptl_crystal_grow_comp", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterCompName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "comp_name", this]);
});

Clazz.newMeth(C$, 'enterSolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "sol_id", this]);
});

Clazz.newMeth(C$, 'enterConc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "conc", this]);
});

Clazz.newMeth(C$, 'enterConcRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "conc_range", this]);
});

Clazz.newMeth(C$, 'enterConcUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_comp", "conc_units", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxExptlCrystalGrowSolBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_exptl_crystal_grow_sol", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_sol", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterSolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_sol", "sol_id", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_sol", "volume", this]);
});

Clazz.newMeth(C$, 'enterVolumeUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_sol", "volume_units", this]);
});

Clazz.newMeth(C$, 'enterPH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_exptl_crystal_grow_sol", "pH", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxExptlCrystalCryoTreatmentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_exptl_crystal_cryo_treatment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_cryo_treatment", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterFinalSolutionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_cryo_treatment", "final_solution_details", this]);
});

Clazz.newMeth(C$, 'enterSoakingDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_cryo_treatment", "soaking_details", this]);
});

Clazz.newMeth(C$, 'enterCoolingDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_cryo_treatment", "cooling_details", this]);
});

Clazz.newMeth(C$, 'enterAnnealingDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_crystal_cryo_treatment", "annealing_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineTlsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine_tls", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls", "details", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls", "method", this]);
});

Clazz.newMeth(C$, 'enterOriginX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "origin_x", this]);
});

Clazz.newMeth(C$, 'enterOriginY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "origin_y", this]);
});

Clazz.newMeth(C$, 'enterOriginZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "origin_z", this]);
});

Clazz.newMeth(C$, 'enterT11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][1]", this]);
});

Clazz.newMeth(C$, 'enterT11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterT12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][2]", this]);
});

Clazz.newMeth(C$, 'enterT12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterT13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][3]", this]);
});

Clazz.newMeth(C$, 'enterT13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterT22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[2][2]", this]);
});

Clazz.newMeth(C$, 'enterT22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterT23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[2][3]", this]);
});

Clazz.newMeth(C$, 'enterT23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterT33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[3][3]", this]);
});

Clazz.newMeth(C$, 'enterT33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "T[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterL11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][1]", this]);
});

Clazz.newMeth(C$, 'enterL11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterL12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][2]", this]);
});

Clazz.newMeth(C$, 'enterL12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterL13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][3]", this]);
});

Clazz.newMeth(C$, 'enterL13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterL22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[2][2]", this]);
});

Clazz.newMeth(C$, 'enterL22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterL23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[2][3]", this]);
});

Clazz.newMeth(C$, 'enterL23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterL33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[3][3]", this]);
});

Clazz.newMeth(C$, 'enterL33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "L[3][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterS11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][1]", this]);
});

Clazz.newMeth(C$, 'enterS11Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterS12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][2]", this]);
});

Clazz.newMeth(C$, 'enterS12Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterS13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][3]", this]);
});

Clazz.newMeth(C$, 'enterS13Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[1][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterS21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][1]", this]);
});

Clazz.newMeth(C$, 'enterS21Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterS22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][2]", this]);
});

Clazz.newMeth(C$, 'enterS22Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterS23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][3]", this]);
});

Clazz.newMeth(C$, 'enterS23Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[2][3]_esd", this]);
});

Clazz.newMeth(C$, 'enterS31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][1]", this]);
});

Clazz.newMeth(C$, 'enterS31Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][1]_esd", this]);
});

Clazz.newMeth(C$, 'enterS32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][2]", this]);
});

Clazz.newMeth(C$, 'enterS32Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][2]_esd", this]);
});

Clazz.newMeth(C$, 'enterS33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][3]", this]);
});

Clazz.newMeth(C$, 'enterS33Esd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_tls", "S[3][3]_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineTlsGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine_tls_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "id", this]);
});

Clazz.newMeth(C$, 'enterPdbxRefineId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "pdbx_refine_id", this]);
});

Clazz.newMeth(C$, 'enterRefineTlsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "refine_tls_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_refine_tls_group", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_refine_tls_group", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSelection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "selection", this]);
});

Clazz.newMeth(C$, 'enterSelectionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_tls_group", "selection_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxContactAuthorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_contact_author", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "id", this]);
});

Clazz.newMeth(C$, 'enterAddress1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "address_1", this]);
});

Clazz.newMeth(C$, 'enterAddress2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "address_2", this]);
});

Clazz.newMeth(C$, 'enterAddress3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "address_3", this]);
});

Clazz.newMeth(C$, 'enterLegacyAddress$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "legacy_address", this]);
});

Clazz.newMeth(C$, 'enterCity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "city", this]);
});

Clazz.newMeth(C$, 'enterStateProvince$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "state_province", this]);
});

Clazz.newMeth(C$, 'enterPostalCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "postal_code", this]);
});

Clazz.newMeth(C$, 'enterEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "email", this]);
});

Clazz.newMeth(C$, 'enterFax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "fax", this]);
});

Clazz.newMeth(C$, 'enterNameFirst$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "name_first", this]);
});

Clazz.newMeth(C$, 'enterNameLast$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "name_last", this]);
});

Clazz.newMeth(C$, 'enterNameMi$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "name_mi", this]);
});

Clazz.newMeth(C$, 'enterNameSalutation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "name_salutation", this]);
});

Clazz.newMeth(C$, 'enterCountry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "country", this]);
});

Clazz.newMeth(C$, 'enterContinent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "continent", this]);
});

Clazz.newMeth(C$, 'enterPhone$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "phone", this]);
});

Clazz.newMeth(C$, 'enterRole$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "role", this]);
});

Clazz.newMeth(C$, 'enterOrganizationType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "organization_type", this]);
});

Clazz.newMeth(C$, 'enterIdentifierORCID$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_contact_author", "identifier_ORCID", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSGProjectBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_SG_project", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_SG_project", "id", this]);
});

Clazz.newMeth(C$, 'enterProjectName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_SG_project", "project_name", this]);
});

Clazz.newMeth(C$, 'enterFullNameOfCenter$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_SG_project", "full_name_of_center", this]);
});

Clazz.newMeth(C$, 'enterInitialOfCenter$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_SG_project", "initial_of_center", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAtomSiteAnisoTlsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_atom_site_aniso_tls", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "id", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterTlsGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "tls_group_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterUTls11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[1][1]", this]);
});

Clazz.newMeth(C$, 'enterUTls22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[2][2]", this]);
});

Clazz.newMeth(C$, 'enterUTls33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[3][3]", this]);
});

Clazz.newMeth(C$, 'enterUTls12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[1][2]", this]);
});

Clazz.newMeth(C$, 'enterUTls13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[1][3]", this]);
});

Clazz.newMeth(C$, 'enterUTls23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_atom_site_aniso_tls", "U_tls[2][3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_details", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_details", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSampleDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_sample_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSolutionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "solution_id", this]);
});

Clazz.newMeth(C$, 'enterContents$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "contents", this]);
});

Clazz.newMeth(C$, 'enterSolventSystem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "solvent_system", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "label", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_sample_details", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrExptlSampleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_exptl_sample", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSolutionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "solution_id", this]);
});

Clazz.newMeth(C$, 'enterComponent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "component", this]);
});

Clazz.newMeth(C$, 'enterConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "concentration", this]);
});

Clazz.newMeth(C$, 'enterConcentrationRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "concentration_range", this]);
});

Clazz.newMeth(C$, 'enterConcentrationUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "concentration_units", this]);
});

Clazz.newMeth(C$, 'enterIsotopicLabeling$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "isotopic_labeling", this]);
});

Clazz.newMeth(C$, 'enterConcentrationErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample", "concentration_err", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrExptlSampleConditionsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_exptl_sample_conditions", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterConditionsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "conditions_id", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "temperature", this]);
});

Clazz.newMeth(C$, 'enterPressureUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pressure_units", this]);
});

Clazz.newMeth(C$, 'enterPressure$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pressure", this]);
});

Clazz.newMeth(C$, 'enterPH$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pH", this]);
});

Clazz.newMeth(C$, 'enterIonicStrength$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "ionic_strength", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "details", this]);
});

Clazz.newMeth(C$, 'enterIonicStrengthErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "ionic_strength_err", this]);
});

Clazz.newMeth(C$, 'enterIonicStrengthUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "ionic_strength_units", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "label", this]);
});

Clazz.newMeth(C$, 'enterPHErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pH_err", this]);
});

Clazz.newMeth(C$, 'enterPHUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pH_units", this]);
});

Clazz.newMeth(C$, 'enterPressureErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "pressure_err", this]);
});

Clazz.newMeth(C$, 'enterTemperatureErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "temperature_err", this]);
});

Clazz.newMeth(C$, 'enterTemperatureUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl_sample_conditions", "temperature_units", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSpectrometerBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_spectrometer", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSpectrometerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "spectrometer_id", this]);
});

Clazz.newMeth(C$, 'enterModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "model", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "type", this]);
});

Clazz.newMeth(C$, 'enterManufacturer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "manufacturer", this]);
});

Clazz.newMeth(C$, 'enterFieldStrength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "field_strength", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "details", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectrometer", "name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrExptlBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_exptl", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterConditionsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl", "conditions_id", this]);
});

Clazz.newMeth(C$, 'enterSolutionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl", "solution_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl", "type", this]);
});

Clazz.newMeth(C$, 'enterSpectrometerId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_exptl", "spectrometer_id", this]);
});

Clazz.newMeth(C$, 'enterSampleState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_exptl", "sample_state", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSoftwareBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_software", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_software", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterClassification$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software", "classification", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software", "name", this]);
});

Clazz.newMeth(C$, 'enterVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software", "version", this]);
});

Clazz.newMeth(C$, 'enterAuthors$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software", "authors", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrConstraintsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_constraints", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraints", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNOEConstraintsTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_constraints_total", this]);
});

Clazz.newMeth(C$, 'enterNOEIntraresidueTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_intraresidue_total_count", this]);
});

Clazz.newMeth(C$, 'enterNOEInterentityTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_interentity_total_count", this]);
});

Clazz.newMeth(C$, 'enterNOESequentialTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_sequential_total_count", this]);
});

Clazz.newMeth(C$, 'enterNOEMediumRangeTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_medium_range_total_count", this]);
});

Clazz.newMeth(C$, 'enterNOELongRangeTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_long_range_total_count", this]);
});

Clazz.newMeth(C$, 'enterProteinPhiAngleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "protein_phi_angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterProteinPsiAngleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "protein_psi_angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterProteinChiAngleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "protein_chi_angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterProteinOtherAngleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "protein_other_angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNOEInterprotonDistanceEvaluation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_interproton_distance_evaluation", this]);
});

Clazz.newMeth(C$, 'enterNOEPseudoatomCorrections$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_pseudoatom_corrections", this]);
});

Clazz.newMeth(C$, 'enterNOEMotionalAveragingCorrection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraints", "NOE_motional_averaging_correction", this]);
});

Clazz.newMeth(C$, 'enterHydrogenBondConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "hydrogen_bond_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterDisulfideBondConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "disulfide_bond_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNAAlpha_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_alpha-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNABeta_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_beta-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNAGamma_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_gamma-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNADelta_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_delta-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNAEpsilon_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_epsilon-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNAChi_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_chi-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNAOther_angleConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_other-angle_constraints_total_count", this]);
});

Clazz.newMeth(C$, 'enterNASugarPuckerConstraintsTotalCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraints", "NA_sugar_pucker_constraints_total_count", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrEnsembleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_ensemble", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterConformersCalculatedTotalNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble", "conformers_calculated_total_number", this]);
});

Clazz.newMeth(C$, 'enterConformersSubmittedTotalNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble", "conformers_submitted_total_number", this]);
});

Clazz.newMeth(C$, 'enterConformerSelectionCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble", "conformer_selection_criteria", this]);
});

Clazz.newMeth(C$, 'enterRepresentativeConformer$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble", "representative_conformer", this]);
});

Clazz.newMeth(C$, 'enterAverageConstraintsPerResidue$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble", "average_constraints_per_residue", this]);
});

Clazz.newMeth(C$, 'enterAverageConstraintViolationsPerResidue$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble", "average_constraint_violations_per_residue", this]);
});

Clazz.newMeth(C$, 'enterMaximumDistanceConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "maximum_distance_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterAverageDistanceConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "average_distance_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterMaximumUpperDistanceConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "maximum_upper_distance_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterMaximumLowerDistanceConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "maximum_lower_distance_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterDistanceConstraintViolationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble", "distance_constraint_violation_method", this]);
});

Clazz.newMeth(C$, 'enterMaximumTorsionAngleConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "maximum_torsion_angle_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterAverageTorsionAngleConstraintViolation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble", "average_torsion_angle_constraint_violation", this]);
});

Clazz.newMeth(C$, 'enterTorsionAngleConstraintViolationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble", "torsion_angle_constraint_violation_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrEnsembleRmsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_ensemble_rms", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterResidueRangeBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "residue_range_begin", this]);
});

Clazz.newMeth(C$, 'enterChainRangeBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "chain_range_begin", this]);
});

Clazz.newMeth(C$, 'enterResidueRangeEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "residue_range_end", this]);
});

Clazz.newMeth(C$, 'enterChainRangeEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "chain_range_end", this]);
});

Clazz.newMeth(C$, 'enterAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "atom_type", this]);
});

Clazz.newMeth(C$, 'enterDistanceRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "distance_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterDistanceRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "distance_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterCovalentBondRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "covalent_bond_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterCovalentBondRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "covalent_bond_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterBondAngleRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "bond_angle_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterBondAngleRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "bond_angle_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterImproperTorsionAngleRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "improper_torsion_angle_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterImproperTorsionAngleRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "improper_torsion_angle_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterPeptidePlanarityRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "peptide_planarity_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterPeptidePlanarityRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "peptide_planarity_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterDihedralAnglesRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "dihedral_angles_rms_dev", this]);
});

Clazz.newMeth(C$, 'enterDihedralAnglesRmsDevError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "dihedral_angles_rms_dev_error", this]);
});

Clazz.newMeth(C$, 'enterCoordAverageRmsdMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_ensemble_rms", "coord_average_rmsd_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrRepresentativeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_representative", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_representative", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterConformerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_representative", "conformer_id", this]);
});

Clazz.newMeth(C$, 'enterSelectionCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_representative", "selection_criteria", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrRefineBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_refine", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_refine", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_refine", "method", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_refine", "details", this]);
});

Clazz.newMeth(C$, 'enterSoftwareOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_refine", "software_ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrForceConstantsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_force_constants", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterExptlDistanceTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_distance_term", this]);
});

Clazz.newMeth(C$, 'enterExptlDistanceTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_distance_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptlTorsionAnglesTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_torsion_angles_term", this]);
});

Clazz.newMeth(C$, 'enterExptlTorsionAnglesTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_torsion_angles_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptlJCouplingTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_J_coupling_term", this]);
});

Clazz.newMeth(C$, 'enterExptlJCouplingTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_J_coupling_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptl13CShiftTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_13C_shift_term", this]);
});

Clazz.newMeth(C$, 'enterExptl13CShiftTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_13C_shift_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptl1HShiftTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_1H_shift_term", this]);
});

Clazz.newMeth(C$, 'enterExptl1HShiftTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_1H_shift_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptlDipolarCouplingTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_dipolar_coupling_term", this]);
});

Clazz.newMeth(C$, 'enterExptlDipolarCouplingTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_dipolar_coupling_term_units", this]);
});

Clazz.newMeth(C$, 'enterExptlDIsotopeShiftTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_D_isotope_shift_term", this]);
});

Clazz.newMeth(C$, 'enterExptlDIsotopeShiftTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "exptl_D_isotope_shift_term_units", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomBondTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_bond_term", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomBondTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_bond_term_units", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomAnglesTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_angles_term", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomAnglesTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_angles_term_units", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomImpropersTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_impropers_term", this]);
});

Clazz.newMeth(C$, 'enterCovalentGeomImpropersTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "covalent_geom_impropers_term_units", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterVanDerWaalsTermType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_van_der_Waals_term_type", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterVanDerWaalsTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_van_der_Waals_term", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterVanDerWaalsTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_van_der_Waals_term_units", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterConfDbPotentialTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_conf_db_potential_term", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterRadiusOfGyrationTerm$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_radius_of_gyration_term", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedInterRadiusOfGyrationTermUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_force_constants", "non-bonded_inter_radius_of_gyration_term_units", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "NdbStructConfNaBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ndb_struct_conf_na", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_conf_na", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_conf_na", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_conf_na", "feature_count", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "NdbStructFeatureNaBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ndb_struct_feature_na", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_feature_na", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_feature_na", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_feature_na", "feature_count", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "NdbStructNaBasePairBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ndb_struct_na_base_pair", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "model_number", this]);
});

Clazz.newMeth(C$, 'enterPairNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "pair_number", this]);
});

Clazz.newMeth(C$, 'enterPairName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "pair_name", this]);
});

Clazz.newMeth(C$, 'enterILabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterILabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterILabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterISymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_symmetry", this]);
});

Clazz.newMeth(C$, 'enterJLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterJLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterJLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterJSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_symmetry", this]);
});

Clazz.newMeth(C$, 'enterIAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterIAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterIPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "i_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterJAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterJAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterJPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair", "j_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterShear$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "shear", this]);
});

Clazz.newMeth(C$, 'enterStretch$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "stretch", this]);
});

Clazz.newMeth(C$, 'enterStagger$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "stagger", this]);
});

Clazz.newMeth(C$, 'enterBuckle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "buckle", this]);
});

Clazz.newMeth(C$, 'enterPropeller$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "propeller", this]);
});

Clazz.newMeth(C$, 'enterOpening$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair", "opening", this]);
});

Clazz.newMeth(C$, 'enterHbondType12$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "hbond_type_12", this]);
});

Clazz.newMeth(C$, 'enterHbondType28$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair", "hbond_type_28", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "NdbStructNaBasePairStepBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ndb_struct_na_base_pair_step", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "model_number", this]);
});

Clazz.newMeth(C$, 'enterStepNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "step_number", this]);
});

Clazz.newMeth(C$, 'enterStepName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "step_name", this]);
});

Clazz.newMeth(C$, 'enterILabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterILabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterILabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterISymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterJLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterJLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterJLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterJSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterILabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterILabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterILabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterISymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterJLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterJLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterJLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterJSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterIAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterIAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterIPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterJAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterJAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterJPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterIAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterIAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterIPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "i_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterJAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterJAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterJPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "j_PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterShift$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "shift", this]);
});

Clazz.newMeth(C$, 'enterSlide$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "slide", this]);
});

Clazz.newMeth(C$, 'enterRise$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "rise", this]);
});

Clazz.newMeth(C$, 'enterTilt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "tilt", this]);
});

Clazz.newMeth(C$, 'enterRoll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "roll", this]);
});

Clazz.newMeth(C$, 'enterTwist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "twist", this]);
});

Clazz.newMeth(C$, 'enterXDisplacement$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "x_displacement", this]);
});

Clazz.newMeth(C$, 'enterYDisplacement$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "y_displacement", this]);
});

Clazz.newMeth(C$, 'enterHelicalRise$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "helical_rise", this]);
});

Clazz.newMeth(C$, 'enterInclination$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "inclination", this]);
});

Clazz.newMeth(C$, 'enterTip$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "tip", this]);
});

Clazz.newMeth(C$, 'enterHelicalTwist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ndb_struct_na_base_pair_step", "helical_twist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "NdbOriginalNdbCoordinatesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ndb_original_ndb_coordinates", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCoordSection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ndb_original_ndb_coordinates", "coord_section", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityNonpolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_nonpoly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_nonpoly", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_nonpoly", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_nonpoly", "name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingDmBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_dm", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_dm", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_dm", "method", this]);
});

Clazz.newMeth(C$, 'enterMaskType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_dm", "mask_type", this]);
});

Clazz.newMeth(C$, 'enterFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm", "fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm", "fom_centric", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm", "fom", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm", "reflns", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhiInitial$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm", "delta_phi_initial", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhiFinal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm", "delta_phi_final", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingDmShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_dm_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "fom_centric", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "fom", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "reflns", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhiInitial$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "delta_phi_initial", this]);
});

Clazz.newMeth(C$, 'enterDeltaPhiFinal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_dm_shell", "delta_phi_final", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingMADShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_MAD_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "reflns", this]);
});

Clazz.newMeth(C$, 'enterFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "fom_centric", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "fom", this]);
});

Clazz.newMeth(C$, 'enterRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_cullis", this]);
});

Clazz.newMeth(C$, 'enterRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "R_kraut", this]);
});

Clazz.newMeth(C$, 'enterLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "loc_centric", this]);
});

Clazz.newMeth(C$, 'enterLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "loc", this]);
});

Clazz.newMeth(C$, 'enterPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "power_centric", this]);
});

Clazz.newMeth(C$, 'enterPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_shell", "power", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingMADSetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_MAD_set", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "id", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterNumberOfSites$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "number_of_sites", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "reflns", this]);
});

Clazz.newMeth(C$, 'enterFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "fom_centric", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "fom", this]);
});

Clazz.newMeth(C$, 'enterRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_cullis", this]);
});

Clazz.newMeth(C$, 'enterRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "R_kraut", this]);
});

Clazz.newMeth(C$, 'enterLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "loc_centric", this]);
});

Clazz.newMeth(C$, 'enterLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "loc", this]);
});

Clazz.newMeth(C$, 'enterPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "power_centric", this]);
});

Clazz.newMeth(C$, 'enterPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set", "power", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingMADSetShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_MAD_set_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "id", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterReflnsAcentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "reflns_acentric", this]);
});

Clazz.newMeth(C$, 'enterReflnsCentric$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "reflns_centric", this]);
});

Clazz.newMeth(C$, 'enterReflns$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "reflns", this]);
});

Clazz.newMeth(C$, 'enterFomAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "fom_acentric", this]);
});

Clazz.newMeth(C$, 'enterFomCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "fom_centric", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "fom", this]);
});

Clazz.newMeth(C$, 'enterRCullisCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_cullis_centric", this]);
});

Clazz.newMeth(C$, 'enterRCullisAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_cullis_acentric", this]);
});

Clazz.newMeth(C$, 'enterRCullis$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_cullis", this]);
});

Clazz.newMeth(C$, 'enterRKrautCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_kraut_centric", this]);
});

Clazz.newMeth(C$, 'enterRKrautAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_kraut_acentric", this]);
});

Clazz.newMeth(C$, 'enterRKraut$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "R_kraut", this]);
});

Clazz.newMeth(C$, 'enterLocCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "loc_centric", this]);
});

Clazz.newMeth(C$, 'enterLocAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "loc_acentric", this]);
});

Clazz.newMeth(C$, 'enterLoc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "loc", this]);
});

Clazz.newMeth(C$, 'enterPowerCentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "power_centric", this]);
});

Clazz.newMeth(C$, 'enterPowerAcentric$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "power_acentric", this]);
});

Clazz.newMeth(C$, 'enterPower$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_shell", "power", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingMADSetSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_MAD_set_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "id", this]);
});

Clazz.newMeth(C$, 'enterAtomTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "atom_type_symbol", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterCartnXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_x_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_y_esd", this]);
});

Clazz.newMeth(C$, 'enterCartnZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "Cartn_z_esd", this]);
});

Clazz.newMeth(C$, 'enterFractX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_x", this]);
});

Clazz.newMeth(C$, 'enterFractY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_y", this]);
});

Clazz.newMeth(C$, 'enterFractZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_z", this]);
});

Clazz.newMeth(C$, 'enterFractXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_x_esd", this]);
});

Clazz.newMeth(C$, 'enterFractYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_y_esd", this]);
});

Clazz.newMeth(C$, 'enterFractZEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "fract_z_esd", this]);
});

Clazz.newMeth(C$, 'enterBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "b_iso", this]);
});

Clazz.newMeth(C$, 'enterBIsoEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "b_iso_esd", this]);
});

Clazz.newMeth(C$, 'enterOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "occupancy", this]);
});

Clazz.newMeth(C$, 'enterOccupancyEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "occupancy_esd", this]);
});

Clazz.newMeth(C$, 'enterSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "set_id", this]);
});

Clazz.newMeth(C$, 'enterOccupancyIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MAD_set_site", "occupancy_iso", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPhasingMRBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_phasing_MR", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MR", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethodRotation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MR", "method_rotation", this]);
});

Clazz.newMeth(C$, 'enterDResHighRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_high_rotation", this]);
});

Clazz.newMeth(C$, 'enterDResLowRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_low_rotation", this]);
});

Clazz.newMeth(C$, 'enterSigmaFRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "sigma_F_rotation", this]);
});

Clazz.newMeth(C$, 'enterSigmaIRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "sigma_I_rotation", this]);
});

Clazz.newMeth(C$, 'enterReflnsPercentRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "reflns_percent_rotation", this]);
});

Clazz.newMeth(C$, 'enterMethodTranslation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MR", "method_translation", this]);
});

Clazz.newMeth(C$, 'enterDResHighTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_high_translation", this]);
});

Clazz.newMeth(C$, 'enterDResLowTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_low_translation", this]);
});

Clazz.newMeth(C$, 'enterSigmaFTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "sigma_F_translation", this]);
});

Clazz.newMeth(C$, 'enterSigmaITranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "sigma_I_translation", this]);
});

Clazz.newMeth(C$, 'enterReflnsPercentTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "reflns_percent_translation", this]);
});

Clazz.newMeth(C$, 'enterCorrelationCoeffIoToIc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "correlation_coeff_Io_to_Ic", this]);
});

Clazz.newMeth(C$, 'enterCorrelationCoeffFoToFc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "correlation_coeff_Fo_to_Fc", this]);
});

Clazz.newMeth(C$, 'enterRFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "R_factor", this]);
});

Clazz.newMeth(C$, 'enterRRigidBody$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "R_rigid_body", this]);
});

Clazz.newMeth(C$, 'enterPacking$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "packing", this]);
});

Clazz.newMeth(C$, 'enterModelDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MR", "model_details", this]);
});

Clazz.newMeth(C$, 'enterNativeSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_phasing_MR", "native_set_id", this]);
});

Clazz.newMeth(C$, 'enterDResHighFit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_high_fit", this]);
});

Clazz.newMeth(C$, 'enterDResLowFit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "d_res_low_fit", this]);
});

Clazz.newMeth(C$, 'enterZscoreRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "zscore_rotation", this]);
});

Clazz.newMeth(C$, 'enterLLGainRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "LL_gain_rotation", this]);
});

Clazz.newMeth(C$, 'enterZscoreTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "zscore_translation", this]);
});

Clazz.newMeth(C$, 'enterLLGainTranslation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_phasing_MR", "LL_gain_translation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineComponentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine_component", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_refine_component", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_component", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterBIso$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "B_iso", this]);
});

Clazz.newMeth(C$, 'enterBIsoMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "B_iso_main_chain", this]);
});

Clazz.newMeth(C$, 'enterBIsoSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "B_iso_side_chain", this]);
});

Clazz.newMeth(C$, 'enterShift$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "shift", this]);
});

Clazz.newMeth(C$, 'enterShiftSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "shift_side_chain", this]);
});

Clazz.newMeth(C$, 'enterShiftMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "shift_main_chain", this]);
});

Clazz.newMeth(C$, 'enterCorrelation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "correlation", this]);
});

Clazz.newMeth(C$, 'enterCorrelationSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "correlation_side_chain", this]);
});

Clazz.newMeth(C$, 'enterCorrelationMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "correlation_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "real_space_R", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceRSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "real_space_R_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceRMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "real_space_R_main_chain", this]);
});

Clazz.newMeth(C$, 'enterConnect$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "connect", this]);
});

Clazz.newMeth(C$, 'enterDensityIndex$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_index", this]);
});

Clazz.newMeth(C$, 'enterDensityIndexMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_index_main_chain", this]);
});

Clazz.newMeth(C$, 'enterDensityIndexSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_index_side_chain", this]);
});

Clazz.newMeth(C$, 'enterDensityRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_ratio", this]);
});

Clazz.newMeth(C$, 'enterDensityRatioMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_ratio_main_chain", this]);
});

Clazz.newMeth(C$, 'enterDensityRatioSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_component", "density_ratio_side_chain", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityProdProtocolBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_prod_protocol", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_prod_protocol", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_prod_protocol", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterProtocol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_prod_protocol", "protocol", this]);
});

Clazz.newMeth(C$, 'enterProtocolType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_prod_protocol", "protocol_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenProdOtherBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_prod_other", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "date", this]);
});

Clazz.newMeth(C$, 'enterProcessName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "process_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenProdOtherParameterBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_prod_other_parameter", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "step_id", this]);
});

Clazz.newMeth(C$, 'enterParameter$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "parameter", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_other_parameter", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenProdPcrBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_prod_pcr", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "date", this]);
});

Clazz.newMeth(C$, 'enterForwardPrimerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "forward_primer_id", this]);
});

Clazz.newMeth(C$, 'enterReversePrimerId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "reverse_primer_id", this]);
});

Clazz.newMeth(C$, 'enterReactionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "reaction_details", this]);
});

Clazz.newMeth(C$, 'enterPurificationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "purification_details", this]);
});

Clazz.newMeth(C$, 'enterSummary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_pcr", "summary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenProdDigestBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_prod_digest", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "date", this]);
});

Clazz.newMeth(C$, 'enterRestrictionEnzyme1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "restriction_enzyme_1", this]);
});

Clazz.newMeth(C$, 'enterRestrictionEnzyme2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "restriction_enzyme_2", this]);
});

Clazz.newMeth(C$, 'enterPurificationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "purification_details", this]);
});

Clazz.newMeth(C$, 'enterSummary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_prod_digest", "summary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenCloneBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_clone", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "date", this]);
});

Clazz.newMeth(C$, 'enterGeneInsertMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "gene_insert_method", this]);
});

Clazz.newMeth(C$, 'enterVectorName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "vector_name", this]);
});

Clazz.newMeth(C$, 'enterVectorDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "vector_details", this]);
});

Clazz.newMeth(C$, 'enterTransformationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "transformation_method", this]);
});

Clazz.newMeth(C$, 'enterMarker$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "marker", this]);
});

Clazz.newMeth(C$, 'enterVerificationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "verification_method", this]);
});

Clazz.newMeth(C$, 'enterPurificationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "purification_details", this]);
});

Clazz.newMeth(C$, 'enterSummary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone", "summary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenCloneLigationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_clone_ligation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "step_id", this]);
});

Clazz.newMeth(C$, 'enterCleavageEnzymes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "cleavage_enzymes", this]);
});

Clazz.newMeth(C$, 'enterLigationEnzymes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "ligation_enzymes", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "temperature", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "time", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_ligation", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenCloneRecombinationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_clone_recombination", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "step_id", this]);
});

Clazz.newMeth(C$, 'enterSystem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "system", this]);
});

Clazz.newMeth(C$, 'enterRecombinationEnzymes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "recombination_enzymes", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_clone_recombination", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenExpressBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_express", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "date", this]);
});

Clazz.newMeth(C$, 'enterPromoterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "promoter_type", this]);
});

Clazz.newMeth(C$, 'enterPlasmidId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "plasmid_id", this]);
});

Clazz.newMeth(C$, 'enterVectorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "vector_type", this]);
});

Clazz.newMeth(C$, 'enterNTerminalSeqTag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "N_terminal_seq_tag", this]);
});

Clazz.newMeth(C$, 'enterCTerminalSeqTag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "C_terminal_seq_tag", this]);
});

Clazz.newMeth(C$, 'enterHostOrgScientificName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_scientific_name", this]);
});

Clazz.newMeth(C$, 'enterHostOrgCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_common_name", this]);
});

Clazz.newMeth(C$, 'enterHostOrgVariant$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_variant", this]);
});

Clazz.newMeth(C$, 'enterHostOrgStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_strain", this]);
});

Clazz.newMeth(C$, 'enterHostOrgTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_tissue", this]);
});

Clazz.newMeth(C$, 'enterHostOrgCultureCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_culture_collection", this]);
});

Clazz.newMeth(C$, 'enterHostOrgCellLine$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_cell_line", this]);
});

Clazz.newMeth(C$, 'enterHostOrgTaxId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_tax_id", this]);
});

Clazz.newMeth(C$, 'enterHostOrgDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "host_org_details", this]);
});

Clazz.newMeth(C$, 'enterCultureBaseMedia$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "culture_base_media", this]);
});

Clazz.newMeth(C$, 'enterCultureAdditives$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "culture_additives", this]);
});

Clazz.newMeth(C$, 'enterCultureVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "culture_volume", this]);
});

Clazz.newMeth(C$, 'enterCultureTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "culture_time", this]);
});

Clazz.newMeth(C$, 'enterCultureTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "culture_temperature", this]);
});

Clazz.newMeth(C$, 'enterInducer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "inducer", this]);
});

Clazz.newMeth(C$, 'enterInducerConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "inducer_concentration", this]);
});

Clazz.newMeth(C$, 'enterInductionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "induction_details", this]);
});

Clazz.newMeth(C$, 'enterMultiplicityOfInfection$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "multiplicity_of_infection", this]);
});

Clazz.newMeth(C$, 'enterInductionTimepoint$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "induction_timepoint", this]);
});

Clazz.newMeth(C$, 'enterInductionTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "induction_temperature", this]);
});

Clazz.newMeth(C$, 'enterHarvestingDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "harvesting_details", this]);
});

Clazz.newMeth(C$, 'enterStorageDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "storage_details", this]);
});

Clazz.newMeth(C$, 'enterSummary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express", "summary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenExpressTimepointBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_express_timepoint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "step_id", this]);
});

Clazz.newMeth(C$, 'enterSerial$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "serial", this]);
});

Clazz.newMeth(C$, 'enterOD$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "OD", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_express_timepoint", "time", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenLysisBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_lysis", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "date", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "method", this]);
});

Clazz.newMeth(C$, 'enterBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "buffer_id", this]);
});

Clazz.newMeth(C$, 'enterBufferVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "buffer_volume", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "temperature", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "time", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_lysis", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenRefoldBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_refold", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "date", this]);
});

Clazz.newMeth(C$, 'enterDenatureBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "denature_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterRefoldBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "refold_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "temperature", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "time", this]);
});

Clazz.newMeth(C$, 'enterStorageBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "storage_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_refold", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenProteolysisBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_proteolysis", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "date", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "details", this]);
});

Clazz.newMeth(C$, 'enterProtease$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "protease", this]);
});

Clazz.newMeth(C$, 'enterProteinProteaseRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "protein_protease_ratio", this]);
});

Clazz.newMeth(C$, 'enterCleavageBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "cleavage_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterCleavageTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "cleavage_temperature", this]);
});

Clazz.newMeth(C$, 'enterCleavageTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_proteolysis", "cleavage_time", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenChromBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_chrom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "date", this]);
});

Clazz.newMeth(C$, 'enterColumnType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "column_type", this]);
});

Clazz.newMeth(C$, 'enterColumnVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "column_volume", this]);
});

Clazz.newMeth(C$, 'enterColumnTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "column_temperature", this]);
});

Clazz.newMeth(C$, 'enterEquilibrationBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "equilibration_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterFlowRate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "flow_rate", this]);
});

Clazz.newMeth(C$, 'enterElutionBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "elution_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterElutionProtocol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "elution_protocol", this]);
});

Clazz.newMeth(C$, 'enterSamplePrepDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "sample_prep_details", this]);
});

Clazz.newMeth(C$, 'enterSampleVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "sample_volume", this]);
});

Clazz.newMeth(C$, 'enterSampleConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "sample_concentration", this]);
});

Clazz.newMeth(C$, 'enterSampleConcMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "sample_conc_method", this]);
});

Clazz.newMeth(C$, 'enterVolumePooledFractions$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "volume_pooled_fractions", this]);
});

Clazz.newMeth(C$, 'enterYieldPooledFractions$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "yield_pooled_fractions", this]);
});

Clazz.newMeth(C$, 'enterYieldMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "yield_method", this]);
});

Clazz.newMeth(C$, 'enterPostTreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_chrom", "post_treatment", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenFractBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_fract", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "step_id", this]);
});

Clazz.newMeth(C$, 'enterNextStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "next_step_id", this]);
});

Clazz.newMeth(C$, 'enterEndConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "end_construct_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "date", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "method", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "temperature", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "details", this]);
});

Clazz.newMeth(C$, 'enterProteinLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "protein_location", this]);
});

Clazz.newMeth(C$, 'enterProteinVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "protein_volume", this]);
});

Clazz.newMeth(C$, 'enterProteinYield$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "protein_yield", this]);
});

Clazz.newMeth(C$, 'enterProteinYieldMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_fract", "protein_yield_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenPureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_pure", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "step_id", this]);
});

Clazz.newMeth(C$, 'enterProductId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "product_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "date", this]);
});

Clazz.newMeth(C$, 'enterConcDeviceId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "conc_device_id", this]);
});

Clazz.newMeth(C$, 'enterConcDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "conc_details", this]);
});

Clazz.newMeth(C$, 'enterConcAssayMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "conc_assay_method", this]);
});

Clazz.newMeth(C$, 'enterProteinConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "protein_concentration", this]);
});

Clazz.newMeth(C$, 'enterProteinYield$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "protein_yield", this]);
});

Clazz.newMeth(C$, 'enterProteinPurity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "protein_purity", this]);
});

Clazz.newMeth(C$, 'enterProteinOligomericState$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "protein_oligomeric_state", this]);
});

Clazz.newMeth(C$, 'enterStorageBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "storage_buffer_id", this]);
});

Clazz.newMeth(C$, 'enterStorageTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "storage_temperature", this]);
});

Clazz.newMeth(C$, 'enterSummary$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_pure", "summary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenCharacterBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_character", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "step_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "date", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "method", this]);
});

Clazz.newMeth(C$, 'enterResult$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "result", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_character", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConstructBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_construct", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "name", this]);
});

Clazz.newMeth(C$, 'enterOrganisation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "organisation", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterRobotId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "robot_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "date", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "details", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "class", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "type", this]);
});

Clazz.newMeth(C$, 'enterSeq$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct", "seq", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConstructFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_construct_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct_feature", "id", this]);
});

Clazz.newMeth(C$, 'enterConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct_feature", "construct_id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct_feature", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterStartSeq$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_construct_feature", "start_seq", this]);
});

Clazz.newMeth(C$, 'enterEndSeq$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_construct_feature", "end_seq", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct_feature", "type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_construct_feature", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRobotSystemBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_robot_system", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_robot_system", "id", this]);
});

Clazz.newMeth(C$, 'enterModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_robot_system", "model", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_robot_system", "type", this]);
});

Clazz.newMeth(C$, 'enterManufacturer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_robot_system", "manufacturer", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxBufferBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_buffer", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer", "name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxBufferComponentsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_buffer_components", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "id", this]);
});

Clazz.newMeth(C$, 'enterBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "buffer_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "name", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "volume", this]);
});

Clazz.newMeth(C$, 'enterConc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "conc", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "details", this]);
});

Clazz.newMeth(C$, 'enterConcUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "conc_units", this]);
});

Clazz.newMeth(C$, 'enterIsotopicLabeling$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_buffer_components", "isotopic_labeling", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDomainBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_domain", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDomainRangeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_domain_range", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBegLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_domain_range", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDomainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "domain_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_domain_range", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_domain_range", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSequenceRangeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_sequence_range", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBegLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sequence_range", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSeqRangeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "seq_range_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sequence_range", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_range", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFeatureEntryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_feature_entry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_identifier", this]);
});

Clazz.newMeth(C$, 'enterFeatureAssignedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_assigned_by", this]);
});

Clazz.newMeth(C$, 'enterFeatureCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_citation_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureSoftwareId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_entry", "feature_software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFeatureDomainBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_feature_domain", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "id", this]);
});

Clazz.newMeth(C$, 'enterDomainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "domain_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_identifier", this]);
});

Clazz.newMeth(C$, 'enterFeatureAssignedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_assigned_by", this]);
});

Clazz.newMeth(C$, 'enterFeatureCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_citation_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureSoftwareId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_domain", "feature_software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFeatureSequenceRangeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_feature_sequence_range", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "id", this]);
});

Clazz.newMeth(C$, 'enterSeqRangeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "seq_range_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_identifier", this]);
});

Clazz.newMeth(C$, 'enterFeatureAssignedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_assigned_by", this]);
});

Clazz.newMeth(C$, 'enterFeatureCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_citation_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureSoftwareId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_sequence_range", "feature_software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFeatureAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_feature_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_identifier", this]);
});

Clazz.newMeth(C$, 'enterFeatureAssignedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_assigned_by", this]);
});

Clazz.newMeth(C$, 'enterFeatureCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_citation_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureSoftwareId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_assembly", "feature_software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFeatureMonomerBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_feature_monomer", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_identifier", this]);
});

Clazz.newMeth(C$, 'enterFeatureAssignedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_assigned_by", this]);
});

Clazz.newMeth(C$, 'enterFeatureCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_citation_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureSoftwareId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "feature_software_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_feature_monomer", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_feature_monomer", "auth_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxExptlPdBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_exptl_pd", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_pd", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSpecPreparationPH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_exptl_pd", "spec_preparation_pH", this]);
});

Clazz.newMeth(C$, 'enterSpecPreparationPHRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_pd", "spec_preparation_pH_range", this]);
});

Clazz.newMeth(C$, 'enterSpecPreparation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_exptl_pd", "spec_preparation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReflnsTwinBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reflns_twin", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reflns_twin", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reflns_twin", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterDomainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reflns_twin", "domain_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reflns_twin", "type", this]);
});

Clazz.newMeth(C$, 'enterOperator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reflns_twin", "operator", this]);
});

Clazz.newMeth(C$, 'enterFraction$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_reflns_twin", "fraction", this]);
});

Clazz.newMeth(C$, 'enterMeanI2OverMeanISquare$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_reflns_twin", "mean_I2_over_mean_I_square", this]);
});

Clazz.newMeth(C$, 'enterMeanFSquareOverMeanF2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_reflns_twin", "mean_F_square_over_mean_F2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_info", "type", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_info", "value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReRefinementBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_re_refinement", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_re_refinement", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_re_refinement", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_re_refinement", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyPropBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_prop", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop", "type", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop", "value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterAlignId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "align_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "details", this]);
});

Clazz.newMeth(C$, 'enterPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "beg_seq_num", this]);
});

Clazz.newMeth(C$, 'enterEndSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "end_seq_num", this]);
});

Clazz.newMeth(C$, 'enterBegAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "beg_auth_mon_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "end_auth_mon_id", this]);
});

Clazz.newMeth(C$, 'enterBegPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "beg_pdb_ins_code", this]);
});

Clazz.newMeth(C$, 'enterEndPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature", "end_pdb_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqFeaturePropBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_feature_prop", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterPropertyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "property_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "type", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "details", this]);
});

Clazz.newMeth(C$, 'enterBegDbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "beg_db_mon_id", this]);
});

Clazz.newMeth(C$, 'enterEndDbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "end_db_mon_id", this]);
});

Clazz.newMeth(C$, 'enterBegDbSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "beg_db_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndDbSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_feature_prop", "end_db_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructChemCompDiagnosticsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_chem_comp_diagnostics", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "details", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "type", this]);
});

Clazz.newMeth(C$, 'enterPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "seq_num", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "pdb_ins_code", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_chem_comp_diagnostics", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_feature", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_feature", "type", this]);
});

Clazz.newMeth(C$, 'enterSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_feature", "support", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_feature", "value", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_feature", "source", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxCoordinateModelBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_coordinate_model", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coordinate_model", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coordinate_model", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructChemCompFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_chem_comp_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "details", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "type", this]);
});

Clazz.newMeth(C$, 'enterPdbStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "pdb_strand_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "seq_num", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPdbInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "pdb_ins_code", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_chem_comp_feature", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDiffrnReflnsShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_diffrn_reflns_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "d_res_low", this]);
});

Clazz.newMeth(C$, 'enterDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "d_res_high", this]);
});

Clazz.newMeth(C$, 'enterPercentPossibleObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "percent_possible_obs", this]);
});

Clazz.newMeth(C$, 'enterRmergeIObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "Rmerge_I_obs", this]);
});

Clazz.newMeth(C$, 'enterRsymValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "Rsym_value", this]);
});

Clazz.newMeth(C$, 'enterChiSquared$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "chi_squared", this]);
});

Clazz.newMeth(C$, 'enterRedundancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "redundancy", this]);
});

Clazz.newMeth(C$, 'enterRejects$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "rejects", this]);
});

Clazz.newMeth(C$, 'enterNumberObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_diffrn_reflns_shell", "number_obs", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxBondDistanceLimitsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_bond_distance_limits", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomType1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_bond_distance_limits", "atom_type_1", this]);
});

Clazz.newMeth(C$, 'enterAtomType2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_bond_distance_limits", "atom_type_2", this]);
});

Clazz.newMeth(C$, 'enterLowerLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_bond_distance_limits", "lower_limit", this]);
});

Clazz.newMeth(C$, 'enterUpperLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_bond_distance_limits", "upper_limit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSolnScatterBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_soln_scatter", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "type", this]);
});

Clazz.newMeth(C$, 'enterSourceBeamline$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "source_beamline", this]);
});

Clazz.newMeth(C$, 'enterSourceBeamlineInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "source_beamline_instrument", this]);
});

Clazz.newMeth(C$, 'enterDetectorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "detector_type", this]);
});

Clazz.newMeth(C$, 'enterDetectorSpecific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "detector_specific", this]);
});

Clazz.newMeth(C$, 'enterSourceType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "source_type", this]);
});

Clazz.newMeth(C$, 'enterSourceClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "source_class", this]);
});

Clazz.newMeth(C$, 'enterNumTimeFrames$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_soln_scatter", "num_time_frames", this]);
});

Clazz.newMeth(C$, 'enterSamplePH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "sample_pH", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "temperature", this]);
});

Clazz.newMeth(C$, 'enterConcentrationRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "concentration_range", this]);
});

Clazz.newMeth(C$, 'enterBufferName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "buffer_name", this]);
});

Clazz.newMeth(C$, 'enterMeanGuinerRadius$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "mean_guiner_radius", this]);
});

Clazz.newMeth(C$, 'enterMeanGuinerRadiusEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "mean_guiner_radius_esd", this]);
});

Clazz.newMeth(C$, 'enterMinMeanCrossSectionalRadiiGyration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "min_mean_cross_sectional_radii_gyration", this]);
});

Clazz.newMeth(C$, 'enterMinMeanCrossSectionalRadiiGyrationEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "min_mean_cross_sectional_radii_gyration_esd", this]);
});

Clazz.newMeth(C$, 'enterMaxMeanCrossSectionalRadiiGyration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "max_mean_cross_sectional_radii_gyration", this]);
});

Clazz.newMeth(C$, 'enterMaxMeanCrossSectionalRadiiGyrationEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_soln_scatter", "max_mean_cross_sectional_radii_gyration_esd", this]);
});

Clazz.newMeth(C$, 'enterProteinLength$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "protein_length", this]);
});

Clazz.newMeth(C$, 'enterDataReductionSoftwareList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "data_reduction_software_list", this]);
});

Clazz.newMeth(C$, 'enterDataAnalysisSoftwareList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter", "data_analysis_software_list", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSolnScatterModelBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_soln_scatter_model", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterScatterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "scatter_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "details", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "method", this]);
});

Clazz.newMeth(C$, 'enterSoftwareList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "software_list", this]);
});

Clazz.newMeth(C$, 'enterSoftwareAuthorList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "software_author_list", this]);
});

Clazz.newMeth(C$, 'enterEntryFittingList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "entry_fitting_list", this]);
});

Clazz.newMeth(C$, 'enterNumConformersCalculated$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_soln_scatter_model", "num_conformers_calculated", this]);
});

Clazz.newMeth(C$, 'enterNumConformersSubmitted$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_soln_scatter_model", "num_conformers_submitted", this]);
});

Clazz.newMeth(C$, 'enterRepresentativeConformer$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_soln_scatter_model", "representative_conformer", this]);
});

Clazz.newMeth(C$, 'enterConformerSelectionCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_soln_scatter_model", "conformer_selection_criteria", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompDescriptorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_descriptor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterDescriptor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "descriptor", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "type", this]);
});

Clazz.newMeth(C$, 'enterProgram$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "program", this]);
});

Clazz.newMeth(C$, 'enterProgramVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "program_version", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_descriptor", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompIdentifierBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_identifier", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterIdentifier$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "identifier", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "type", this]);
});

Clazz.newMeth(C$, 'enterProgram$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "program", this]);
});

Clazz.newMeth(C$, 'enterProgramVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "program_version", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_identifier", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompImportBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_import", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_import", "comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompAtomEditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_atom_edit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterEditOp$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "edit_op", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterEditAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "edit_atom_id", this]);
});

Clazz.newMeth(C$, 'enterEditAtomValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_edit", "edit_atom_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompBondEditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_bond_edit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterEditOp$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "edit_op", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterEditBondValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_bond_edit", "edit_bond_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompAuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "date", this]);
});

Clazz.newMeth(C$, 'enterAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "annotator", this]);
});

Clazz.newMeth(C$, 'enterProcessingSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "processing_site", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "details", this]);
});

Clazz.newMeth(C$, 'enterActionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_audit", "action_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateCloseContactBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_close_contact", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_close_contact", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_close_contact", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterSymmAsXyz1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "symm_as_xyz_1", this]);
});

Clazz.newMeth(C$, 'enterSymmAsXyz2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_close_contact", "symm_as_xyz_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_close_contact", "dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateSymmContactBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_symm_contact", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_symm_contact", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_symm_contact", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_symm_contact", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_symm_contact", "dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateRmsdBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_rmsd_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterBondDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "bond_deviation", this]);
});

Clazz.newMeth(C$, 'enterBondValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "bond_value", this]);
});

Clazz.newMeth(C$, 'enterBondTargetValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "bond_target_value", this]);
});

Clazz.newMeth(C$, 'enterBondStandardDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "bond_standard_deviation", this]);
});

Clazz.newMeth(C$, 'enterLinkerFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_bond", "linker_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateRmsdAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_rmsd_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "PDB_ins_code_3", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterAngleDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "angle_deviation", this]);
});

Clazz.newMeth(C$, 'enterAngleValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "angle_value", this]);
});

Clazz.newMeth(C$, 'enterAngleTargetValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "angle_target_value", this]);
});

Clazz.newMeth(C$, 'enterAngleStandardDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "angle_standard_deviation", this]);
});

Clazz.newMeth(C$, 'enterLinkerFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_rmsd_angle", "linker_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateTorsionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_torsion", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_torsion", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_torsion", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_torsion", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_torsion", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_torsion", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_torsion", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_torsion", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_torsion", "phi", this]);
});

Clazz.newMeth(C$, 'enterPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_torsion", "psi", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidatePeptideOmegaBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_peptide_omega", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterOmega$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_peptide_omega", "omega", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateChiralBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_chiral", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_chiral", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_chiral", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterOmega$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_chiral", "omega", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_chiral", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidatePlanesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_planes", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_planes", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_planes", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterRmsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_planes", "rmsd", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidatePlanesAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_planes_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPlaneId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_planes_atom", "plane_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_planes_atom", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_planes_atom", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes_atom", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes_atom", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes_atom", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes_atom", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_planes_atom", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAtomDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_planes_atom", "atom_deviation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidateMainChainPlaneBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_main_chain_plane", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterImproperTorsionAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_main_chain_plane", "improper_torsion_angle", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructConnAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_conn_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_symmetry", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_symmetry", this]);
});

Clazz.newMeth(C$, 'enterPtnr1PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPtnr1AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr1_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPtnr2AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr2_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3AuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3AuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3AuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3AuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3PDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPtnr3AuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr3Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_conn_angle", "ptnr3_symmetry", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_conn_angle", "value", this]);
});

Clazz.newMeth(C$, 'enterValueEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_conn_angle", "value_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxUnobsOrZeroOccResiduesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_unobs_or_zero_occ_residues", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "id", this]);
});

Clazz.newMeth(C$, 'enterPolymerFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "polymer_flag", this]);
});

Clazz.newMeth(C$, 'enterOccupancyFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "occupancy_flag", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_residues", "label_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxUnobsOrZeroOccAtomsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_unobs_or_zero_occ_atoms", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "id", this]);
});

Clazz.newMeth(C$, 'enterPolymerFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "polymer_flag", this]);
});

Clazz.newMeth(C$, 'enterOccupancyFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "occupancy_flag", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_unobs_or_zero_occ_atoms", "label_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntryDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entry_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entry_details", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNonpolymerDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entry_details", "nonpolymer_details", this]);
});

Clazz.newMeth(C$, 'enterSequenceDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entry_details", "sequence_details", this]);
});

Clazz.newMeth(C$, 'enterCompoundDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entry_details", "compound_details", this]);
});

Clazz.newMeth(C$, 'enterSourceDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entry_details", "source_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructModResidueBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_mod_residue", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_mod_residue", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_mod_residue", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_mod_residue", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_mod_residue", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterParentCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "parent_comp_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_mod_residue", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqInsertionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_insertion", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "details", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_insertion", "db_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqDeletionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_deletion", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "details", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterDbSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "db_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_deletion", "db_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRemediationAtomSiteMappingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_remediation_atom_site_mapping", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "group_PDB", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAlign$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pdbx_align", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPrePDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPreGroupPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_group_PDB", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPrePdbxAlign$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_pdbx_align", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "occupancy", this]);
});

Clazz.newMeth(C$, 'enterPreOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_remediation_atom_site_mapping", "pre_occupancy", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValidatePolymerLinkageBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_validate_polymer_linkage", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "PDB_ins_code_1", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "PDB_ins_code_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_validate_polymer_linkage", "dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxHelicalSymmetryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_helical_symmetry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_helical_symmetry", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNumberOfOperations$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry", "number_of_operations", this]);
});

Clazz.newMeth(C$, 'enterRotationPerNSubunits$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_helical_symmetry", "rotation_per_n_subunits", this]);
});

Clazz.newMeth(C$, 'enterRisePerNSubunits$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_helical_symmetry", "rise_per_n_subunits", this]);
});

Clazz.newMeth(C$, 'enterNSubunitsDivisor$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry", "n_subunits_divisor", this]);
});

Clazz.newMeth(C$, 'enterDyadAxis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_helical_symmetry", "dyad_axis", this]);
});

Clazz.newMeth(C$, 'enterCircularSymmetry$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry", "circular_symmetry", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPointSymmetryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_point_symmetry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSchoenfliesSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry", "Schoenflies_symbol", this]);
});

Clazz.newMeth(C$, 'enterCircularSymmetry$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_point_symmetry", "circular_symmetry", this]);
});

Clazz.newMeth(C$, 'enterH_MNotation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry", "H-M_notation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructEntityInstBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_entity_inst", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_entity_inst", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_entity_inst", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_entity_inst", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructOperListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_oper_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list", "id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list", "type", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list", "name", this]);
});

Clazz.newMeth(C$, 'enterSymmetryOperation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list", "symmetry_operation", this]);
});

Clazz.newMeth(C$, 'enterMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "vector[1]", this]);
});

Clazz.newMeth(C$, 'enterVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "vector[2]", this]);
});

Clazz.newMeth(C$, 'enterVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list", "vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterMethodDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly", "method_details", this]);
});

Clazz.newMeth(C$, 'enterOligomericDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly", "oligomeric_details", this]);
});

Clazz.newMeth(C$, 'enterOligomericCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_assembly", "oligomeric_count", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityInstId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen", "entity_inst_id", this]);
});

Clazz.newMeth(C$, 'enterAsymIdList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen", "asym_id_list", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymIdList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen", "auth_asym_id_list", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterOperExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen", "oper_expression", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAsymGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_asym_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityInstId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_asym_gen", "entity_inst_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_asym_gen", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterOperExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_asym_gen", "oper_expression", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructMsymGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_msym_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityInstId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_msym_gen", "entity_inst_id", this]);
});

Clazz.newMeth(C$, 'enterMsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_msym_gen", "msym_id", this]);
});

Clazz.newMeth(C$, 'enterOperExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_msym_gen", "oper_expression", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructLegacyOperListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_legacy_oper_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "name", this]);
});

Clazz.newMeth(C$, 'enterMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "vector[1]", this]);
});

Clazz.newMeth(C$, 'enterVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "vector[2]", this]);
});

Clazz.newMeth(C$, 'enterVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_legacy_oper_list", "vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompAtomFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_atom_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_feature", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_feature", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_feature", "feature_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeFamilyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_family", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_family", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_family", "name", this]);
});

Clazz.newMeth(C$, 'enterReleaseStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_family", "release_status", this]);
});

Clazz.newMeth(C$, 'enterReplaces$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_family", "replaces", this]);
});

Clazz.newMeth(C$, 'enterReplacedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_family", "replaced_by", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_list", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_list", "family_prd_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterFormulaWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_reference_molecule", "formula_weight", this]);
});

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "formula", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "type", this]);
});

Clazz.newMeth(C$, 'enterTypeEvidenceCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "type_evidence_code", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "class", this]);
});

Clazz.newMeth(C$, 'enterClassEvidenceCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "class_evidence_code", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "name", this]);
});

Clazz.newMeth(C$, 'enterRepresentAs$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "represent_as", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "chem_comp_id", this]);
});

Clazz.newMeth(C$, 'enterCompoundDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "compound_details", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "description", this]);
});

Clazz.newMeth(C$, 'enterRepresentativePDBIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "representative_PDB_id_code", this]);
});

Clazz.newMeth(C$, 'enterReleaseStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "release_status", this]);
});

Clazz.newMeth(C$, 'enterReplaces$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "replaces", this]);
});

Clazz.newMeth(C$, 'enterReplacedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule", "replaced_by", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_list", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_list", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_list", "type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_list", "details", this]);
});

Clazz.newMeth(C$, 'enterComponentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_list", "component_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityNonpolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_nonpoly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_nonpoly", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_nonpoly", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_nonpoly", "details", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_nonpoly", "name", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_nonpoly", "chem_comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "details", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "ref_entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "ref_entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_link", "entity_seq_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_link", "entity_seq_num_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "value_order", this]);
});

Clazz.newMeth(C$, 'enterComponent1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_link", "component_1", this]);
});

Clazz.newMeth(C$, 'enterComponent2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_link", "component_2", this]);
});

Clazz.newMeth(C$, 'enterNonpolyResNum1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "nonpoly_res_num_1", this]);
});

Clazz.newMeth(C$, 'enterNonpolyResNum2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "nonpoly_res_num_2", this]);
});

Clazz.newMeth(C$, 'enterLinkClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_link", "link_class", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityPolyLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_poly_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "details", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterComponentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "component_id", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "entity_seq_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "entity_seq_num_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterInsertCode1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "insert_code_1", this]);
});

Clazz.newMeth(C$, 'enterInsertCode2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "insert_code_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_link", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityPolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_poly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly", "type", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly", "db_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntityPolySeqBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_poly_seq", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterParentMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "parent_mon_id", this]);
});

Clazz.newMeth(C$, 'enterNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "num", this]);
});

Clazz.newMeth(C$, 'enterObserved$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "observed", this]);
});

Clazz.newMeth(C$, 'enterHetero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_poly_seq", "hetero", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntitySequenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_sequence", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_sequence", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_sequence", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_sequence", "type", this]);
});

Clazz.newMeth(C$, 'enterNRPFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_sequence", "NRP_flag", this]);
});

Clazz.newMeth(C$, 'enterOneLetterCodes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_sequence", "one_letter_codes", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntitySrcNatBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_src_nat", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterRefEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "ref_entity_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterOrganismScientific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "organism_scientific", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "strain", this]);
});

Clazz.newMeth(C$, 'enterTaxid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "taxid", this]);
});

Clazz.newMeth(C$, 'enterAtcc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "atcc", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "db_name", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "source", this]);
});

Clazz.newMeth(C$, 'enterSourceId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_src_nat", "source_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_details", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_details", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_details", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_details", "source", this]);
});

Clazz.newMeth(C$, 'enterSourceId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_details", "source_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_details", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeSynonymsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_synonyms", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "name", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "source", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_synonyms", "chem_comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceEntitySubcomponentsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_entity_subcomponents", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_subcomponents", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterSeq$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_subcomponents", "seq", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_entity_subcomponents", "chem_comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeAnnotationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_annotation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "text", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "type", this]);
});

Clazz.newMeth(C$, 'enterSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "support", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "source", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_annotation", "chem_comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeFeaturesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_features", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_features", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterSourceOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_features", "source_ordinal", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "type", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "value", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "source", this]);
});

Clazz.newMeth(C$, 'enterChemCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_features", "chem_comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceMoleculeRelatedStructuresBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_molecule_related_structures", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "db_accession", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "name", this]);
});

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "formula", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_molecule_related_structures", "citation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructGroupListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_group_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterStructGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "struct_group_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "name", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "type", this]);
});

Clazz.newMeth(C$, 'enterGroupEnumerationType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "group_enumeration_type", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "description", this]);
});

Clazz.newMeth(C$, 'enterSelection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "selection", this]);
});

Clazz.newMeth(C$, 'enterSelectionDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_list", "selection_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructGroupComponentsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_group_components", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_components", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterStructGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "struct_group_id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_components", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_components", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_components", "label_alt_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructGroupComponentRangeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_group_component_range", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_component_range", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterStructGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "struct_group_id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_component_range", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterBegAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterBegLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "beg_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterEndLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_group_component_range", "end_label_alt_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPrdAuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_prd_audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "date", this]);
});

Clazz.newMeth(C$, 'enterAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "annotator", this]);
});

Clazz.newMeth(C$, 'enterProcessingSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "processing_site", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "details", this]);
});

Clazz.newMeth(C$, 'enterActionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_prd_audit", "action_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFamilyPrdAuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_family_prd_audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "family_prd_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "date", this]);
});

Clazz.newMeth(C$, 'enterAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "annotator", this]);
});

Clazz.newMeth(C$, 'enterProcessingSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "processing_site", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "details", this]);
});

Clazz.newMeth(C$, 'enterActionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_prd_audit", "action_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMoleculeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_molecule", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterInstanceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_molecule", "instance_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule", "linked_entity_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMoleculeFeaturesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_molecule_features", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features", "prd_id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features", "class", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features", "type", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features", "name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxFamilyGroupIndexBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_family_group_index", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_group_index", "id", this]);
});

Clazz.newMeth(C$, 'enterFamilyPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_family_group_index", "family_prd_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDistantSolventAtomsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_distant_solvent_atoms", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterNeighborMacromoleculeDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "neighbor_macromolecule_distance", this]);
});

Clazz.newMeth(C$, 'enterNeighborLigandDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_distant_solvent_atoms", "neighbor_ligand_distance", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructSpecialSymmetryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_special_symmetry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "id", this]);
});

Clazz.newMeth(C$, 'enterPDBModelNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "PDB_model_num", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_special_symmetry", "label_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferencePublicationListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_publication_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPublicationAbbrev$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "publication_abbrev", this]);
});

Clazz.newMeth(C$, 'enterASTMCodeType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "ASTM_code_type", this]);
});

Clazz.newMeth(C$, 'enterASTMCodeValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "ASTM_code_value", this]);
});

Clazz.newMeth(C$, 'enterISSNCodeType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "ISSN_code_type", this]);
});

Clazz.newMeth(C$, 'enterISSNCodeValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "ISSN_code_value", this]);
});

Clazz.newMeth(C$, 'enterCountry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "country", this]);
});

Clazz.newMeth(C$, 'enterStartYear$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "start_year", this]);
});

Clazz.newMeth(C$, 'enterEndYear$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_publication_list", "end_year", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrAssignedChemShiftListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_assigned_chem_shift_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterChemShift13CErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_13C_err", this]);
});

Clazz.newMeth(C$, 'enterChemShift15NErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_15N_err", this]);
});

Clazz.newMeth(C$, 'enterChemShift19FErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_19F_err", this]);
});

Clazz.newMeth(C$, 'enterChemShift1HErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_1H_err", this]);
});

Clazz.newMeth(C$, 'enterChemShift2HErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_2H_err", this]);
});

Clazz.newMeth(C$, 'enterChemShift31PErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_31P_err", this]);
});

Clazz.newMeth(C$, 'enterChemShiftReferenceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "chem_shift_reference_id", this]);
});

Clazz.newMeth(C$, 'enterConditionsId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "conditions_id", this]);
});

Clazz.newMeth(C$, 'enterDataFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "data_file_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterErrorDerivationMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "error_derivation_method", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "id", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "label", this]);
});

Clazz.newMeth(C$, 'enterConditionsLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_assigned_chem_shift_list", "conditions_label", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrChemShiftExperimentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_chem_shift_experiment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAssignedChemShiftListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "assigned_chem_shift_list_id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "experiment_name", this]);
});

Clazz.newMeth(C$, 'enterSampleState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "sample_state", this]);
});

Clazz.newMeth(C$, 'enterSolutionId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_experiment", "solution_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrChemShiftRefBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_chem_shift_ref", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "atom_group", this]);
});

Clazz.newMeth(C$, 'enterAtomIsotopeNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "atom_isotope_number", this]);
});

Clazz.newMeth(C$, 'enterAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "atom_type", this]);
});

Clazz.newMeth(C$, 'enterChemShiftReferenceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "chem_shift_reference_id", this]);
});

Clazz.newMeth(C$, 'enterChemShiftUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "chem_shift_units", this]);
});

Clazz.newMeth(C$, 'enterChemShiftVal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "chem_shift_val", this]);
});

Clazz.newMeth(C$, 'enterCorrectionVal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "correction_val", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterExternalRefAxis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "external_ref_axis", this]);
});

Clazz.newMeth(C$, 'enterExternalRefLoc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "external_ref_loc", this]);
});

Clazz.newMeth(C$, 'enterExternalRefSampleGeometry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "external_ref_sample_geometry", this]);
});

Clazz.newMeth(C$, 'enterIndirectShiftRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "indirect_shift_ratio", this]);
});

Clazz.newMeth(C$, 'enterMolCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "mol_common_name", this]);
});

Clazz.newMeth(C$, 'enterRank$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "rank", this]);
});

Clazz.newMeth(C$, 'enterRefCorrectionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "ref_correction_type", this]);
});

Clazz.newMeth(C$, 'enterRefMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "ref_method", this]);
});

Clazz.newMeth(C$, 'enterRefType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "ref_type", this]);
});

Clazz.newMeth(C$, 'enterSolvent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_ref", "solvent", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrChemShiftReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_chem_shift_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCarbonShiftsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "carbon_shifts_flag", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "id", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "label", this]);
});

Clazz.newMeth(C$, 'enterNitrogenShiftsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "nitrogen_shifts_flag", this]);
});

Clazz.newMeth(C$, 'enterOtherShiftsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "other_shifts_flag", this]);
});

Clazz.newMeth(C$, 'enterPhosphorusShiftsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "phosphorus_shifts_flag", this]);
});

Clazz.newMeth(C$, 'enterProtonShiftsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_reference", "proton_shifts_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrChemShiftSoftwareBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_chem_shift_software", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAssignedChemShiftListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_software", "assigned_chem_shift_list_id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_software", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_chem_shift_software", "software_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_chem_shift_software", "software_label", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrConstraintFileBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_constraint_file", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterConstraintFilename$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "constraint_filename", this]);
});

Clazz.newMeth(C$, 'enterConstraintNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "constraint_number", this]);
});

Clazz.newMeth(C$, 'enterConstraintSubtype$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "constraint_subtype", this]);
});

Clazz.newMeth(C$, 'enterConstraintType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "constraint_type", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "software_name", this]);
});

Clazz.newMeth(C$, 'enterSoftwareOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_constraint_file", "software_ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSoftwareTaskBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_software_task", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software_task", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_software_task", "software_ordinal", this]);
});

Clazz.newMeth(C$, 'enterTask$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_software_task", "task", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSpectralDimBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_spectral_dim", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "id", this]);
});

Clazz.newMeth(C$, 'enterAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "atom_type", this]);
});

Clazz.newMeth(C$, 'enterAtomIsotopeNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "atom_isotope_number", this]);
});

Clazz.newMeth(C$, 'enterSpectralRegion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "spectral_region", this]);
});

Clazz.newMeth(C$, 'enterMagnetizationLinkageId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "magnetization_linkage_id", this]);
});

Clazz.newMeth(C$, 'enterSweepWidth$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "sweep_width", this]);
});

Clazz.newMeth(C$, 'enterEncodingCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "encoding_code", this]);
});

Clazz.newMeth(C$, 'enterEncodedSourceDimensionId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "encoded_source_dimension_id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSpectralPeakListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "spectral_peak_list_id", this]);
});

Clazz.newMeth(C$, 'enterSweepWidthUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "sweep_width_units", this]);
});

Clazz.newMeth(C$, 'enterCenterFrequencyOffset$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "center_frequency_offset", this]);
});

Clazz.newMeth(C$, 'enterUnderSamplingType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_dim", "under_sampling_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSpectralPeakListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_spectral_peak_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "id", this]);
});

Clazz.newMeth(C$, 'enterDataFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "data_file_name", this]);
});

Clazz.newMeth(C$, 'enterSolutionId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "solution_id", this]);
});

Clazz.newMeth(C$, 'enterConditionsId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "conditions_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterNumberOfSpectralDimensions$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "number_of_spectral_dimensions", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "details", this]);
});

Clazz.newMeth(C$, 'enterTextDataFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "text_data_format", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "label", this]);
});

Clazz.newMeth(C$, 'enterConditionsLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_list", "conditions_label", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSpectralPeakSoftwareBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_spectral_peak_software", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_software", "software_id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_software", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSpectralPeakListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_spectral_peak_software", "spectral_peak_list_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrSystematicChemShiftOffsetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_systematic_chem_shift_offset", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "type", this]);
});

Clazz.newMeth(C$, 'enterAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "atom_type", this]);
});

Clazz.newMeth(C$, 'enterAtomIsotopeNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "atom_isotope_number", this]);
});

Clazz.newMeth(C$, 'enterVal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "val", this]);
});

Clazz.newMeth(C$, 'enterValErr$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "val_err", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterAssignedChemShiftListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "assigned_chem_shift_list_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_systematic_chem_shift_offset", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrUploadBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_upload", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDataFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nmr_upload", "data_file_id", this]);
});

Clazz.newMeth(C$, 'enterDataFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_upload", "data_file_name", this]);
});

Clazz.newMeth(C$, 'enterDataFileCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_upload", "data_file_category", this]);
});

Clazz.newMeth(C$, 'enterDataFileSyntax$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_upload", "data_file_syntax", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_upload", "entry_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditSupportBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_support", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFundingOrganization$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_support", "funding_organization", this]);
});

Clazz.newMeth(C$, 'enterCountry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_support", "country", this]);
});

Clazz.newMeth(C$, 'enterGrantNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_support", "grant_number", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_support", "details", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_support", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompSubcomponentStructConnBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_subcomponent_struct_conn", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "type", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_struct_conn", "seq_id_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompSubcomponentEntityListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_subcomponent_entity_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_entity_list", "id", this]);
});

Clazz.newMeth(C$, 'enterParentCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_entity_list", "parent_comp_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_entity_list", "type", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_subcomponent_entity_list", "class", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntitySrcNatBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_src_nat", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "common_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterGenus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "genus", this]);
});

Clazz.newMeth(C$, 'enterSpecies$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "species", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "strain", this]);
});

Clazz.newMeth(C$, 'enterTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "tissue", this]);
});

Clazz.newMeth(C$, 'enterTissueFraction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "tissue_fraction", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrganismScientific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_organism_scientific", this]);
});

Clazz.newMeth(C$, 'enterPdbxSecretion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_secretion", this]);
});

Clazz.newMeth(C$, 'enterPdbxFragment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_fragment", this]);
});

Clazz.newMeth(C$, 'enterPdbxVariant$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_variant", this]);
});

Clazz.newMeth(C$, 'enterPdbxCellLine$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_cell_line", this]);
});

Clazz.newMeth(C$, 'enterPdbxAtcc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_atcc", this]);
});

Clazz.newMeth(C$, 'enterPdbxCellularLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_cellular_location", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrgan$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_organ", this]);
});

Clazz.newMeth(C$, 'enterPdbxOrganelle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_organelle", this]);
});

Clazz.newMeth(C$, 'enterPdbxCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_cell", this]);
});

Clazz.newMeth(C$, 'enterPdbxPlasmidName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_plasmid_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxPlasmidDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_plasmid_details", this]);
});

Clazz.newMeth(C$, 'enterPdbxNcbiTaxonomyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxSrcId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_nat", "pdbx_src_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltSourceFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_alt_source_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxBegSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_nat", "pdbx_beg_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxEndSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_nat", "pdbx_end_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxCultureCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_nat", "pdbx_culture_collection", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EntitySrcGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["entity_src_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_common_name", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_details", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcGenus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_genus", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcSpecies$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_species", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_strain", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_tissue", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcTissueFraction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_tissue_fraction", this]);
});

Clazz.newMeth(C$, 'enterHostOrgGenus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "host_org_genus", this]);
});

Clazz.newMeth(C$, 'enterHostOrgSpecies$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "host_org_species", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcFragment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_fragment", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcGene$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_gene", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcScientificName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_scientific_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcVariant$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_variant", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcCellLine$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_cell_line", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcAtcc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_atcc", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcOrgan$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_organ", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcOrganelle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_organelle", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcPlasmid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_plasmid", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcPlasmidName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_plasmid_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_cell", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcCellularLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_cellular_location", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgGene$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_gene", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgOrgan$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_organ", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgOrganelle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_organelle", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgCellularLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_cellular_location", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_strain", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgTissueFraction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_tissue_fraction", this]);
});

Clazz.newMeth(C$, 'enterPdbxDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_description", this]);
});

Clazz.newMeth(C$, 'enterHostOrgCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "host_org_common_name", this]);
});

Clazz.newMeth(C$, 'enterHostOrgDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "host_org_details", this]);
});

Clazz.newMeth(C$, 'enterHostOrgStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "host_org_strain", this]);
});

Clazz.newMeth(C$, 'enterPlasmidDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "plasmid_details", this]);
});

Clazz.newMeth(C$, 'enterPlasmidName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "plasmid_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgVariant$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_variant", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgCellLine$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_cell_line", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgAtcc$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_atcc", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgCultureCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_culture_collection", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_cell", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgScientificName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_scientific_name", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_tissue", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgVector$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_vector", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgVectorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_vector_type", this]);
});

Clazz.newMeth(C$, 'enterExpressionSystemId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "expression_system_id", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcDevStage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "gene_src_dev_stage", this]);
});

Clazz.newMeth(C$, 'enterStartConstructId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "start_construct_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcNcbiTaxonomyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxHostOrgNcbiTaxonomyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_host_org_ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxSrcId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_gen", "pdbx_src_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltSourceFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_alt_source_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxSeqType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_seq_type", this]);
});

Clazz.newMeth(C$, 'enterPdbxBegSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_gen", "pdbx_beg_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxEndSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["entity_src_gen", "pdbx_end_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxGeneSrcCultureCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["entity_src_gen", "pdbx_gene_src_culture_collection", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcSynBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_syn", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "details", this]);
});

Clazz.newMeth(C$, 'enterOrganismScientific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "organism_scientific", this]);
});

Clazz.newMeth(C$, 'enterOrganismCommonName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "organism_common_name", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "strain", this]);
});

Clazz.newMeth(C$, 'enterNcbiTaxonomyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxSrcId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_syn", "pdbx_src_id", this]);
});

Clazz.newMeth(C$, 'enterPdbxAltSourceFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_syn", "pdbx_alt_source_flag", this]);
});

Clazz.newMeth(C$, 'enterPdbxBegSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_syn", "pdbx_beg_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbxEndSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_syn", "pdbx_end_seq_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityPolyCompLinkListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_poly_comp_link_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "link_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterEntityCompNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "entity_comp_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntityCompNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "entity_comp_num_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "leaving_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "atom_stereo_config_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "leaving_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "atom_stereo_config_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_comp_link_list", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxLinkedEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_linked_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "type", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "class", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "name", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "description", this]);
});

Clazz.newMeth(C$, 'enterPrdId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity", "prd_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxLinkedEntityInstanceListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_linked_entity_instance_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_instance_list", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterInstanceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_instance_list", "instance_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_instance_list", "asym_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxLinkedEntityListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_linked_entity_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_list", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_list", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterComponentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_list", "component_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_list", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxLinkedEntityLinkListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_linked_entity_link_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "link_id", this]);
});

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "entity_seq_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntitySeqNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "entity_seq_num_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "value_order", this]);
});

Clazz.newMeth(C$, 'enterComponent1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "component_1", this]);
});

Clazz.newMeth(C$, 'enterComponent2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "component_2", this]);
});

Clazz.newMeth(C$, 'enterLinkClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_linked_entity_link_list", "link_class", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityDescriptorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_descriptor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_descriptor", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterDescriptor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_descriptor", "descriptor", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_descriptor", "type", this]);
});

Clazz.newMeth(C$, 'enterProgram$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_descriptor", "program", this]);
});

Clazz.newMeth(C$, 'enterProgramVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_descriptor", "program_version", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_descriptor", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceLinkedEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_linked_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "class", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "name", this]);
});

Clazz.newMeth(C$, 'enterTaxonomyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterTaxonomyClass$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "taxonomy_class", this]);
});

Clazz.newMeth(C$, 'enterLinkToEntityType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "link_to_entity_type", this]);
});

Clazz.newMeth(C$, 'enterLinkToCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "link_to_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLinkFromEntityType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity", "link_from_entity_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceLinkedEntityCompListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_linked_entity_comp_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_list", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_list", "list_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_list", "name", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_list", "comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceLinkedEntityCompLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_linked_entity_comp_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterListId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "list_id_1", this]);
});

Clazz.newMeth(C$, 'enterListId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "list_id_2", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "details", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "leaving_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "atom_stereo_config_1", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "leaving_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "atom_stereo_config_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_comp_link", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxReferenceLinkedEntityLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_reference_linked_entity_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkedEntityId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "linked_entity_id", this]);
});

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterFromListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "from_list_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "details", this]);
});

Clazz.newMeth(C$, 'enterToCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "to_comp_id", this]);
});

Clazz.newMeth(C$, 'enterFromCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "from_comp_id", this]);
});

Clazz.newMeth(C$, 'enterToAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "to_atom_id", this]);
});

Clazz.newMeth(C$, 'enterFromAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "from_atom_id", this]);
});

Clazz.newMeth(C$, 'enterFromLeavingAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "from_leaving_atom_id", this]);
});

Clazz.newMeth(C$, 'enterFromAtomStereoConfig$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "from_atom_stereo_config", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_reference_linked_entity_link", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRelatedExpDataSetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_related_exp_data_set", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_related_exp_data_set", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_related_exp_data_set", "data_reference", this]);
});

Clazz.newMeth(C$, 'enterMetadataReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_related_exp_data_set", "metadata_reference", this]);
});

Clazz.newMeth(C$, 'enterDataSetType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_related_exp_data_set", "data_set_type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_related_exp_data_set", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabaseStatusHistoryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_status_history", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDateBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "date_begin", this]);
});

Clazz.newMeth(C$, 'enterDateEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "date_end", this]);
});

Clazz.newMeth(C$, 'enterStatusCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "status_code", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_status_history", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "name", this]);
});

Clazz.newMeth(C$, 'enterAggregationState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "aggregation_state", this]);
});

Clazz.newMeth(C$, 'enterComposition$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "composition", this]);
});

Clazz.newMeth(C$, 'enterNumComponents$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_assembly", "num_components", this]);
});

Clazz.newMeth(C$, 'enterMolWtExp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_assembly", "mol_wt_exp", this]);
});

Clazz.newMeth(C$, 'enterMolWtTheo$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_assembly", "mol_wt_theo", this]);
});

Clazz.newMeth(C$, 'enterMolWtMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "mol_wt_method", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_assembly", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEntityAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_entity_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterParentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_entity_assembly", "parent_id", this]);
});

Clazz.newMeth(C$, 'enterSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "source", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "type", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "details", this]);
});

Clazz.newMeth(C$, 'enterGoId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "go_id", this]);
});

Clazz.newMeth(C$, 'enterIprId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ipr_id", this]);
});

Clazz.newMeth(C$, 'enterSynonym$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "synonym", this]);
});

Clazz.newMeth(C$, 'enterNumberOfCopies$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_entity_assembly", "number_of_copies", this]);
});

Clazz.newMeth(C$, 'enterOligomericDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "oligomeric_details", this]);
});

Clazz.newMeth(C$, 'enterEntityIdList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "entity_id_list", this]);
});

Clazz.newMeth(C$, 'enterEbiOrganismScientific$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_organism_scientific", this]);
});

Clazz.newMeth(C$, 'enterEbiOrganismCommon$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_organism_common", this]);
});

Clazz.newMeth(C$, 'enterEbiStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_strain", this]);
});

Clazz.newMeth(C$, 'enterEbiTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_tissue", this]);
});

Clazz.newMeth(C$, 'enterEbiCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_cell", this]);
});

Clazz.newMeth(C$, 'enterEbiOrganelle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_organelle", this]);
});

Clazz.newMeth(C$, 'enterEbiCellularLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_cellular_location", this]);
});

Clazz.newMeth(C$, 'enterEbiEngineered$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_engineered", this]);
});

Clazz.newMeth(C$, 'enterEbiExpressionSystem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_expression_system", this]);
});

Clazz.newMeth(C$, 'enterEbiExpressionSystemPlasmid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "ebi_expression_system_plasmid", this]);
});

Clazz.newMeth(C$, 'enterMutantFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly", "mutant_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmVirusEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_virus_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterVirusHostCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "virus_host_category", this]);
});

Clazz.newMeth(C$, 'enterVirusHostSpecies$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "virus_host_species", this]);
});

Clazz.newMeth(C$, 'enterVirusHostGrowthCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "virus_host_growth_cell", this]);
});

Clazz.newMeth(C$, 'enterVirusType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "virus_type", this]);
});

Clazz.newMeth(C$, 'enterVirusIsolate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "virus_isolate", this]);
});

Clazz.newMeth(C$, 'enterIctvdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "ictvdb_id", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterEnveloped$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "enveloped", this]);
});

Clazz.newMeth(C$, 'enterEmpty$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "empty", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_entity", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSamplePreparationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_sample_preparation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "id", this]);
});

Clazz.newMeth(C$, 'enterPh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_sample_preparation", "ph", this]);
});

Clazz.newMeth(C$, 'enterBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "buffer_id", this]);
});

Clazz.newMeth(C$, 'enterSampleConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_sample_preparation", "sample_concentration", this]);
});

Clazz.newMeth(C$, 'enter_2dCrystalGrowId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "2d_crystal_grow_id", this]);
});

Clazz.newMeth(C$, 'enterSupportId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "support_id", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_preparation", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSampleSupportBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_sample_support", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "id", this]);
});

Clazz.newMeth(C$, 'enterFilmMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "film_material", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "method", this]);
});

Clazz.newMeth(C$, 'enterGridMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "grid_material", this]);
});

Clazz.newMeth(C$, 'enterGridMeshSize$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_sample_support", "grid_mesh_size", this]);
});

Clazz.newMeth(C$, 'enterGridType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "grid_type", this]);
});

Clazz.newMeth(C$, 'enterPretreatment$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "pretreatment", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "details", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_sample_support", "citation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmBufferBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_buffer", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer", "id", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer", "name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer", "details", this]);
});

Clazz.newMeth(C$, 'enterPH$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_buffer", "pH", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmVitrificationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_vitrification", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "id", this]);
});

Clazz.newMeth(C$, 'enterSamplePreparationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "sample_preparation_id", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterCryogenName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "cryogen_name", this]);
});

Clazz.newMeth(C$, 'enterHumidity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_vitrification", "humidity", this]);
});

Clazz.newMeth(C$, 'enterTemp$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_vitrification", "temp", this]);
});

Clazz.newMeth(C$, 'enterChamberTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_vitrification", "chamber_temperature", this]);
});

Clazz.newMeth(C$, 'enterInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "instrument", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "method", this]);
});

Clazz.newMeth(C$, 'enterTimeResolvedState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "time_resolved_state", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_vitrification", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmImagingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_imaging", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "id", this]);
});

Clazz.newMeth(C$, 'enterAstigmatism$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "astigmatism", this]);
});

Clazz.newMeth(C$, 'enterElectronBeamTiltParams$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "electron_beam_tilt_params", this]);
});

Clazz.newMeth(C$, 'enterResidualTilt$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "residual_tilt", this]);
});

Clazz.newMeth(C$, 'enterSampleSupportId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "sample_support_id", this]);
});

Clazz.newMeth(C$, 'enterDetectorId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "detector_id", this]);
});

Clazz.newMeth(C$, 'enterScansId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "scans_id", this]);
});

Clazz.newMeth(C$, 'enterMicroscopeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "microscope_id", this]);
});

Clazz.newMeth(C$, 'enterMicroscopeModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "microscope_model", this]);
});

Clazz.newMeth(C$, 'enterSpecimenHolderType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "specimen_holder_type", this]);
});

Clazz.newMeth(C$, 'enterSpecimenHolderModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "specimen_holder_model", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "details", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "date", this]);
});

Clazz.newMeth(C$, 'enterAcceleratingVoltage$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_imaging", "accelerating_voltage", this]);
});

Clazz.newMeth(C$, 'enterIlluminationMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "illumination_mode", this]);
});

Clazz.newMeth(C$, 'enterMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "mode", this]);
});

Clazz.newMeth(C$, 'enterNominalCs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "nominal_cs", this]);
});

Clazz.newMeth(C$, 'enterNominalDefocusMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "nominal_defocus_min", this]);
});

Clazz.newMeth(C$, 'enterNominalDefocusMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "nominal_defocus_max", this]);
});

Clazz.newMeth(C$, 'enterCalibratedDefocusMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "calibrated_defocus_min", this]);
});

Clazz.newMeth(C$, 'enterCalibratedDefocusMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "calibrated_defocus_max", this]);
});

Clazz.newMeth(C$, 'enterTiltAngleMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "tilt_angle_min", this]);
});

Clazz.newMeth(C$, 'enterTiltAngleMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "tilt_angle_max", this]);
});

Clazz.newMeth(C$, 'enterNominalMagnification$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_imaging", "nominal_magnification", this]);
});

Clazz.newMeth(C$, 'enterCalibratedMagnification$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_imaging", "calibrated_magnification", this]);
});

Clazz.newMeth(C$, 'enterElectronSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "electron_source", this]);
});

Clazz.newMeth(C$, 'enterElectronDose$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "electron_dose", this]);
});

Clazz.newMeth(C$, 'enterEnergyFilter$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "energy_filter", this]);
});

Clazz.newMeth(C$, 'enterEnergyWindow$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "energy_window", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "temperature", this]);
});

Clazz.newMeth(C$, 'enterDetectorDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "detector_distance", this]);
});

Clazz.newMeth(C$, 'enterRecordingTemperatureMinimum$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "recording_temperature_minimum", this]);
});

Clazz.newMeth(C$, 'enterRecordingTemperatureMaximum$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "recording_temperature_maximum", this]);
});

Clazz.newMeth(C$, 'enterAlignmentProcedure$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "alignment_procedure", this]);
});

Clazz.newMeth(C$, 'enterC2ApertureDiameter$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging", "c2_aperture_diameter", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterCryogen$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging", "cryogen", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDetectorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_detector", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_detector", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_detector", "id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_detector", "details", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_detector", "type", this]);
});

Clazz.newMeth(C$, 'enterDetectiveQuantumEfficiency$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_detector", "detective_quantum_efficiency", this]);
});

Clazz.newMeth(C$, 'enterMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_detector", "mode", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmImageScansBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_image_scans", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "id", this]);
});

Clazz.newMeth(C$, 'enterNumberDigitalImages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_scans", "number_digital_images", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "details", this]);
});

Clazz.newMeth(C$, 'enterScannerModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "scanner_model", this]);
});

Clazz.newMeth(C$, 'enterSamplingSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_image_scans", "sampling_size", this]);
});

Clazz.newMeth(C$, 'enterOdRange$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_image_scans", "od_range", this]);
});

Clazz.newMeth(C$, 'enterQuantBitSize$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_scans", "quant_bit_size", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterDimensionHeight$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_scans", "dimension_height", this]);
});

Clazz.newMeth(C$, 'enterDimensionWidth$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_scans", "dimension_width", this]);
});

Clazz.newMeth(C$, 'enterFramesPerImage$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_scans", "frames_per_image", this]);
});

Clazz.newMeth(C$, 'enterImageRecordingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "image_recording_id", this]);
});

Clazz.newMeth(C$, 'enterUsedFramesPerImage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_scans", "used_frames_per_image", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em2dProjectionSelectionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_2d_projection_selection", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "id", this]);
});

Clazz.newMeth(C$, 'enterNumParticles$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_2d_projection_selection", "num_particles", this]);
});

Clazz.newMeth(C$, 'enterSoftwareName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "software_name", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "method", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "details", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_projection_selection", "citation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em3dReconstructionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_3d_reconstruction", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "method", this]);
});

Clazz.newMeth(C$, 'enterAlgorithm$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "algorithm", this]);
});

Clazz.newMeth(C$, 'enterCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "citation_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "details", this]);
});

Clazz.newMeth(C$, 'enterResolution$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_reconstruction", "resolution", this]);
});

Clazz.newMeth(C$, 'enterResolutionMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "resolution_method", this]);
});

Clazz.newMeth(C$, 'enterMagnificationCalibration$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "magnification_calibration", this]);
});

Clazz.newMeth(C$, 'enterCtfCorrectionMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "ctf_correction_method", this]);
});

Clazz.newMeth(C$, 'enterNominalPixelSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_reconstruction", "nominal_pixel_size", this]);
});

Clazz.newMeth(C$, 'enterActualPixelSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_reconstruction", "actual_pixel_size", this]);
});

Clazz.newMeth(C$, 'enterNumParticles$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_3d_reconstruction", "num_particles", this]);
});

Clazz.newMeth(C$, 'enterEulerAnglesDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "euler_angles_details", this]);
});

Clazz.newMeth(C$, 'enterNumClassAverages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_3d_reconstruction", "num_class_averages", this]);
});

Clazz.newMeth(C$, 'enterSoftware$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "software", this]);
});

Clazz.newMeth(C$, 'enterFscType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "fsc_type", this]);
});

Clazz.newMeth(C$, 'enterRefinementType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "refinement_type", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterSymmetryType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_reconstruction", "symmetry_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em3dFittingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_3d_fitting", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "id", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "method", this]);
});

Clazz.newMeth(C$, 'enterTargetCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "target_criteria", this]);
});

Clazz.newMeth(C$, 'enterSoftwareName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "software_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "details", this]);
});

Clazz.newMeth(C$, 'enterOverallBValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_fitting", "overall_b_value", this]);
});

Clazz.newMeth(C$, 'enterRefSpace$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "ref_space", this]);
});

Clazz.newMeth(C$, 'enterRefProtocol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting", "ref_protocol", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em3dFittingListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_3d_fitting_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "id", this]);
});

Clazz.newMeth(C$, 'enter_3dFittingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "3d_fitting_id", this]);
});

Clazz.newMeth(C$, 'enterPdbEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "pdb_entry_id", this]);
});

Clazz.newMeth(C$, 'enterPdbChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "pdb_chain_id", this]);
});

Clazz.newMeth(C$, 'enterPdbChainResidueRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "pdb_chain_residue_range", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_fitting_list", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmHelicalEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_helical_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "details", this]);
});

Clazz.newMeth(C$, 'enterDyad$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "dyad", this]);
});

Clazz.newMeth(C$, 'enterAxialSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "axial_symmetry", this]);
});

Clazz.newMeth(C$, 'enterAngularRotationPerSubunit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_helical_entity", "angular_rotation_per_subunit", this]);
});

Clazz.newMeth(C$, 'enterAxialRisePerSubunit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_helical_entity", "axial_rise_per_subunit", this]);
});

Clazz.newMeth(C$, 'enterHand$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_helical_entity", "hand", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmExperimentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_experiment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "id", this]);
});

Clazz.newMeth(C$, 'enterReconstructionMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "reconstruction_method", this]);
});

Clazz.newMeth(C$, 'enterAggregationState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "aggregation_state", this]);
});

Clazz.newMeth(C$, 'enterSpecimenType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "specimen_type", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_experiment", "entity_assembly_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSingleParticleEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_single_particle_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_single_particle_entity", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_single_particle_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterSymmetryType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_single_particle_entity", "symmetry_type", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_single_particle_entity", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterPointSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_single_particle_entity", "point_symmetry", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmAdminBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_admin", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCurrentStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "current_status", this]);
});

Clazz.newMeth(C$, 'enterDepositionDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "deposition_date", this]);
});

Clazz.newMeth(C$, 'enterDepositionSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "deposition_site", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "details", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterLastUpdate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "last_update", this]);
});

Clazz.newMeth(C$, 'enterMapReleaseDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "map_release_date", this]);
});

Clazz.newMeth(C$, 'enterMapHoldDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "map_hold_date", this]);
});

Clazz.newMeth(C$, 'enterHeaderReleaseDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "header_release_date", this]);
});

Clazz.newMeth(C$, 'enterObsoletedDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "obsoleted_date", this]);
});

Clazz.newMeth(C$, 'enterReplaceExistingEntryFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "replace_existing_entry_flag", this]);
});

Clazz.newMeth(C$, 'enterTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_admin", "title", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmAuthorListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_author_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAuthor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_author_list", "author", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_author_list", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDbReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_db_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAccessCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference", "access_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference", "id", this]);
});

Clazz.newMeth(C$, 'enterRelationship$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference", "relationship", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDbReferenceAuxiliaryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_db_reference_auxiliary", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference_auxiliary", "id", this]);
});

Clazz.newMeth(C$, 'enterLink$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference_auxiliary", "link", this]);
});

Clazz.newMeth(C$, 'enterLinkType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_db_reference_auxiliary", "link_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDepuiBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_depui", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepositorHoldInstructions$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "depositor_hold_instructions", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterMacromoleculeDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "macromolecule_description", this]);
});

Clazz.newMeth(C$, 'enterObsoleteInstructions$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "obsolete_instructions", this]);
});

Clazz.newMeth(C$, 'enterSameAuthorsAsPdb$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "same_authors_as_pdb", this]);
});

Clazz.newMeth(C$, 'enterSameTitleAsPdb$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depui", "same_title_as_pdb", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmObsoleteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_obsolete", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_obsolete", "date", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_obsolete", "details", this]);
});

Clazz.newMeth(C$, 'enterEntry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_obsolete", "entry", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_obsolete", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSupersedeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_supersede", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_supersede", "date", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_supersede", "details", this]);
});

Clazz.newMeth(C$, 'enterEntry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_supersede", "entry", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_supersede", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEntityAssemblyMolwtBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_entity_assembly_molwt", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_molwt", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentalFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_molwt", "experimental_flag", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_molwt", "id", this]);
});

Clazz.newMeth(C$, 'enterUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_molwt", "units", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_entity_assembly_molwt", "value", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_molwt", "method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEntityAssemblyNaturalsourceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_entity_assembly_naturalsource", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "cell", this]);
});

Clazz.newMeth(C$, 'enterCellularLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "cellular_location", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "id", this]);
});

Clazz.newMeth(C$, 'enterNcbiTaxId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "ncbi_tax_id", this]);
});

Clazz.newMeth(C$, 'enterOrganism$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "organism", this]);
});

Clazz.newMeth(C$, 'enterOrganelle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "organelle", this]);
});

Clazz.newMeth(C$, 'enterOrgan$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "organ", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "strain", this]);
});

Clazz.newMeth(C$, 'enterTissue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_naturalsource", "tissue", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEntityAssemblyRecombinantBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_entity_assembly_recombinant", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "cell", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "id", this]);
});

Clazz.newMeth(C$, 'enterNcbiTaxId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_entity_assembly_recombinant", "ncbi_tax_id", this]);
});

Clazz.newMeth(C$, 'enterOrganism$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "organism", this]);
});

Clazz.newMeth(C$, 'enterPlasmid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "plasmid", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_entity_assembly_recombinant", "strain", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmVirusNaturalHostBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_virus_natural_host", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_natural_host", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_natural_host", "id", this]);
});

Clazz.newMeth(C$, 'enterNcbiTaxId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_virus_natural_host", "ncbi_tax_id", this]);
});

Clazz.newMeth(C$, 'enterOrganism$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_natural_host", "organism", this]);
});

Clazz.newMeth(C$, 'enterStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_natural_host", "strain", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmVirusShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_virus_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiameter$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_virus_shell", "diameter", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_shell", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_shell", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_virus_shell", "name", this]);
});

Clazz.newMeth(C$, 'enterTriangulation$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_virus_shell", "triangulation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSpecimenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_specimen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_specimen", "concentration", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "details", this]);
});

Clazz.newMeth(C$, 'enterEmbeddingApplied$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "embedding_applied", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "id", this]);
});

Clazz.newMeth(C$, 'enterShadowingApplied$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "shadowing_applied", this]);
});

Clazz.newMeth(C$, 'enterStainingApplied$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "staining_applied", this]);
});

Clazz.newMeth(C$, 'enterVitrificationApplied$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_specimen", "vitrification_applied", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEmbeddingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_embedding", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_embedding", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_embedding", "id", this]);
});

Clazz.newMeth(C$, 'enterMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_embedding", "material", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_embedding", "specimen_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmFiducialMarkersBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_fiducial_markers", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiameter$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_fiducial_markers", "diameter", this]);
});

Clazz.newMeth(C$, 'enterEmTomographySpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fiducial_markers", "em_tomography_specimen_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fiducial_markers", "id", this]);
});

Clazz.newMeth(C$, 'enterManufacturer$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fiducial_markers", "manufacturer", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmFocusedIonBeamBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_focused_ion_beam", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCurrent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_focused_ion_beam", "current", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_focused_ion_beam", "details", this]);
});

Clazz.newMeth(C$, 'enterDoseRate$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "dose_rate", this]);
});

Clazz.newMeth(C$, 'enterDuration$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "duration", this]);
});

Clazz.newMeth(C$, 'enterEmTomographySpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_focused_ion_beam", "em_tomography_specimen_id", this]);
});

Clazz.newMeth(C$, 'enterFinalThickness$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "final_thickness", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_focused_ion_beam", "id", this]);
});

Clazz.newMeth(C$, 'enterInitialThickness$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "initial_thickness", this]);
});

Clazz.newMeth(C$, 'enterInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_focused_ion_beam", "instrument", this]);
});

Clazz.newMeth(C$, 'enterIon$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_focused_ion_beam", "ion", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "temperature", this]);
});

Clazz.newMeth(C$, 'enterVoltage$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_focused_ion_beam", "voltage", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmGridPretreatmentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_grid_pretreatment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtmosphere$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_grid_pretreatment", "atmosphere", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_grid_pretreatment", "id", this]);
});

Clazz.newMeth(C$, 'enterPressure$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_grid_pretreatment", "pressure", this]);
});

Clazz.newMeth(C$, 'enterSampleSupportId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_grid_pretreatment", "sample_support_id", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_grid_pretreatment", "time", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_grid_pretreatment", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmUltramicrotomyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_ultramicrotomy", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ultramicrotomy", "details", this]);
});

Clazz.newMeth(C$, 'enterEmTomographySpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ultramicrotomy", "em_tomography_specimen_id", this]);
});

Clazz.newMeth(C$, 'enterFinalThickness$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_ultramicrotomy", "final_thickness", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ultramicrotomy", "id", this]);
});

Clazz.newMeth(C$, 'enterInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ultramicrotomy", "instrument", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_ultramicrotomy", "temperature", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmHighPressureFreezingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_high_pressure_freezing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_high_pressure_freezing", "details", this]);
});

Clazz.newMeth(C$, 'enterEmTomographySpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_high_pressure_freezing", "em_tomography_specimen_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_high_pressure_freezing", "id", this]);
});

Clazz.newMeth(C$, 'enterInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_high_pressure_freezing", "instrument", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmShadowingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_shadowing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_shadowing", "angle", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_shadowing", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_shadowing", "id", this]);
});

Clazz.newMeth(C$, 'enterMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_shadowing", "material", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_shadowing", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterThickness$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_shadowing", "thickness", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmTomographySpecimenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_tomography_specimen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCryoProtectant$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "cryo_protectant", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "details", this]);
});

Clazz.newMeth(C$, 'enterFiducialMarkers$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "fiducial_markers", this]);
});

Clazz.newMeth(C$, 'enterHighPressureFreezing$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "high_pressure_freezing", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "id", this]);
});

Clazz.newMeth(C$, 'enterSectioning$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "sectioning", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography_specimen", "specimen_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmCrystalFormationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_crystal_formation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtmosphere$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "atmosphere", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "id", this]);
});

Clazz.newMeth(C$, 'enterInstrument$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "instrument", this]);
});

Clazz.newMeth(C$, 'enterLipidMixture$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "lipid_mixture", this]);
});

Clazz.newMeth(C$, 'enterLipidProteinRatio$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_crystal_formation", "lipid_protein_ratio", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterTemperature$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_crystal_formation", "temperature", this]);
});

Clazz.newMeth(C$, 'enterTime$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_crystal_formation", "time", this]);
});

Clazz.newMeth(C$, 'enterTimeUnit$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_crystal_formation", "time_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmStainingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_staining", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_staining", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_staining", "id", this]);
});

Clazz.newMeth(C$, 'enterMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_staining", "material", this]);
});

Clazz.newMeth(C$, 'enterSpecimenId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_staining", "specimen_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_staining", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSupportFilmBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_support_film", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_support_film", "id", this]);
});

Clazz.newMeth(C$, 'enterMaterial$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_support_film", "material", this]);
});

Clazz.newMeth(C$, 'enterSampleSupportId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_support_film", "sample_support_id", this]);
});

Clazz.newMeth(C$, 'enterThickness$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_support_film", "thickness", this]);
});

Clazz.newMeth(C$, 'enterTopology$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_support_film", "topology", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmBufferComponentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_buffer_component", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBufferId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer_component", "buffer_id", this]);
});

Clazz.newMeth(C$, 'enterConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_buffer_component", "concentration", this]);
});

Clazz.newMeth(C$, 'enterConcentrationUnits$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer_component", "concentration_units", this]);
});

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer_component", "formula", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer_component", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_buffer_component", "name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDiffractionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_diffraction", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCameraLength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction", "camera_length", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction", "id", this]);
});

Clazz.newMeth(C$, 'enterImagingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction", "imaging_id", this]);
});

Clazz.newMeth(C$, 'enterTiltAngleList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction", "tilt_angle_list", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDiffractionShellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_diffraction_shell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEmDiffractionStatsId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_shell", "em_diffraction_stats_id", this]);
});

Clazz.newMeth(C$, 'enterFourierSpaceCoverage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_shell", "fourier_space_coverage", this]);
});

Clazz.newMeth(C$, 'enterHighResolution$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_shell", "high_resolution", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_shell", "id", this]);
});

Clazz.newMeth(C$, 'enterLowResolution$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_shell", "low_resolution", this]);
});

Clazz.newMeth(C$, 'enterMultiplicity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_shell", "multiplicity", this]);
});

Clazz.newMeth(C$, 'enterNumStructureFactors$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_diffraction_shell", "num_structure_factors", this]);
});

Clazz.newMeth(C$, 'enterPhaseResidual$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_shell", "phase_residual", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDiffractionStatsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_diffraction_stats", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_stats", "details", this]);
});

Clazz.newMeth(C$, 'enterFourierSpaceCoverage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "fourier_space_coverage", this]);
});

Clazz.newMeth(C$, 'enterHighResolution$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "high_resolution", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_stats", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_stats", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterNumIntensitiesMeasured$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_diffraction_stats", "num_intensities_measured", this]);
});

Clazz.newMeth(C$, 'enterNumStructureFactors$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_diffraction_stats", "num_structure_factors", this]);
});

Clazz.newMeth(C$, 'enterOverallPhaseError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "overall_phase_error", this]);
});

Clazz.newMeth(C$, 'enterOverallPhaseResidual$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "overall_phase_residual", this]);
});

Clazz.newMeth(C$, 'enterPhaseErrorRejectionCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_diffraction_stats", "phase_error_rejection_criteria", this]);
});

Clazz.newMeth(C$, 'enterRMerge$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "r_merge", this]);
});

Clazz.newMeth(C$, 'enterRSym$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_diffraction_stats", "r_sym", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmTomographyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_tomography", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAxis1AngleIncrement$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis1_angle_increment", this]);
});

Clazz.newMeth(C$, 'enterAxis1MaxAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis1_max_angle", this]);
});

Clazz.newMeth(C$, 'enterAxis1MinAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis1_min_angle", this]);
});

Clazz.newMeth(C$, 'enterAxis2AngleIncrement$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis2_angle_increment", this]);
});

Clazz.newMeth(C$, 'enterAxis2MaxAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis2_max_angle", this]);
});

Clazz.newMeth(C$, 'enterAxis2MinAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "axis2_min_angle", this]);
});

Clazz.newMeth(C$, 'enterDualTiltAxisRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_tomography", "dual_tilt_axis_rotation", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography", "id", this]);
});

Clazz.newMeth(C$, 'enterImagingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_tomography", "imaging_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmImageRecordingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_image_recording", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAverageExposureTime$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_image_recording", "average_exposure_time", this]);
});

Clazz.newMeth(C$, 'enterAvgElectronDosePerImage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_image_recording", "avg_electron_dose_per_image", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_recording", "details", this]);
});

Clazz.newMeth(C$, 'enterDetectorMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_recording", "detector_mode", this]);
});

Clazz.newMeth(C$, 'enterFilmOrDetectorModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_recording", "film_or_detector_model", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_recording", "id", this]);
});

Clazz.newMeth(C$, 'enterImagingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_recording", "imaging_id", this]);
});

Clazz.newMeth(C$, 'enterNumDiffractionImages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_recording", "num_diffraction_images", this]);
});

Clazz.newMeth(C$, 'enterNumGridsImaged$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_recording", "num_grids_imaged", this]);
});

Clazz.newMeth(C$, 'enterNumRealImages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_image_recording", "num_real_images", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmImagingOpticsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_imaging_optics", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterChrAberrationCorrector$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "chr_aberration_corrector", this]);
});

Clazz.newMeth(C$, 'enterEnergyfilterLower$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "energyfilter_lower", this]);
});

Clazz.newMeth(C$, 'enterEnergyfilterSlitWidth$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_imaging_optics", "energyfilter_slit_width", this]);
});

Clazz.newMeth(C$, 'enterEnergyfilterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "energyfilter_name", this]);
});

Clazz.newMeth(C$, 'enterEnergyfilterUpper$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "energyfilter_upper", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "id", this]);
});

Clazz.newMeth(C$, 'enterImagingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "imaging_id", this]);
});

Clazz.newMeth(C$, 'enterPhasePlate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "phase_plate", this]);
});

Clazz.newMeth(C$, 'enterSphAberrationCorrector$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_imaging_optics", "sph_aberration_corrector", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmFinalClassificationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_final_classification", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAvgNumImagesPerClass$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_final_classification", "avg_num_images_per_class", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_final_classification", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_final_classification", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_final_classification", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterNumClasses$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_final_classification", "num_classes", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_final_classification", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmStartModelBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_start_model", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "details", this]);
});

Clazz.newMeth(C$, 'enterEmdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "emdb_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterInsilicoModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "insilico_model", this]);
});

Clazz.newMeth(C$, 'enterOrthogonalTiltAngle1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_start_model", "orthogonal_tilt_angle1", this]);
});

Clazz.newMeth(C$, 'enterOrthogonalTiltAngle2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_start_model", "orthogonal_tilt_angle2", this]);
});

Clazz.newMeth(C$, 'enterOrthogonalTiltNumImages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_start_model", "orthogonal_tilt_num_images", this]);
});

Clazz.newMeth(C$, 'enterOther$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "other", this]);
});

Clazz.newMeth(C$, 'enterPdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "pdb_id", this]);
});

Clazz.newMeth(C$, 'enterRandomConicalTiltAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_start_model", "random_conical_tilt_angle", this]);
});

Clazz.newMeth(C$, 'enterRandomConicalTiltNumImages$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_start_model", "random_conical_tilt_num_images", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_start_model", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmSoftwareBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_software", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "category", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterFittingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "fitting_id", this]);
});

Clazz.newMeth(C$, 'enterImagingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "imaging_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "name", this]);
});

Clazz.newMeth(C$, 'enterVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_software", "version", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmEulerAngleAssignmentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_euler_angle_assignment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "order", this]);
});

Clazz.newMeth(C$, 'enterProjMatchingAngularSampling$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_euler_angle_assignment", "proj_matching_angular_sampling", this]);
});

Clazz.newMeth(C$, 'enterProjMatchingMeritFunction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "proj_matching_merit_function", this]);
});

Clazz.newMeth(C$, 'enterProjMatchingNumProjections$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_euler_angle_assignment", "proj_matching_num_projections", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_euler_angle_assignment", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmCtfCorrectionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_ctf_correction", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAmplitudeCorrection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "amplitude_correction", this]);
});

Clazz.newMeth(C$, 'enterAmplitudeCorrectionFactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_ctf_correction", "amplitude_correction_factor", this]);
});

Clazz.newMeth(C$, 'enterAmplitudeCorrectionSpace$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "amplitude_correction_space", this]);
});

Clazz.newMeth(C$, 'enterCorrectionOperation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "correction_operation", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "details", this]);
});

Clazz.newMeth(C$, 'enterEmImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "em_image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "id", this]);
});

Clazz.newMeth(C$, 'enterPhaseReversal$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "phase_reversal", this]);
});

Clazz.newMeth(C$, 'enterPhaseReversalAnisotropic$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "phase_reversal_anisotropic", this]);
});

Clazz.newMeth(C$, 'enterPhaseReversalCorrectionSpace$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "phase_reversal_correction_space", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_ctf_correction", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmVolumeSelectionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_volume_selection", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_volume_selection", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_volume_selection", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_volume_selection", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_volume_selection", "method", this]);
});

Clazz.newMeth(C$, 'enterNumTomograms$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_volume_selection", "num_tomograms", this]);
});

Clazz.newMeth(C$, 'enterNumVolumesExtracted$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_volume_selection", "num_volumes_extracted", this]);
});

Clazz.newMeth(C$, 'enterReferenceModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_volume_selection", "reference_model", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em3dCrystalEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_3d_crystal_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "angle_alpha", this]);
});

Clazz.newMeth(C$, 'enterAngleBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "angle_beta", this]);
});

Clazz.newMeth(C$, 'enterAngleGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "angle_gamma", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_crystal_entity", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_crystal_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterLengthA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "length_a", this]);
});

Clazz.newMeth(C$, 'enterLengthB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "length_b", this]);
});

Clazz.newMeth(C$, 'enterLengthC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_3d_crystal_entity", "length_c", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_3d_crystal_entity", "space_group_name", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_3d_crystal_entity", "space_group_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Em2dCrystalEntityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_2d_crystal_entity", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAngleGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_2d_crystal_entity", "angle_gamma", this]);
});

Clazz.newMeth(C$, 'enterCSamplingLength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_2d_crystal_entity", "c_sampling_length", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_crystal_entity", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_crystal_entity", "id", this]);
});

Clazz.newMeth(C$, 'enterEntityAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_crystal_entity", "entity_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterLengthA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_2d_crystal_entity", "length_a", this]);
});

Clazz.newMeth(C$, 'enterLengthB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_2d_crystal_entity", "length_b", this]);
});

Clazz.newMeth(C$, 'enterLengthC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_2d_crystal_entity", "length_c", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupNameH_M$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_2d_crystal_entity", "space_group_name_H-M", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmImageProcessingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_image_processing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_processing", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_processing", "id", this]);
});

Clazz.newMeth(C$, 'enterImageRecordingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_image_processing", "image_recording_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmParticleSelectionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_particle_selection", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_particle_selection", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_particle_selection", "id", this]);
});

Clazz.newMeth(C$, 'enterImageProcessingId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_particle_selection", "image_processing_id", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_particle_selection", "method", this]);
});

Clazz.newMeth(C$, 'enterNumParticlesSelected$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_particle_selection", "num_particles_selected", this]);
});

Clazz.newMeth(C$, 'enterReferenceModel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_particle_selection", "reference_model", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmMapBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_map", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAnnotationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "annotation_details", this]);
});

Clazz.newMeth(C$, 'enterAxisOrderFast$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "axis_order_fast", this]);
});

Clazz.newMeth(C$, 'enterAxisOrderMedium$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "axis_order_medium", this]);
});

Clazz.newMeth(C$, 'enterAxisOrderSlow$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "axis_order_slow", this]);
});

Clazz.newMeth(C$, 'enterCellA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_a", this]);
});

Clazz.newMeth(C$, 'enterCellB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_b", this]);
});

Clazz.newMeth(C$, 'enterCellC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_c", this]);
});

Clazz.newMeth(C$, 'enterCellAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_alpha", this]);
});

Clazz.newMeth(C$, 'enterCellBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_beta", this]);
});

Clazz.newMeth(C$, 'enterCellGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "cell_gamma", this]);
});

Clazz.newMeth(C$, 'enterContourLevel$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "contour_level", this]);
});

Clazz.newMeth(C$, 'enterContourLevelSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "contour_level_source", this]);
});

Clazz.newMeth(C$, 'enterDataType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "data_type", this]);
});

Clazz.newMeth(C$, 'enterDimensionsCol$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "dimensions_col", this]);
});

Clazz.newMeth(C$, 'enterDimensionsRow$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "dimensions_row", this]);
});

Clazz.newMeth(C$, 'enterDimensionsSec$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "dimensions_sec", this]);
});

Clazz.newMeth(C$, 'enterEndianType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "endian_type", this]);
});

Clazz.newMeth(C$, 'enterFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "file", this]);
});

Clazz.newMeth(C$, 'enterFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "format", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "id", this]);
});

Clazz.newMeth(C$, 'enterPartition$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "partition", this]);
});

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "label", this]);
});

Clazz.newMeth(C$, 'enterLimitCol$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "limit_col", this]);
});

Clazz.newMeth(C$, 'enterLimitRow$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "limit_row", this]);
});

Clazz.newMeth(C$, 'enterLimitSec$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "limit_sec", this]);
});

Clazz.newMeth(C$, 'enterOriginCol$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "origin_col", this]);
});

Clazz.newMeth(C$, 'enterOriginRow$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "origin_row", this]);
});

Clazz.newMeth(C$, 'enterOriginSec$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "origin_sec", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "pixel_spacing_x", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "pixel_spacing_y", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "pixel_spacing_z", this]);
});

Clazz.newMeth(C$, 'enterSizeKb$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "size_kb", this]);
});

Clazz.newMeth(C$, 'enterSpacingX$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "spacing_x", this]);
});

Clazz.newMeth(C$, 'enterSpacingY$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "spacing_y", this]);
});

Clazz.newMeth(C$, 'enterSpacingZ$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["em_map", "spacing_z", this]);
});

Clazz.newMeth(C$, 'enterStatisticsAverage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "statistics_average", this]);
});

Clazz.newMeth(C$, 'enterStatisticsMaximum$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "statistics_maximum", this]);
});

Clazz.newMeth(C$, 'enterStatisticsMinimum$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "statistics_minimum", this]);
});

Clazz.newMeth(C$, 'enterStatisticsStd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map", "statistics_std", this]);
});

Clazz.newMeth(C$, 'enterSymmetrySpaceGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "symmetry_space_group", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmFscCurveBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_fsc_curve", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fsc_curve", "details", this]);
});

Clazz.newMeth(C$, 'enterFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fsc_curve", "file", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_fsc_curve", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmInterpretFigureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_interpret_figure", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_interpret_figure", "details", this]);
});

Clazz.newMeth(C$, 'enterFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_interpret_figure", "file", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_interpret_figure", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmLayerLinesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_layer_lines", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines", "details", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines", "file", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmStructureFactorsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_structure_factors", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors", "details", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterFile$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors", "file", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors", "id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depositor_info", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterEmMethodSelection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depositor_info", "em_method_selection", this]);
});

Clazz.newMeth(C$, 'enterMolecularDescriptionFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_depositor_info", "molecular_description_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmMapDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_map_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterMapType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "map_type", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$, 'enterUploadFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "upload_format", this]);
});

Clazz.newMeth(C$, 'enterContourLevel$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map_depositor_info", "contour_level", this]);
});

Clazz.newMeth(C$, 'enterAnnotationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_map_depositor_info", "annotation_details", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map_depositor_info", "pixel_spacing_x", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map_depositor_info", "pixel_spacing_y", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_map_depositor_info", "pixel_spacing_z", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmMaskDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_mask_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_mask_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_mask_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$, 'enterUploadFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_mask_depositor_info", "upload_format", this]);
});

Clazz.newMeth(C$, 'enterContourLevel$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_mask_depositor_info", "contour_level", this]);
});

Clazz.newMeth(C$, 'enterAnnotationDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_mask_depositor_info", "annotation_details", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_mask_depositor_info", "pixel_spacing_x", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_mask_depositor_info", "pixel_spacing_y", this]);
});

Clazz.newMeth(C$, 'enterPixelSpacingZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["em_mask_depositor_info", "pixel_spacing_z", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmFigureDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_figure_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_figure_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_figure_depositor_info", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_figure_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_figure_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmLayerLinesDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_layer_lines_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines_depositor_info", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_layer_lines_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "EmStructureFactorsDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["em_structure_factors_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterExperimentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors_depositor_info", "experiment_id", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["em_structure_factors_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSeqMapDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_seq_map_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_seq_map_depositor_info", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_seq_map_depositor_info", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_seq_map_depositor_info", "one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterOneLetterCodeMod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_seq_map_depositor_info", "one_letter_code_mod", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterAltCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "alt_comp_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "name", this]);
});

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "formula", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "type", this]);
});

Clazz.newMeth(C$, 'enterDescriptor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "descriptor", this]);
});

Clazz.newMeth(C$, 'enterDescriptorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "descriptor_type", this]);
});

Clazz.newMeth(C$, 'enterInDictionaryFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "in_dictionary_flag", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterRefId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "ref_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterDbAlignBeg$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_align_beg", this]);
});

Clazz.newMeth(C$, 'enterDbAlignEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_align_end", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "details", this]);
});

Clazz.newMeth(C$, 'enterDbAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_accession", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDbSeqOneLetterCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "db_seq_one_letter_code", this]);
});

Clazz.newMeth(C$, 'enterSeqAlignBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "seq_align_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqAlignEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_depositor_info", "seq_align_end", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructRefSeqDifDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ref_seq_dif_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterRefId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "ref_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterDbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "db_mon_id", this]);
});

Clazz.newMeth(C$, 'enterDbSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "db_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "details", this]);
});

Clazz.newMeth(C$, 'enterAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "auth_mon_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDbAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "db_accession", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "db_code", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "db_name", this]);
});

Clazz.newMeth(C$, 'enterAnnotation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ref_seq_dif_depositor_info", "annotation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyPropDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_prop_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop_depositor_info", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop_depositor_info", "type", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop_depositor_info", "value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_prop_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "details", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterMethodDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "method_details", this]);
});

Clazz.newMeth(C$, 'enterOligomericDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "oligomeric_details", this]);
});

Clazz.newMeth(C$, 'enterOligomericCount$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "oligomeric_count", this]);
});

Clazz.newMeth(C$, 'enterMatrixFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "matrix_flag", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyGenDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_gen_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterAsymIdList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "asym_id_list", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterOperExpression$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "oper_expression", this]);
});

Clazz.newMeth(C$, 'enterFullMatrices$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "full_matrices", this]);
});

Clazz.newMeth(C$, 'enterSymmetryOperation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "symmetry_operation", this]);
});

Clazz.newMeth(C$, 'enterAtUnitMatrix$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "at_unit_matrix", this]);
});

Clazz.newMeth(C$, 'enterChainIdList$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "chain_id_list", this]);
});

Clazz.newMeth(C$, 'enterAllChains$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "all_chains", this]);
});

Clazz.newMeth(C$, 'enterHelicalRotation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "helical_rotation", this]);
});

Clazz.newMeth(C$, 'enterHelicalRise$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_assembly_gen_depositor_info", "helical_rise", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructOperListDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_oper_list_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "type", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "name", this]);
});

Clazz.newMeth(C$, 'enterSymmetryOperation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "symmetry_operation", this]);
});

Clazz.newMeth(C$, 'enterMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "vector[1]", this]);
});

Clazz.newMeth(C$, 'enterVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "vector[2]", this]);
});

Clazz.newMeth(C$, 'enterVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_oper_list_depositor_info", "vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPointSymmetryDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_point_symmetry_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry_depositor_info", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterSchoenfliesSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry_depositor_info", "Schoenflies_symbol", this]);
});

Clazz.newMeth(C$, 'enterCircularSymmetry$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_point_symmetry_depositor_info", "circular_symmetry", this]);
});

Clazz.newMeth(C$, 'enterH_MNotation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry_depositor_info", "H-M_notation", this]);
});

Clazz.newMeth(C$, 'enterStatusFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_point_symmetry_depositor_info", "status_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxHelicalSymmetryDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_helical_symmetry_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNumberOfOperations$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "number_of_operations", this]);
});

Clazz.newMeth(C$, 'enterRotationPerNSubunits$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "rotation_per_n_subunits", this]);
});

Clazz.newMeth(C$, 'enterRisePerNSubunits$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "rise_per_n_subunits", this]);
});

Clazz.newMeth(C$, 'enterNSubunitsDivisor$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "n_subunits_divisor", this]);
});

Clazz.newMeth(C$, 'enterDyadAxis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "dyad_axis", this]);
});

Clazz.newMeth(C$, 'enterCircularSymmetry$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "circular_symmetry", this]);
});

Clazz.newMeth(C$, 'enterStatusFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_helical_symmetry_depositor_info", "status_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyAuthEvidenceDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_auth_evidence_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence_depositor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence_depositor_info", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentalSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence_depositor_info", "experimental_support", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSolventAtomSiteMappingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_solvent_atom_site_mapping", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPreAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPrePDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPreAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "auth_atom_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "auth_alt_id", this]);
});

Clazz.newMeth(C$, 'enterOccupancy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "occupancy", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterPreCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterPreCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterPreCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "pre_Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "symmetry", this]);
});

Clazz.newMeth(C$, 'enterSymmetryAsXyz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_atom_site_mapping", "symmetry_as_xyz", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMoleculeFeaturesDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_molecule_features_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features_depositor_info", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features_depositor_info", "class", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features_depositor_info", "type", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features_depositor_info", "name", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_molecule_features_depositor_info", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompInstanceDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_instance_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterPDBInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "PDB_ins_code", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterInPolymerFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "in_polymer_flag", this]);
});

Clazz.newMeth(C$, 'enterAuthorProvidedFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "author_provided_flag", this]);
});

Clazz.newMeth(C$, 'enterFormula$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_instance_depositor_info", "formula", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiStatusFlagsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_status_flags", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepDatasetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "dep_dataset_id", this]);
});

Clazz.newMeth(C$, 'enterPrimaryCitationStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "primary_citation_status", this]);
});

Clazz.newMeth(C$, 'enterCorrespondingAuthorStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "corresponding_author_status", this]);
});

Clazz.newMeth(C$, 'enterReferenceCitationStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "reference_citation_status", this]);
});

Clazz.newMeth(C$, 'enterIsGrantFunded$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "is_grant_funded", this]);
});

Clazz.newMeth(C$, 'enterHasNcsData$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_ncs_data", this]);
});

Clazz.newMeth(C$, 'enterPredictionTarget$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "prediction_target", this]);
});

Clazz.newMeth(C$, 'enterHasHelicalSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_helical_symmetry", this]);
});

Clazz.newMeth(C$, 'enterHasPointSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_point_symmetry", this]);
});

Clazz.newMeth(C$, 'enterHasCyclicSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_cyclic_symmetry", this]);
});

Clazz.newMeth(C$, 'enterHasAcceptedTermsAndConditions$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_accepted_terms_and_conditions", this]);
});

Clazz.newMeth(C$, 'enterHasViewedValidationReport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_viewed_validation_report", this]);
});

Clazz.newMeth(C$, 'enterValidatedModelFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "validated_model_file_name", this]);
});

Clazz.newMeth(C$, 'enterMergePriorModelFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "merge_prior_model_file_name", this]);
});

Clazz.newMeth(C$, 'enterMergeReplaceModelFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "merge_replace_model_file_name", this]);
});

Clazz.newMeth(C$, 'enterMergeOutputModelFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "merge_output_model_file_name", this]);
});

Clazz.newMeth(C$, 'enterIsLigandProcessingComplete$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "is_ligand_processing_complete", this]);
});

Clazz.newMeth(C$, 'enterSampleXyzSequenceAlignmentsValid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "sample_xyz_sequence_alignments_valid", this]);
});

Clazz.newMeth(C$, 'enterHasSasData$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "has_sas_data", this]);
});

Clazz.newMeth(C$, 'enterIsSasDeposited$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "is_sas_deposited", this]);
});

Clazz.newMeth(C$, 'enterUseSasRefine$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "use_sas_refine", this]);
});

Clazz.newMeth(C$, 'enterMergedFail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_status_flags", "merged_fail", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiUploadBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_upload", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_upload", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterFileContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "file_content_type", this]);
});

Clazz.newMeth(C$, 'enterFileType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "file_type", this]);
});

Clazz.newMeth(C$, 'enterFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "file_name", this]);
});

Clazz.newMeth(C$, 'enterFileSize$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_upload", "file_size", this]);
});

Clazz.newMeth(C$, 'enterValidFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "valid_flag", this]);
});

Clazz.newMeth(C$, 'enterDiagnosticMessage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "diagnostic_message", this]);
});

Clazz.newMeth(C$, 'enterSequenceAlign$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_upload", "sequence_align", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiValidationStatusFlagsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_validation_status_flags", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepDatasetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "dep_dataset_id", this]);
});

Clazz.newMeth(C$, 'enterResidualBFactorsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "residual_B_factors_flag", this]);
});

Clazz.newMeth(C$, 'enterOccupancyOutliersLow$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "occupancy_outliers_low", this]);
});

Clazz.newMeth(C$, 'enterOccupancyOutliersHigh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "occupancy_outliers_high", this]);
});

Clazz.newMeth(C$, 'enterAdpOutliersLow$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "adp_outliers_low", this]);
});

Clazz.newMeth(C$, 'enterSolventOutliers$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "solvent_outliers", this]);
});

Clazz.newMeth(C$, 'enterTlsNoAniso$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "tls_no_aniso", this]);
});

Clazz.newMeth(C$, 'enterAdpOutliersZero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_validation_status_flags", "adp_outliers_zero", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompUploadDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_upload_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_upload_depositor_info", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_upload_depositor_info", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterUploadFileType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_upload_depositor_info", "upload_file_type", this]);
});

Clazz.newMeth(C$, 'enterUploadFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_upload_depositor_info", "upload_file_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiEntityStatusFlagsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_entity_status_flags", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepDatasetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_status_flags", "dep_dataset_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_status_flags", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterHasMutation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_status_flags", "has_mutation", this]);
});

Clazz.newMeth(C$, 'enterSampleXyzSequenceAlignmentsValid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_status_flags", "sample_xyz_sequence_alignments_valid", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiEntityFeaturesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_entity_features", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepDatasetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_features", "dep_dataset_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_features", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entity_features", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepositionMessageInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_deposition_message_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_deposition_message_info", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDepositionDataSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "deposition_data_set_id", this]);
});

Clazz.newMeth(C$, 'enterMessageId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "message_id", this]);
});

Clazz.newMeth(C$, 'enterTimestamp$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "timestamp", this]);
});

Clazz.newMeth(C$, 'enterSender$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "sender", this]);
});

Clazz.newMeth(C$, 'enterContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "content_type", this]);
});

Clazz.newMeth(C$, 'enterContentValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "content_value", this]);
});

Clazz.newMeth(C$, 'enterParentMessageId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "parent_message_id", this]);
});

Clazz.newMeth(C$, 'enterMessageSubject$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "message_subject", this]);
});

Clazz.newMeth(C$, 'enterMessageText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "message_text", this]);
});

Clazz.newMeth(C$, 'enterMessageType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "message_type", this]);
});

Clazz.newMeth(C$, 'enterSendStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_info", "send_status", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepositionMessageFileReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_deposition_message_file_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDepositionDataSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "deposition_data_set_id", this]);
});

Clazz.newMeth(C$, 'enterMessageId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "message_id", this]);
});

Clazz.newMeth(C$, 'enterContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "content_type", this]);
});

Clazz.newMeth(C$, 'enterContentFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "content_format", this]);
});

Clazz.newMeth(C$, 'enterPartitionNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "partition_number", this]);
});

Clazz.newMeth(C$, 'enterVersionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "version_id", this]);
});

Clazz.newMeth(C$, 'enterStorageType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposition_message_file_reference", "storage_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepuiEntryDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_depui_entry_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDepDatasetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "dep_dataset_id", this]);
});

Clazz.newMeth(C$, 'enterWwpdbSiteId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "wwpdb_site_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentalMethods$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "experimental_methods", this]);
});

Clazz.newMeth(C$, 'enterRequestedAccessionTypes$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "requested_accession_types", this]);
});

Clazz.newMeth(C$, 'enterValidatedContactEmail$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "validated_contact_email", this]);
});

Clazz.newMeth(C$, 'enterCountry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "country", this]);
});

Clazz.newMeth(C$, 'enterStructuralGenomicsFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "structural_genomics_flag", this]);
});

Clazz.newMeth(C$, 'enterRelatedDatabaseName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "related_database_name", this]);
});

Clazz.newMeth(C$, 'enterRelatedDatabaseCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "related_database_code", this]);
});

Clazz.newMeth(C$, 'enterReplacePdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_depui_entry_details", "replace_pdb_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDataProcessingStatusBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_data_processing_status", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterTaskName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_status", "task_name", this]);
});

Clazz.newMeth(C$, 'enterStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_status", "status", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityInstanceFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_instance_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "details", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "auth_seq_num", this]);
});

Clazz.newMeth(C$, 'enterSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_instance_feature", "seq_num", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_instance_feature", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_instance_feature", "ordinal", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntitySrcGenDepositorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_src_gen_depositor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSrcId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "src_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "seq_type", this]);
});

Clazz.newMeth(C$, 'enterBegSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "beg_seq_num", this]);
});

Clazz.newMeth(C$, 'enterEndSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "end_seq_num", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcGene$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "gene_src_gene", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcScientificName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "gene_src_scientific_name", this]);
});

Clazz.newMeth(C$, 'enterHostOrgGene$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "host_org_gene", this]);
});

Clazz.newMeth(C$, 'enterHostOrgScientificName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "host_org_scientific_name", this]);
});

Clazz.newMeth(C$, 'enterHostOrgStrain$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "host_org_strain", this]);
});

Clazz.newMeth(C$, 'enterGeneSrcNcbiTaxonomyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "gene_src_ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterHostOrgNcbiTaxonomyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "host_org_ncbi_taxonomy_id", this]);
});

Clazz.newMeth(C$, 'enterHostOrgVectorType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "host_org_vector_type", this]);
});

Clazz.newMeth(C$, 'enterPlasmidName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_src_gen_depositor_info", "plasmid_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model", "id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model", "comp_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "model_id", this]);
});

Clazz.newMeth(C$, 'enterCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "charge", this]);
});

Clazz.newMeth(C$, 'enterModelCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "model_Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterModelCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "model_Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterModelCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "model_Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_atom", "type_symbol", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_bond", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_bond", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_bond", "model_id", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_bond", "value_order", this]);
});

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_model_bond", "ordinal_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_feature", "model_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_feature", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterFeatureValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_feature", "feature_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelDescriptorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_descriptor", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_descriptor", "model_id", this]);
});

Clazz.newMeth(C$, 'enterDescriptor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_descriptor", "descriptor", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_descriptor", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelAuditBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_audit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "model_id", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "date", this]);
});

Clazz.newMeth(C$, 'enterAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "annotator", this]);
});

Clazz.newMeth(C$, 'enterProcessingSite$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "processing_site", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "details", this]);
});

Clazz.newMeth(C$, 'enterActionType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_audit", "action_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompModelReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_model_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_reference", "model_id", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_reference", "db_name", this]);
});

Clazz.newMeth(C$, 'enterDbCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_model_reference", "db_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxViewCategoryGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_view_category_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterViewGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_category_group", "view_group_id", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_category_group", "description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxViewCategoryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_view_category", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterViewGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_category", "view_group_id", this]);
});

Clazz.newMeth(C$, 'enterCategoryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_category", "category_id", this]);
});

Clazz.newMeth(C$, 'enterCategoryViewName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_category", "category_view_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxViewItemBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_view_item", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterItemName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_item", "item_name", this]);
});

Clazz.newMeth(C$, 'enterCategoryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_item", "category_id", this]);
});

Clazz.newMeth(C$, 'enterItemViewName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_item", "item_view_name", this]);
});

Clazz.newMeth(C$, 'enterItemViewMandatoryCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_item", "item_view_mandatory_code", this]);
});

Clazz.newMeth(C$, 'enterItemViewAllowAlternateValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_view_item", "item_view_allow_alternate_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxCoordBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_coord", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coord", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterChainAtomsYP$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coord", "chain_atoms_Y_P", this]);
});

Clazz.newMeth(C$, 'enterHydrogenAtomsYN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coord", "hydrogen_atoms_Y_N", this]);
});

Clazz.newMeth(C$, 'enterSolventAtomsYN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coord", "solvent_atoms_Y_N", this]);
});

Clazz.newMeth(C$, 'enterStructureFactorsYN$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_coord", "structure_factors_Y_N", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConnectBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_connect", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterResName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "res_name", this]);
});

Clazz.newMeth(C$, 'enterHetgroupName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "hetgroup_name", this]);
});

Clazz.newMeth(C$, 'enterFormul$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "formul", this]);
});

Clazz.newMeth(C$, 'enterHetgroupChemicalName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "hetgroup_chemical_name", this]);
});

Clazz.newMeth(C$, 'enterParentResidue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "parent_residue", this]);
});

Clazz.newMeth(C$, 'enterFormalCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_connect", "formal_charge", this]);
});

Clazz.newMeth(C$, 'enterClass1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "class_1", this]);
});

Clazz.newMeth(C$, 'enterClass2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "class_2", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "type", this]);
});

Clazz.newMeth(C$, 'enterStatus$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "status", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "date", this]);
});

Clazz.newMeth(C$, 'enterModifiedDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect", "modified_date", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConnectTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_connect_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterResName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_type", "res_name", this]);
});

Clazz.newMeth(C$, 'enterNdbTokenType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_type", "ndbTokenType", this]);
});

Clazz.newMeth(C$, 'enterModified$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_type", "modified", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConnectModificationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_connect_modification", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterResName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_modification", "res_name", this]);
});

Clazz.newMeth(C$, 'enterModification$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_modification", "modification", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxConnectAtomBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_connect_atom", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterResName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_atom", "res_name", this]);
});

Clazz.newMeth(C$, 'enterAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_atom", "atom_name", this]);
});

Clazz.newMeth(C$, 'enterConnectTo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_atom", "connect_to", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_atom", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_connect_atom", "charge", this]);
});

Clazz.newMeth(C$, 'enterBondType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_connect_atom", "bond_type", this]);
});

Clazz.newMeth(C$, 'enterAlignPos$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_connect_atom", "align_pos", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabasePDBMasterBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_PDB_master", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_PDB_master", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNumRemark$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_remark", this]);
});

Clazz.newMeth(C$, 'enterNumFtnote$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_ftnote", this]);
});

Clazz.newMeth(C$, 'enterNumHet$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_het", this]);
});

Clazz.newMeth(C$, 'enterNumHelix$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_helix", this]);
});

Clazz.newMeth(C$, 'enterNumSheet$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_sheet", this]);
});

Clazz.newMeth(C$, 'enterNumTurn$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_turn", this]);
});

Clazz.newMeth(C$, 'enterNumSite$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_site", this]);
});

Clazz.newMeth(C$, 'enterNumTrans$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_trans", this]);
});

Clazz.newMeth(C$, 'enterNumCoord$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_coord", this]);
});

Clazz.newMeth(C$, 'enterNumTer$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_ter", this]);
});

Clazz.newMeth(C$, 'enterNumConect$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_conect", this]);
});

Clazz.newMeth(C$, 'enterNumSeqres$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_database_PDB_master", "num_seqres", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDatabasePdbOmitBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_database_pdb_omit", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_pdb_omit", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterRecordName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_database_pdb_omit", "record_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDbrefBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dbref", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "pdb_id_code", this]);
});

Clazz.newMeth(C$, 'enterChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "chain_id", this]);
});

Clazz.newMeth(C$, 'enterBeginResNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "begin_res_number", this]);
});

Clazz.newMeth(C$, 'enterBeginInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "begin_ins_code", this]);
});

Clazz.newMeth(C$, 'enterEndResNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "end_res_number", this]);
});

Clazz.newMeth(C$, 'enterEndInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "end_ins_code", this]);
});

Clazz.newMeth(C$, 'enterDatabaseName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_name", this]);
});

Clazz.newMeth(C$, 'enterDatabaseAccession$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_accession", this]);
});

Clazz.newMeth(C$, 'enterDatabaseIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_id_code", this]);
});

Clazz.newMeth(C$, 'enterDatabaseBeginResNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_begin_res_number", this]);
});

Clazz.newMeth(C$, 'enterDatabaseBeginInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_begin_ins_code", this]);
});

Clazz.newMeth(C$, 'enterDatabaseEndResNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_end_res_number", this]);
});

Clazz.newMeth(C$, 'enterDatabaseEndInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dbref", "database_end_ins_code", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDrugInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_drug_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_drug_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_drug_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_drug_info", "num_per_asym_unit", this]);
});

Clazz.newMeth(C$, 'enterNumOfWholeMolecule$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_drug_info", "num_of_whole_molecule", this]);
});

Clazz.newMeth(C$, 'enterSizeOfMoleculePerAsymUnit$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_drug_info", "size_of_molecule_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxInhibitorInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_inhibitor_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_inhibitor_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_inhibitor_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_inhibitor_info", "num_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxIonInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_ion_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_ion_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_ion_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumbPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_ion_info", "numb_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxHybridBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_hybrid", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_hybrid", "id", this]);
});

Clazz.newMeth(C$, 'enterSugarName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_hybrid", "sugar_name", this]);
});

Clazz.newMeth(C$, 'enterStrandId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_hybrid", "strand_id", this]);
});

Clazz.newMeth(C$, 'enterResidueNames$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_hybrid", "residue_names", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNaStrandInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_na_strand_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_strand_info", "id", this]);
});

Clazz.newMeth(C$, 'enterNumOfNAStrandsPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_na_strand_info", "num_of_NA_strands_per_asym_unit", this]);
});

Clazz.newMeth(C$, 'enterNumOfNAStrandsPerBiolUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_na_strand_info", "num_of_NA_strands_per_biol_unit", this]);
});

Clazz.newMeth(C$, 'enterFractNAStrandPerAsymUnit$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_strand_info", "fract_NA_strand_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNonstandardListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nonstandard_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "label_seq_num", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nonstandard_list", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nonstandard_list", "ins_code", this]);
});

Clazz.newMeth(C$, 'enterNumberAtomsNh$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_nonstandard_list", "number_atoms_nh", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPdbCompndBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_pdb_compnd", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_pdb_compnd", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_pdb_compnd", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPdbSourceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_pdb_source", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_pdb_source", "id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_pdb_source", "text", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxProteinInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_protein_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_protein_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_protein_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_protein_info", "num_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSolventInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_solvent_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_solvent_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumbPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_solvent_info", "numb_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSourceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_source", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterSrcMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_source", "src_method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructBiolFuncBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_biol_func", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_biol_func", "id", this]);
});

Clazz.newMeth(C$, 'enterBiolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_biol_func", "biol_id", this]);
});

Clazz.newMeth(C$, 'enterFunction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_biol_func", "function", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructPackGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_pack_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_pack_gen", "id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_pack_gen", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_pack_gen", "symmetry", this]);
});

Clazz.newMeth(C$, 'enterColorRed$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_pack_gen", "color_red", this]);
});

Clazz.newMeth(C$, 'enterColorGreen$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_pack_gen", "color_green", this]);
});

Clazz.newMeth(C$, 'enterColorBlue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_pack_gen", "color_blue", this]);
});

Clazz.newMeth(C$, 'enterCrystalType$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_pack_gen", "crystal_type", this]);
});

Clazz.newMeth(C$, 'enterPackingType$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_pack_gen", "packing_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxTrnaInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_trna_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_trna_info", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_trna_info", "name", this]);
});

Clazz.newMeth(C$, 'enterNumPerAsymUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_trna_info", "num_per_asym_unit", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxUnpairBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_unpair", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unpair", "chain_id", this]);
});

Clazz.newMeth(C$, 'enterResidueName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unpair", "residue_name", this]);
});

Clazz.newMeth(C$, 'enterResidueNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_unpair", "residue_number", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRefineLsRestrNcsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_refine_ls_restr_ncs", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_ls_restr_ncs", "dom_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_refine_ls_restr_ncs", "type", this]);
});

Clazz.newMeth(C$, 'enterNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_refine_ls_restr_ncs", "number", this]);
});

Clazz.newMeth(C$, 'enterRmsDev$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_ls_restr_ncs", "rms_dev", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_refine_ls_restr_ncs", "weight", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructNcsVirusGenBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_ncs_virus_gen", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ncs_virus_gen", "id", this]);
});

Clazz.newMeth(C$, 'enterOperId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ncs_virus_gen", "oper_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ncs_virus_gen", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_ncs_virus_gen", "pdb_chain_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSequenceAnnotationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_sequence_annotation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_annotation", "pdb_chain_id", this]);
});

Clazz.newMeth(C$, 'enterNcbiTaxid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_annotation", "ncbi_taxid", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPostProcessDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_post_process_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_details", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterText$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_details", "text", this]);
});

Clazz.newMeth(C$, 'enterSeqDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_details", "seq_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxPostProcessStatusBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_post_process_status", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCycleId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "cycle_id", this]);
});

Clazz.newMeth(C$, 'enterDateBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "date_begin", this]);
});

Clazz.newMeth(C$, 'enterDateEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "date_end", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "details", this]);
});

Clazz.newMeth(C$, 'enterAnnotator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_post_process_status", "annotator", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "type", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr1LabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_label_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPtnr1Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr1_symmetry", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPtnr2LabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_label_ins_code", this]);
});

Clazz.newMeth(C$, 'enterPtnr2Symmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "ptnr2_symmetry", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_link", "details", this]);
});

Clazz.newMeth(C$, 'enterPdbxDistValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_struct_link", "pdbx_dist_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMissingResidueListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_missing_residue_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_residue_list", "pdb_model_id", this]);
});

Clazz.newMeth(C$, 'enterPdbChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_residue_list", "pdb_chain_id", this]);
});

Clazz.newMeth(C$, 'enterPdbResidueName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_residue_list", "pdb_residue_name", this]);
});

Clazz.newMeth(C$, 'enterPdbResidueNumber$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_residue_list", "pdb_residue_number", this]);
});

Clazz.newMeth(C$, 'enterPdbInsertionCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_residue_list", "pdb_insertion_code", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_residue_list", "label_seq_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDataProcessingCellBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_data_processing_cell", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_cell", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterA$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "a", this]);
});

Clazz.newMeth(C$, 'enterATolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "a_tolerance", this]);
});

Clazz.newMeth(C$, 'enterB$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "b", this]);
});

Clazz.newMeth(C$, 'enterBTolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "b_tolerance", this]);
});

Clazz.newMeth(C$, 'enterC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "c", this]);
});

Clazz.newMeth(C$, 'enterCTolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "c_tolerance", this]);
});

Clazz.newMeth(C$, 'enterAlpha$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "alpha", this]);
});

Clazz.newMeth(C$, 'enterAlphaTolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "alpha_tolerance", this]);
});

Clazz.newMeth(C$, 'enterBeta$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "beta", this]);
});

Clazz.newMeth(C$, 'enterBetaTolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "beta_tolerance", this]);
});

Clazz.newMeth(C$, 'enterGamma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "gamma", this]);
});

Clazz.newMeth(C$, 'enterGammaTolerance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "gamma_tolerance", this]);
});

Clazz.newMeth(C$, 'enterVolume$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "volume", this]);
});

Clazz.newMeth(C$, 'enterMosaicity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_cell", "mosaicity", this]);
});

Clazz.newMeth(C$, 'enterResolutionRange$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_cell", "resolution_range", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_cell", "space_group", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDataProcessingReflnsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_data_processing_reflns", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_reflns", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterNumberAll$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_data_processing_reflns", "number_all", this]);
});

Clazz.newMeth(C$, 'enterNumberMarkedReject$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_data_processing_reflns", "number_marked_reject", this]);
});

Clazz.newMeth(C$, 'enterPercentMarkedReject$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_reflns", "percent_marked_reject", this]);
});

Clazz.newMeth(C$, 'enterPercentRejected$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_reflns", "percent_rejected", this]);
});

Clazz.newMeth(C$, 'enterRFactorAllLinear$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_reflns", "R_factor_all_linear", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDataProcessingDetectorBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_data_processing_detector", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "name", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterPolarization$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "polarization", this]);
});

Clazz.newMeth(C$, 'enterBeamPositionX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "beam_position_x", this]);
});

Clazz.newMeth(C$, 'enterBeamPositionY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "beam_position_y", this]);
});

Clazz.newMeth(C$, 'enterCassetteRotX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "cassette_rot_x", this]);
});

Clazz.newMeth(C$, 'enterCassetteRotY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "cassette_rot_y", this]);
});

Clazz.newMeth(C$, 'enterCassetteRotZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "cassette_rot_z", this]);
});

Clazz.newMeth(C$, 'enterScaleY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "scale_y", this]);
});

Clazz.newMeth(C$, 'enterSkew$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "skew", this]);
});

Clazz.newMeth(C$, 'enterCrossfireX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "crossfire_x", this]);
});

Clazz.newMeth(C$, 'enterCrossfireY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "crossfire_y", this]);
});

Clazz.newMeth(C$, 'enterCrossfireXy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_data_processing_detector", "crossfire_xy", this]);
});

Clazz.newMeth(C$, 'enterDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "date", this]);
});

Clazz.newMeth(C$, 'enterExperimentor$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "experimentor", this]);
});

Clazz.newMeth(C$, 'enterCrystalDataId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "crystal_data_id", this]);
});

Clazz.newMeth(C$, 'enterProcessingPath$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "processing_path", this]);
});

Clazz.newMeth(C$, 'enterProcessingFiles$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_data_processing_detector", "processing_files", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompNonstandardBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_nonstandard", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_nonstandard", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_nonstandard", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityPolyProteinClassBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_poly_protein_class", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_protein_class", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterClazz$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_protein_class", "class", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityNameTaxonomyTreeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_name_taxonomy_tree", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_taxonomy_tree", "id", this]);
});

Clazz.newMeth(C$, 'enterParentId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_taxonomy_tree", "parent_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityNameTaxonomyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_name_taxonomy", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_taxonomy", "id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_taxonomy", "name", this]);
});

Clazz.newMeth(C$, 'enterNameType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_taxonomy", "name_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityNameInstanceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_name_instance", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "name", this]);
});

Clazz.newMeth(C$, 'enterPdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "pdb_id", this]);
});

Clazz.newMeth(C$, 'enterRcsbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "rcsb_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterPdbChainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "pdb_chain_id", this]);
});

Clazz.newMeth(C$, 'enterPdbMolId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_name_instance", "pdb_mol_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxTableinfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_tableinfo", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterTablename$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_tableinfo", "tablename", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_tableinfo", "description", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_tableinfo", "type", this]);
});

Clazz.newMeth(C$, 'enterTableSerialNo$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_tableinfo", "table_serial_no", this]);
});

Clazz.newMeth(C$, 'enterGroupName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_tableinfo", "group_name", this]);
});

Clazz.newMeth(C$, 'enterWWWSelectionCriteria$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_tableinfo", "WWW_Selection_Criteria", this]);
});

Clazz.newMeth(C$, 'enterWWWReportCriteria$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_tableinfo", "WWW_Report_Criteria", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxColumninfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_columninfo", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterColumnname$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_columninfo", "columnname", this]);
});

Clazz.newMeth(C$, 'enterTablename$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_columninfo", "tablename", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_columninfo", "description", this]);
});

Clazz.newMeth(C$, 'enterExample$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_columninfo", "example", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_columninfo", "type", this]);
});

Clazz.newMeth(C$, 'enterTableSerialNo$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_columninfo", "table_serial_no", this]);
});

Clazz.newMeth(C$, 'enterColumnSerialNo$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_columninfo", "column_serial_no", this]);
});

Clazz.newMeth(C$, 'enterWWWSelectionCriteria$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_columninfo", "WWW_Selection_Criteria", this]);
});

Clazz.newMeth(C$, 'enterWWWReportCriteria$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_columninfo", "WWW_Report_Criteria", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_val_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_angle", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_angle", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_PDB_insert_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_PDB_insert_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "auth_PDB_insert_id_3", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_angle", "label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_angle", "label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_angle", "label_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId3$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_angle", "label_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAngle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_angle", "angle", this]);
});

Clazz.newMeth(C$, 'enterAngleDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_angle", "angle_deviation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_val_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_bond", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_bond", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_PDB_insert_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "auth_PDB_insert_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_bond", "label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_bond", "label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_bond", "label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterBond$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_bond", "bond", this]);
});

Clazz.newMeth(C$, 'enterBondDeviation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_bond", "bond_deviation", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValContactBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_val_contact", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_contact", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_contact", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_PDB_insert_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "auth_PDB_insert_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_contact", "label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_contact", "label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_contact", "label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_contact", "dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValSymContactBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_val_sym_contact", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_sym_contact", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_sym_contact", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_PDB_insert_id_1", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "auth_PDB_insert_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_sym_contact", "label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_sym_contact", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_val_sym_contact", "dist", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRmchOutlierBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_rmch_outlier", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rmch_outlier", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rmch_outlier", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "auth_PDB_insert_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rmch_outlier", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rmch_outlier", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterPhi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rmch_outlier", "phi", this]);
});

Clazz.newMeth(C$, 'enterPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rmch_outlier", "psi", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMissingAtomPolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_missing_atom_poly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_atom_poly", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_atom_poly", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "auth_PDB_insert_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_atom_poly", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_poly", "atom_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxMissingAtomNonpolyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_missing_atom_nonpoly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "auth_PDB_insert_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_missing_atom_nonpoly", "atom_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxValChiralBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_val_chiral", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_chiral", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_chiral", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterAuthPDBInsertId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "auth_PDB_insert_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_val_chiral", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterChiralCenterAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "chiral_center_atom_name", this]);
});

Clazz.newMeth(C$, 'enterChiralNeighborAtomName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "chiral_neighbor_atom_name", this]);
});

Clazz.newMeth(C$, 'enterChiralCenterAtomAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "chiral_center_atom_alt_id", this]);
});

Clazz.newMeth(C$, 'enterChiralNeighborAtomAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_val_chiral", "chiral_neighbor_atom_alt_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAtlasBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_atlas", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atlas", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterPageId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_atlas", "page_id", this]);
});

Clazz.newMeth(C$, 'enterPageName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_atlas", "page_name", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSummaryFlagsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_summary_flags", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_summary_flags", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterFlagId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_summary_flags", "flag_id", this]);
});

Clazz.newMeth(C$, 'enterFlagValue$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_summary_flags", "flag_value", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityFuncBindModeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_func_bind_mode", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_bind_mode", "id", this]);
});

Clazz.newMeth(C$, 'enterDomainId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_bind_mode", "domain_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_bind_mode", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterProteinBindsTo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_bind_mode", "protein_binds_to", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_bind_mode", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityFuncEnzymeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_func_enzyme", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBindModeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_enzyme", "bind_mode_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_enzyme", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityFuncRegulatoryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_func_regulatory", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBindModeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_regulatory", "bind_mode_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_regulatory", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityFuncStructuralBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_func_structural", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBindModeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_structural", "bind_mode_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_structural", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityFuncOtherBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_func_other", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterBindModeId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_other", "bind_mode_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_func_other", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityPolyDomainBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_poly_domain", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_domain", "id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_domain", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterBeginMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_domain", "begin_mon_id", this]);
});

Clazz.newMeth(C$, 'enterBeginSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_poly_domain", "begin_seq_num", this]);
});

Clazz.newMeth(C$, 'enterEndMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_domain", "end_mon_id", this]);
});

Clazz.newMeth(C$, 'enterEndSeqNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_poly_domain", "end_seq_num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNaStructKeywdsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_na_struct_keywds", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_struct_keywds", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterConformationType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_struct_keywds", "conformation_type", this]);
});

Clazz.newMeth(C$, 'enterStrandDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_struct_keywds", "strand_description", this]);
});

Clazz.newMeth(C$, 'enterSpecialFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_na_struct_keywds", "special_feature", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityPolyNaTypeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_poly_na_type", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_na_type", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_na_type", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityPolyNaNonstandardBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_poly_na_nonstandard", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_na_nonstandard", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_poly_na_nonstandard", "feature", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxVirtualAngleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_virtual_angle", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_angle", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId3$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_label_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "atom_site_auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_angle", "site_symmetry_3", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_angle", "value", this]);
});

Clazz.newMeth(C$, 'enterValueEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_angle", "value_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxVirtualBondBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_virtual_bond", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_bond", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_bond", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterDist$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_bond", "dist", this]);
});

Clazz.newMeth(C$, 'enterDistEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_bond", "dist_esd", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_bond", "site_symmetry_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxVirtualTorsionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_virtual_torsion", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_torsion", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_alt_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_alt_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_alt_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId3$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAltId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_alt_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelCompId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_comp_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelSeqId4$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_seq_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteLabelAsymId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_label_asym_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_atom_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_asym_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_comp_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_seq_id_3", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAtomId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_atom_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthAsymId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_asym_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthCompId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_comp_id_4", this]);
});

Clazz.newMeth(C$, 'enterAtomSiteAuthSeqId4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "atom_site_auth_seq_id_4", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "site_symmetry_1", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "site_symmetry_2", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry3$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "site_symmetry_3", this]);
});

Clazz.newMeth(C$, 'enterSiteSymmetry4$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_virtual_torsion", "site_symmetry_4", this]);
});

Clazz.newMeth(C$, 'enterValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_torsion", "value", this]);
});

Clazz.newMeth(C$, 'enterValueEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_virtual_torsion", "value_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSequencePatternBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_sequence_pattern", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_pattern", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_pattern", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPatternCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sequence_pattern", "pattern_count", this]);
});

Clazz.newMeth(C$, 'enterSequencePattern$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sequence_pattern", "sequence_pattern", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStereochemistryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_stereochemistry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_stereochemistry", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_stereochemistry", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_stereochemistry", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_atom_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomIdU$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_atom_id_u", this]);
});

Clazz.newMeth(C$, 'enterLabelAltIdU$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_alt_id_u", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomIdV$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_atom_id_v", this]);
});

Clazz.newMeth(C$, 'enterLabelAltIdV$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_alt_id_v", this]);
});

Clazz.newMeth(C$, 'enterLabelAtomIdW$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_atom_id_w", this]);
});

Clazz.newMeth(C$, 'enterLabelAltIdW$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_stereochemistry", "label_alt_id_w", this]);
});

Clazz.newMeth(C$, 'enterVolume3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_stereochemistry", "volume3", this]);
});

Clazz.newMeth(C$, 'enterAngleOutOfPlane$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_stereochemistry", "angle_out_of_plane", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRmsDevsCovalentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_rms_devs_covalent", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterRmsBonds$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_bonds", this]);
});

Clazz.newMeth(C$, 'enterNumBonds$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_bonds", this]);
});

Clazz.newMeth(C$, 'enterRmsBondsBase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_bonds_base", this]);
});

Clazz.newMeth(C$, 'enterNumBondsBase$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_bonds_base", this]);
});

Clazz.newMeth(C$, 'enterRmsBondsSugar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_bonds_sugar", this]);
});

Clazz.newMeth(C$, 'enterNumBondsSugar$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_bonds_sugar", this]);
});

Clazz.newMeth(C$, 'enterRmsBondsPhosphate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_bonds_phosphate", this]);
});

Clazz.newMeth(C$, 'enterNumBondsPhosphate$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_bonds_phosphate", this]);
});

Clazz.newMeth(C$, 'enterRmsAngles$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_angles", this]);
});

Clazz.newMeth(C$, 'enterNumAngles$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_angles", this]);
});

Clazz.newMeth(C$, 'enterRmsAnglesBase$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_angles_base", this]);
});

Clazz.newMeth(C$, 'enterNumAnglesBase$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_angles_base", this]);
});

Clazz.newMeth(C$, 'enterRmsAnglesSugar$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_angles_sugar", this]);
});

Clazz.newMeth(C$, 'enterNumAnglesSugar$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_angles_sugar", this]);
});

Clazz.newMeth(C$, 'enterRmsAnglesPhosphate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "rms_angles_phosphate", this]);
});

Clazz.newMeth(C$, 'enterNumAnglesPhosphate$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_covalent", "num_angles_phosphate", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxRmsDevsCovByMonomerBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_rms_devs_cov_by_monomer", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterRmsBonds$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "rms_bonds", this]);
});

Clazz.newMeth(C$, 'enterNumBonds$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "num_bonds", this]);
});

Clazz.newMeth(C$, 'enterRmsAngles$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "rms_angles", this]);
});

Clazz.newMeth(C$, 'enterNumAngles$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_rms_devs_cov_by_monomer", "num_angles", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSugarPhosphateGeometryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_sugar_phosphate_geometry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "model_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "label_asym_id", this]);
});

Clazz.newMeth(C$, 'enterLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterNeighborCompId5prime$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "neighbor_comp_id_5prime", this]);
});

Clazz.newMeth(C$, 'enterNeighborCompId3prime$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "neighbor_comp_id_3prime", this]);
});

Clazz.newMeth(C$, 'enterO3PO5C5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o3_p_o5_c5", this]);
});

Clazz.newMeth(C$, 'enterPO5C5C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "p_o5_c5_c4", this]);
});

Clazz.newMeth(C$, 'enterO5C5C4C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o5_c5_c4_c3", this]);
});

Clazz.newMeth(C$, 'enterC5C4C3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c5_c4_c3_o3", this]);
});

Clazz.newMeth(C$, 'enterC4C3O3P$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_c3_o3_p", this]);
});

Clazz.newMeth(C$, 'enterC3O3PO5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_o3_p_o5", this]);
});

Clazz.newMeth(C$, 'enterC4O4C1N19$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_o4_c1_n1_9", this]);
});

Clazz.newMeth(C$, 'enterO4C1N19C24$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1_n1_9_c2_4", this]);
});

Clazz.newMeth(C$, 'enterO4C1N19C68$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1_n1_9_c6_8", this]);
});

Clazz.newMeth(C$, 'enterC4O4C1C2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_o4_c1_c2", this]);
});

Clazz.newMeth(C$, 'enterO4C1C2C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1_c2_c3", this]);
});

Clazz.newMeth(C$, 'enterC1C2C3C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_c2_c3_c4", this]);
});

Clazz.newMeth(C$, 'enterC2C3C4O4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c2_c3_c4_o4", this]);
});

Clazz.newMeth(C$, 'enterC3C4O4C1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_c4_o4_c1", this]);
});

Clazz.newMeth(C$, 'enterC5C4C3C2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c5_c4_c3_c2", this]);
});

Clazz.newMeth(C$, 'enterO4C4C3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c4_c3_o3", this]);
});

Clazz.newMeth(C$, 'enterO3C3C2O2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o3_c3_c2_o2", this]);
});

Clazz.newMeth(C$, 'enterO5C5C4O4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o5_c5_c4_o4", this]);
});

Clazz.newMeth(C$, 'enterPseudorot$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "pseudorot", this]);
});

Clazz.newMeth(C$, 'enterMaxtorsion$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "maxtorsion", this]);
});

Clazz.newMeth(C$, 'enterNextLabelCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_label_comp_id", this]);
});

Clazz.newMeth(C$, 'enterNextLabelSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_label_seq_id", this]);
});

Clazz.newMeth(C$, 'enterNextO3PO5C5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_o3_p_o5_c5", this]);
});

Clazz.newMeth(C$, 'enterNextPO5C5C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_p_o5_c5_c4", this]);
});

Clazz.newMeth(C$, 'enterNextO5C5C4C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_o5_c5_c4_c3", this]);
});

Clazz.newMeth(C$, 'enterNextC5C4C3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_c5_c4_c3_o3", this]);
});

Clazz.newMeth(C$, 'enterNextC4C3O3P$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_c4_c3_o3_p", this]);
});

Clazz.newMeth(C$, 'enterNextC3O3PO5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_c3_o3_p_o5", this]);
});

Clazz.newMeth(C$, 'enterNextC4O4C1N19$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_c4_o4_c1_n1_9", this]);
});

Clazz.newMeth(C$, 'enterNextO4C1N19C24$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "next_o4_c1_n1_9_c2_4", this]);
});

Clazz.newMeth(C$, 'enterC1C2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_c2", this]);
});

Clazz.newMeth(C$, 'enterC2C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c2_c3", this]);
});

Clazz.newMeth(C$, 'enterC3C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_c4", this]);
});

Clazz.newMeth(C$, 'enterC4O4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_o4", this]);
});

Clazz.newMeth(C$, 'enterO4C1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1", this]);
});

Clazz.newMeth(C$, 'enterPO5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "p_o5", this]);
});

Clazz.newMeth(C$, 'enterO5C5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o5_c5", this]);
});

Clazz.newMeth(C$, 'enterC5C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c5_c4", this]);
});

Clazz.newMeth(C$, 'enterC3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_o3", this]);
});

Clazz.newMeth(C$, 'enterO3P$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o3_p", this]);
});

Clazz.newMeth(C$, 'enterPO1p$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "p_o1p", this]);
});

Clazz.newMeth(C$, 'enterPO2p$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "p_o2p", this]);
});

Clazz.newMeth(C$, 'enterC1N91$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_n9_1", this]);
});

Clazz.newMeth(C$, 'enterN1C2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "n1_c2", this]);
});

Clazz.newMeth(C$, 'enterN1C6$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "n1_c6", this]);
});

Clazz.newMeth(C$, 'enterN9C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "n9_c4", this]);
});

Clazz.newMeth(C$, 'enterN9C8$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "n9_c8", this]);
});

Clazz.newMeth(C$, 'enterC1C2C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_c2_c3", this]);
});

Clazz.newMeth(C$, 'enterC2C3C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c2_c3_c4", this]);
});

Clazz.newMeth(C$, 'enterC3C4O4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_c4_o4", this]);
});

Clazz.newMeth(C$, 'enterC4O4C1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_o4_c1", this]);
});

Clazz.newMeth(C$, 'enterO4C1C2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1_c2", this]);
});

Clazz.newMeth(C$, 'enterPO5C5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "p_o5_c5", this]);
});

Clazz.newMeth(C$, 'enterO5C5C4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o5_c5_c4", this]);
});

Clazz.newMeth(C$, 'enterC5C4C3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c5_c4_c3", this]);
});

Clazz.newMeth(C$, 'enterC4C3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c4_c3_o3", this]);
});

Clazz.newMeth(C$, 'enterC3O3P$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c3_o3_p", this]);
});

Clazz.newMeth(C$, 'enterO3PO5$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o3_p_o5", this]);
});

Clazz.newMeth(C$, 'enterO4C1N19$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o4_c1_n1_9", this]);
});

Clazz.newMeth(C$, 'enterC1N19C24$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_n1_9_c2_4", this]);
});

Clazz.newMeth(C$, 'enterC5C4O4$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c5_c4_o4", this]);
});

Clazz.newMeth(C$, 'enterC2C3O3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c2_c3_o3", this]);
});

Clazz.newMeth(C$, 'enterO1pPO2p$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "o1p_p_o2p", this]);
});

Clazz.newMeth(C$, 'enterC2C1N19$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c2_c1_n1_9", this]);
});

Clazz.newMeth(C$, 'enterC1N19C68$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_sugar_phosphate_geometry", "c1_n1_9_c6_8", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxNmrComputingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_nmr_computing", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntryId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "entry_id", this]);
});

Clazz.newMeth(C$, 'enterCollection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "collection", this]);
});

Clazz.newMeth(C$, 'enterCollectionVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "collection_version", this]);
});

Clazz.newMeth(C$, 'enterProcessing$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "processing", this]);
});

Clazz.newMeth(C$, 'enterProcessingVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "processing_version", this]);
});

Clazz.newMeth(C$, 'enterDataAnalysis$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "data_analysis", this]);
});

Clazz.newMeth(C$, 'enterDataAnalysisVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "data_analysis_version", this]);
});

Clazz.newMeth(C$, 'enterStructureSolution$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "structure_solution", this]);
});

Clazz.newMeth(C$, 'enterStructureSolutionVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "structure_solution_version", this]);
});

Clazz.newMeth(C$, 'enterRefinement$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "refinement", this]);
});

Clazz.newMeth(C$, 'enterRefinementVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "refinement_version", this]);
});

Clazz.newMeth(C$, 'enterIterativeRelaxationMatrix$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "iterative_relaxation_matrix", this]);
});

Clazz.newMeth(C$, 'enterIterativeRelaxationMatrixVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_nmr_computing", "iterative_relaxation_matrix_version", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditConformExtensionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_conform_extension", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterExtensionDictLocation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_conform_extension", "extension_dict_location", this]);
});

Clazz.newMeth(C$, 'enterExtensionDictName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_conform_extension", "extension_dict_name", this]);
});

Clazz.newMeth(C$, 'enterExtensionDictVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_conform_extension", "extension_dict_version", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccMapmanBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_mapman", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_mapman", "pdbid", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_mapman", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccRsccMapmanBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_rscc_mapman", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "model_id", this]);
});

Clazz.newMeth(C$, 'enterPdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "pdb_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "label_ins_code", this]);
});

Clazz.newMeth(C$, 'enterCorrelation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "correlation", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "real_space_R", this]);
});

Clazz.newMeth(C$, 'enterWeightedRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "weighted_real_space_R", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceZscore$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "real_space_Zscore", this]);
});

Clazz.newMeth(C$, 'enterBisoMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "Biso_mean", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "occupancy_mean", this]);
});

Clazz.newMeth(C$, 'enterFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman", "flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccRsccMapmanOverallBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_rscc_mapman_overall", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman_overall", "pdbid", this]);
});

Clazz.newMeth(C$, 'enterCorrelation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman_overall", "correlation", this]);
});

Clazz.newMeth(C$, 'enterCorrelationSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman_overall", "correlation_sigma", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman_overall", "real_space_R", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceRSigma$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_rscc_mapman_overall", "real_space_R_sigma", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccDensityBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_density", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDCCVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "DCC_version", this]);
});

Clazz.newMeth(C$, 'enterPdbid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "pdbid", this]);
});

Clazz.newMeth(C$, 'enterPdbtype$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "pdbtype", this]);
});

Clazz.newMeth(C$, 'enterUnitCell$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "unit_cell", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupNameH_M$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "space_group_name_H-M", this]);
});

Clazz.newMeth(C$, 'enterSpaceGroupPointless$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "space_group_pointless", this]);
});

Clazz.newMeth(C$, 'enterLsDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "ls_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterLsDResHighSf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "ls_d_res_high_sf", this]);
});

Clazz.newMeth(C$, 'enterLsDResLowSf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "ls_d_res_low_sf", this]);
});

Clazz.newMeth(C$, 'enterRValueRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "R_value_R_work", this]);
});

Clazz.newMeth(C$, 'enterRValueRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "R_value_R_free", this]);
});

Clazz.newMeth(C$, 'enterWorkingSetCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "working_set_count", this]);
});

Clazz.newMeth(C$, 'enterFreeSetCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "free_set_count", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "occupancy_min", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "occupancy_max", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "occupancy_mean", this]);
});

Clazz.newMeth(C$, 'enterBisoMin$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Biso_min", this]);
});

Clazz.newMeth(C$, 'enterBisoMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Biso_max", this]);
});

Clazz.newMeth(C$, 'enterBisoMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Biso_mean", this]);
});

Clazz.newMeth(C$, 'enterBWilson$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "B_wilson", this]);
});

Clazz.newMeth(C$, 'enterBWilsonScale$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "B_wilson_scale", this]);
});

Clazz.newMeth(C$, 'enterMeanI2OverMeanISquare$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "mean_I2_over_mean_I_square", this]);
});

Clazz.newMeth(C$, 'enterMeanFSquareOverMeanF2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "mean_F_square_over_mean_F2", this]);
});

Clazz.newMeth(C$, 'enterMeanE21Abs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "mean_E2_1_abs", this]);
});

Clazz.newMeth(C$, 'enterPadilla_YeatesLMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Padilla-Yeates_L_mean", this]);
});

Clazz.newMeth(C$, 'enterPadilla_YeatesL2Mean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Padilla-Yeates_L2_mean", this]);
});

Clazz.newMeth(C$, 'enterPadilla_YeatesL2MeanPointless$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Padilla-Yeates_L2_mean_pointless", this]);
});

Clazz.newMeth(C$, 'enterZScoreLTest$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Z_score_L_test", this]);
});

Clazz.newMeth(C$, 'enterTwinType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "twin_type", this]);
});

Clazz.newMeth(C$, 'enterTwinOperatorXtriage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "twin_operator_xtriage", this]);
});

Clazz.newMeth(C$, 'enterTwinFractionXtriage$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "twin_fraction_xtriage", this]);
});

Clazz.newMeth(C$, 'enterTwinRfactor$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "twin_Rfactor", this]);
});

Clazz.newMeth(C$, 'enterIOverSigIResh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "I_over_sigI_resh", this]);
});

Clazz.newMeth(C$, 'enterIOverSigIDiff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "I_over_sigI_diff", this]);
});

Clazz.newMeth(C$, 'enterIOverSigIMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "I_over_sigI_mean", this]);
});

Clazz.newMeth(C$, 'enterIceRing$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "ice_ring", this]);
});

Clazz.newMeth(C$, 'enterAnisotropy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "anisotropy", this]);
});

Clazz.newMeth(C$, 'enterZ_score$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Z-score", this]);
});

Clazz.newMeth(C$, 'enterProbPeakValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "prob_peak_value", this]);
});

Clazz.newMeth(C$, 'enterTranslationalPseudoSymmetry$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "translational_pseudo_symmetry", this]);
});

Clazz.newMeth(C$, 'enterWavelength$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "wavelength", this]);
});

Clazz.newMeth(C$, 'enterBSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "B_solvent", this]);
});

Clazz.newMeth(C$, 'enterKSolvent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "K_solvent", this]);
});

Clazz.newMeth(C$, 'enterTLSRefinementReported$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "TLS_refinement_reported", this]);
});

Clazz.newMeth(C$, 'enterPartialBValueCorrectionAttempted$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "partial_B_value_correction_attempted", this]);
});

Clazz.newMeth(C$, 'enterPartialBValueCorrectionSuccess$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "partial_B_value_correction_success", this]);
});

Clazz.newMeth(C$, 'enterReflectionStatusArchived$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "reflection_status_archived", this]);
});

Clazz.newMeth(C$, 'enterReflectionStatusUsed$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "reflection_status_used", this]);
});

Clazz.newMeth(C$, 'enterIsoBValueType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "iso_B_value_type", this]);
});

Clazz.newMeth(C$, 'enterReflnsTwin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "reflns_twin", this]);
});

Clazz.newMeth(C$, 'enterTwinByXtriage$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "twin_by_xtriage", this]);
});

Clazz.newMeth(C$, 'enterTwinOperator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "twin_operator", this]);
});

Clazz.newMeth(C$, 'enterTwinFraction$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "twin_fraction", this]);
});

Clazz.newMeth(C$, 'enterTlsGroupNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "tls_group_number", this]);
});

Clazz.newMeth(C$, 'enterNcsGroupNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "ncs_group_number", this]);
});

Clazz.newMeth(C$, 'enterMtrixNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "mtrix_number", this]);
});

Clazz.newMeth(C$, 'enterMatthewCoeff$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Matthew_coeff", this]);
});

Clazz.newMeth(C$, 'enterSolventContent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "solvent_content", this]);
});

Clazz.newMeth(C$, 'enterCruickshankDpiXyz$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Cruickshank_dpi_xyz", this]);
});

Clazz.newMeth(C$, 'enterDpiFreeR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "dpi_free_R", this]);
});

Clazz.newMeth(C$, 'enterFom$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "fom", this]);
});

Clazz.newMeth(C$, 'enterCorrelationOverall$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "correlation_overall", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceROverall$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "real_space_R_overall", this]);
});

Clazz.newMeth(C$, 'enterMFo_DFc_3sigmaPositive$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "mFo-DFc-3sigma_positive", this]);
});

Clazz.newMeth(C$, 'enterMFo_DFc_6sigmaPositive$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "mFo-DFc-6sigma_positive", this]);
});

Clazz.newMeth(C$, 'enterMFo_DFc_3sigmaNegative$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "mFo-DFc-3sigma_negative", this]);
});

Clazz.newMeth(C$, 'enterMFo_DFc_6sigmaNegative$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density", "mFo-DFc-6sigma_negative", this]);
});

Clazz.newMeth(C$, 'enterBmean_Bwilson$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Bmean-Bwilson", this]);
});

Clazz.newMeth(C$, 'enterRfree_Rwork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density", "Rfree-Rwork", this]);
});

Clazz.newMeth(C$, 'enterError$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density", "error", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccGeometryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_geometry", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterPdbid$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_geometry", "pdbid", this]);
});

Clazz.newMeth(C$, 'enterRamachandranOutlierPercent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_outlier_percent", this]);
});

Clazz.newMeth(C$, 'enterRamachandranOutlierNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_outlier_number", this]);
});

Clazz.newMeth(C$, 'enterRamachandranAllowedPercent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_allowed_percent", this]);
});

Clazz.newMeth(C$, 'enterRamachandranAllowedNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_allowed_number", this]);
});

Clazz.newMeth(C$, 'enterRamachandranFavoredPercent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_favored_percent", this]);
});

Clazz.newMeth(C$, 'enterRamachandranFavoredNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_geometry", "Ramachandran_favored_number", this]);
});

Clazz.newMeth(C$, 'enterRotamerOutliersPercent$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "rotamer_outliers_percent", this]);
});

Clazz.newMeth(C$, 'enterRotamerOutliersNumber$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_geometry", "rotamer_outliers_number", this]);
});

Clazz.newMeth(C$, 'enterCbetaDeviations$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_geometry", "cbeta_deviations", this]);
});

Clazz.newMeth(C$, 'enterAllAtomClashscore$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "all_atom_clashscore", this]);
});

Clazz.newMeth(C$, 'enterOverallScore$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "overall_score", this]);
});

Clazz.newMeth(C$, 'enterBondOverallRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "bond_overall_rms", this]);
});

Clazz.newMeth(C$, 'enterBondOverallMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "bond_overall_max", this]);
});

Clazz.newMeth(C$, 'enterBondLigandRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "bond_ligand_rms", this]);
});

Clazz.newMeth(C$, 'enterBondLigandMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "bond_ligand_max", this]);
});

Clazz.newMeth(C$, 'enterAngleOverallRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "angle_overall_rms", this]);
});

Clazz.newMeth(C$, 'enterAngleOverallMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "angle_overall_max", this]);
});

Clazz.newMeth(C$, 'enterAngleLigandRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "angle_ligand_rms", this]);
});

Clazz.newMeth(C$, 'enterAngleLigandMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "angle_ligand_max", this]);
});

Clazz.newMeth(C$, 'enterDihedralOverallRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "dihedral_overall_rms", this]);
});

Clazz.newMeth(C$, 'enterDihedralOverallMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "dihedral_overall_max", this]);
});

Clazz.newMeth(C$, 'enterChiralityOverallRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "chirality_overall_rms", this]);
});

Clazz.newMeth(C$, 'enterChiralityOverallMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "chirality_overall_max", this]);
});

Clazz.newMeth(C$, 'enterPlanarityOverallRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "planarity_overall_rms", this]);
});

Clazz.newMeth(C$, 'enterPlanarityOverallMax$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "planarity_overall_max", this]);
});

Clazz.newMeth(C$, 'enterNon_bondedRms$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_geometry", "non-bonded_rms", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccDensityCorrBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_density_corr", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterProgram$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density_corr", "program", this]);
});

Clazz.newMeth(C$, 'enterLsDResHigh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_d_res_high", this]);
});

Clazz.newMeth(C$, 'enterLsDResLow$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_d_res_low", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRAll$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_R_factor_R_all", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRWork$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_R_factor_R_work", this]);
});

Clazz.newMeth(C$, 'enterLsRFactorRFree$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_R_factor_R_free", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsObs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_number_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterLsPercentReflnsObs$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_percent_reflns_obs", this]);
});

Clazz.newMeth(C$, 'enterLsNumberReflnsRFree$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_density_corr", "ls_number_reflns_R_free", this]);
});

Clazz.newMeth(C$, 'enterCorrelationCoeffFoToFc$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "correlation_coeff_Fo_to_Fc", this]);
});

Clazz.newMeth(C$, 'enterRealSpaceR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "real_space_R", this]);
});

Clazz.newMeth(C$, 'enterCorrelation$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_density_corr", "correlation", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_density_corr", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDccMapBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_dcc_map", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_dcc_map", "id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "model_id", this]);
});

Clazz.newMeth(C$, 'enterPdbId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "pdb_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "auth_comp_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "auth_seq_id", this]);
});

Clazz.newMeth(C$, 'enterLabelAltId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "label_alt_id", this]);
});

Clazz.newMeth(C$, 'enterLabelInsCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "label_ins_code", this]);
});

Clazz.newMeth(C$, 'enterRSCC$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSCC", this]);
});

Clazz.newMeth(C$, 'enterRSR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSR", this]);
});

Clazz.newMeth(C$, 'enterWeightedRSR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "weighted_RSR", this]);
});

Clazz.newMeth(C$, 'enterRSRZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSRZ", this]);
});

Clazz.newMeth(C$, 'enterWeightedRSRZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "weighted_RSRZ", this]);
});

Clazz.newMeth(C$, 'enterBisoMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "Biso_mean", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMean$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "occupancy_mean", this]);
});

Clazz.newMeth(C$, 'enterRSCCMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSCC_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRSRMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSR_main_chain", this]);
});

Clazz.newMeth(C$, 'enterWRSRMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSR_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRSRZMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSRZ_main_chain", this]);
});

Clazz.newMeth(C$, 'enterWRSRZMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSRZ_main_chain", this]);
});

Clazz.newMeth(C$, 'enterBisoMeanMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "Biso_mean_main_chain", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMeanMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "occupancy_mean_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRSCCSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSCC_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSRSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSR_side_chain", this]);
});

Clazz.newMeth(C$, 'enterWRSRSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSR_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSRZSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSRZ_side_chain", this]);
});

Clazz.newMeth(C$, 'enterWRSRZSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSRZ_side_chain", this]);
});

Clazz.newMeth(C$, 'enterBisoMeanSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "Biso_mean_side_chain", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMeanSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "occupancy_mean_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSCCPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSCC_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterRSRPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSR_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterWRSRPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSR_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterRSRZPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSRZ_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterWRSRZPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "wRSRZ_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterBisoMeanPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "Biso_mean_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterOccupancyMeanPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "occupancy_mean_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterShift$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "shift", this]);
});

Clazz.newMeth(C$, 'enterShiftMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "shift_main_chain", this]);
});

Clazz.newMeth(C$, 'enterShiftSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "shift_side_chain", this]);
});

Clazz.newMeth(C$, 'enterDensityConnectivity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "density_connectivity", this]);
});

Clazz.newMeth(C$, 'enterDensityIndexMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "density_index_main_chain", this]);
});

Clazz.newMeth(C$, 'enterDensityIndexSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "density_index_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSZD$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZD", this]);
});

Clazz.newMeth(C$, 'enterRSZO$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZO", this]);
});

Clazz.newMeth(C$, 'enterRSZOZscore$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZO_Zscore", this]);
});

Clazz.newMeth(C$, 'enterLLDF$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "LLDF", this]);
});

Clazz.newMeth(C$, 'enterRSZDMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZD_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRSZOMainChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZO_main_chain", this]);
});

Clazz.newMeth(C$, 'enterRSZDSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZD_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSZOSideChain$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZO_side_chain", this]);
});

Clazz.newMeth(C$, 'enterRSZDPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZD_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterRSZOPhosphateGroup$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_dcc_map", "RSZO_phosphate_group", this]);
});

Clazz.newMeth(C$, 'enterQualityIndicator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_dcc_map", "quality_indicator", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepositGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_deposit_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group", "group_id", this]);
});

Clazz.newMeth(C$, 'enterGroupTitle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group", "group_title", this]);
});

Clazz.newMeth(C$, 'enterGroupDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group", "group_description", this]);
});

Clazz.newMeth(C$, 'enterGroupType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group", "group_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxDepositGroupIndexBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_deposit_group_index", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "group_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_deposit_group_index", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterDepSetId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "dep_set_id", this]);
});

Clazz.newMeth(C$, 'enterPdbIdCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "pdb_id_code", this]);
});

Clazz.newMeth(C$, 'enterGroupFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "group_file_name", this]);
});

Clazz.newMeth(C$, 'enterGroupFileTimestamp$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "group_file_timestamp", this]);
});

Clazz.newMeth(C$, 'enterAuthFileLabel$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "auth_file_label", this]);
});

Clazz.newMeth(C$, 'enterAuthFileContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "auth_file_content_type", this]);
});

Clazz.newMeth(C$, 'enterAuthFileFormatType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "auth_file_format_type", this]);
});

Clazz.newMeth(C$, 'enterAuthFileName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_deposit_group_index", "auth_file_name", this]);
});

Clazz.newMeth(C$, 'enterAuthFileSize$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_deposit_group_index", "auth_file_size", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyAuthEvidenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_auth_evidence", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence", "id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentalSupport$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence", "experimental_support", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_evidence", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxStructAssemblyAuthClassificationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_struct_assembly_auth_classification", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_classification", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterReasonForInterest$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_struct_assembly_auth_classification", "reason_for_interest", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxCrystalAlignmentBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_crystal_alignment", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCrystalId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_crystal_alignment", "crystal_id", this]);
});

Clazz.newMeth(C$, 'enterOscillationRange$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "oscillation_range", this]);
});

Clazz.newMeth(C$, 'enterOscillationStart$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "oscillation_start", this]);
});

Clazz.newMeth(C$, 'enterOscillationEnd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "oscillation_end", this]);
});

Clazz.newMeth(C$, 'enterXbeam$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "xbeam", this]);
});

Clazz.newMeth(C$, 'enterXbeamEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "xbeam_esd", this]);
});

Clazz.newMeth(C$, 'enterYbeam$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "ybeam", this]);
});

Clazz.newMeth(C$, 'enterYbeamEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "ybeam_esd", this]);
});

Clazz.newMeth(C$, 'enterCrysxSpindle$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysx_spindle", this]);
});

Clazz.newMeth(C$, 'enterCrysxSpindleEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysx_spindle_esd", this]);
});

Clazz.newMeth(C$, 'enterCrysyVertical$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysy_vertical", this]);
});

Clazz.newMeth(C$, 'enterCrysyVerticalEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysy_vertical_esd", this]);
});

Clazz.newMeth(C$, 'enterCryszBeam$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysz_beam", this]);
});

Clazz.newMeth(C$, 'enterCryszBeamEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crysz_beam_esd", this]);
});

Clazz.newMeth(C$, 'enterCrystalToDetectorDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crystal_to_detector_distance", this]);
});

Clazz.newMeth(C$, 'enterCrystalToDetectorDistanceEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crystal_to_detector_distance_esd", this]);
});

Clazz.newMeth(C$, 'enterCrossfireX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_x", this]);
});

Clazz.newMeth(C$, 'enterCrossfireXEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_x_esd", this]);
});

Clazz.newMeth(C$, 'enterCrossfireY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_y", this]);
});

Clazz.newMeth(C$, 'enterCrossfireYEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_y_esd", this]);
});

Clazz.newMeth(C$, 'enterCrossfireXy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_xy", this]);
});

Clazz.newMeth(C$, 'enterCrossfireXyEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_crystal_alignment", "crossfire_xy_esd", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditRevisionHistoryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_revision_history", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_history", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_history", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterMajorRevision$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_history", "major_revision", this]);
});

Clazz.newMeth(C$, 'enterMinorRevision$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_history", "minor_revision", this]);
});

Clazz.newMeth(C$, 'enterRevisionDate$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_history", "revision_date", this]);
});

Clazz.newMeth(C$, 'enterInternalVersion$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_history", "internal_version", this]);
});

Clazz.newMeth(C$, 'enterInternalDepositionId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_history", "internal_deposition_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditRevisionGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_revision_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_group", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterRevisionOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_group", "revision_ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_group", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterGroup$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_group", "group", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditRevisionCategoryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_revision_category", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_category", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterRevisionOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_category", "revision_ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_category", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterCategory$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_category", "category", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditRevisionDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_revision_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_details", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterRevisionOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_details", "revision_ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_details", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterProvider$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_details", "provider", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_details", "type", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_details", "description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxAuditRevisionItemBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_audit_revision_item", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_item", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterRevisionOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_audit_revision_item", "revision_ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_item", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterItem$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_audit_revision_item", "item", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSupportingExpDataSetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_supporting_exp_data_set", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_supporting_exp_data_set", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterDataContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_supporting_exp_data_set", "data_content_type", this]);
});

Clazz.newMeth(C$, 'enterDataVersionMajor$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_supporting_exp_data_set", "data_version_major", this]);
});

Clazz.newMeth(C$, 'enterDataVersionMinor$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_supporting_exp_data_set", "data_version_minor", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_supporting_exp_data_set", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSerialCrystallographyMeasurementBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_serial_crystallography_measurement", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterPulseEnergy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "pulse_energy", this]);
});

Clazz.newMeth(C$, 'enterPulseDuration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "pulse_duration", this]);
});

Clazz.newMeth(C$, 'enterXfelPulseRepetitionRate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "xfel_pulse_repetition_rate", this]);
});

Clazz.newMeth(C$, 'enterPulsePhotonEnergy$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "pulse_photon_energy", this]);
});

Clazz.newMeth(C$, 'enterPhotonsPerPulse$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "photons_per_pulse", this]);
});

Clazz.newMeth(C$, 'enterSourceSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "source_size", this]);
});

Clazz.newMeth(C$, 'enterSourceDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "source_distance", this]);
});

Clazz.newMeth(C$, 'enterFocalSpotSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "focal_spot_size", this]);
});

Clazz.newMeth(C$, 'enterCollimation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "collimation", this]);
});

Clazz.newMeth(C$, 'enterCollectionTimeTotal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_measurement", "collection_time_total", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSerialCrystallographySampleDeliveryBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_serial_crystallography_sample_delivery", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery", "description", this]);
});

Clazz.newMeth(C$, 'enterMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery", "method", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSerialCrystallographySampleDeliveryInjectionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_serial_crystallography_sample_delivery_injection", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "description", this]);
});

Clazz.newMeth(C$, 'enterInjectorDiameter$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "injector_diameter", this]);
});

Clazz.newMeth(C$, 'enterInjectorTemperature$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "injector_temperature", this]);
});

Clazz.newMeth(C$, 'enterInjectorPressure$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "injector_pressure", this]);
});

Clazz.newMeth(C$, 'enterFlowRate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "flow_rate", this]);
});

Clazz.newMeth(C$, 'enterCarrierSolvent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "carrier_solvent", this]);
});

Clazz.newMeth(C$, 'enterCrystalConcentration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "crystal_concentration", this]);
});

Clazz.newMeth(C$, 'enterPreparation$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "preparation", this]);
});

Clazz.newMeth(C$, 'enterPowerBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "power_by", this]);
});

Clazz.newMeth(C$, 'enterInjectorNozzle$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "injector_nozzle", this]);
});

Clazz.newMeth(C$, 'enterJetDiameter$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "jet_diameter", this]);
});

Clazz.newMeth(C$, 'enterFilterSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_injection", "filter_size", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSerialCrystallographySampleDeliveryFixedTargetBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_serial_crystallography_sample_delivery_fixed_target", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "description", this]);
});

Clazz.newMeth(C$, 'enterSampleHolding$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "sample_holding", this]);
});

Clazz.newMeth(C$, 'enterSupportBase$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "support_base", this]);
});

Clazz.newMeth(C$, 'enterSampleUnitSize$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "sample_unit_size", this]);
});

Clazz.newMeth(C$, 'enterCrystalsPerUnit$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "crystals_per_unit", this]);
});

Clazz.newMeth(C$, 'enterSampleSolvent$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "sample_solvent", this]);
});

Clazz.newMeth(C$, 'enterSampleDehydrationPrevention$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "sample_dehydration_prevention", this]);
});

Clazz.newMeth(C$, 'enterMotionControl$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "motion_control", this]);
});

Clazz.newMeth(C$, 'enterVelocityHorizontal$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "velocity_horizontal", this]);
});

Clazz.newMeth(C$, 'enterVelocityVertical$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "velocity_vertical", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_sample_delivery_fixed_target", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxSerialCrystallographyDataReductionBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_serial_crystallography_data_reduction", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterDiffrnId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "diffrn_id", this]);
});

Clazz.newMeth(C$, 'enterFramesTotal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "frames_total", this]);
});

Clazz.newMeth(C$, 'enterXfelPulseEvents$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "xfel_pulse_events", this]);
});

Clazz.newMeth(C$, 'enterFrameHits$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "frame_hits", this]);
});

Clazz.newMeth(C$, 'enterCrystalHits$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "crystal_hits", this]);
});

Clazz.newMeth(C$, 'enterDropletHits$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "droplet_hits", this]);
});

Clazz.newMeth(C$, 'enterFramesFailedIndex$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "frames_failed_index", this]);
});

Clazz.newMeth(C$, 'enterFramesIndexed$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "frames_indexed", this]);
});

Clazz.newMeth(C$, 'enterLatticesIndexed$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "lattices_indexed", this]);
});

Clazz.newMeth(C$, 'enterXfelRunNumbers$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_serial_crystallography_data_reduction", "xfel_run_numbers", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompSynonymsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_synonyms", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_synonyms", "name", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_synonyms", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterProvenance$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_synonyms", "provenance", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompRelatedBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_related", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_related", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterRelatedCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_related", "related_comp_id", this]);
});

Clazz.newMeth(C$, 'enterRelationshipType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_related", "relationship_type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_related", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxChemCompAtomRelatedBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_chem_comp_atom_related", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterRelatedCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "related_comp_id", this]);
});

Clazz.newMeth(C$, 'enterOrdinal$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "ordinal", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterRelatedAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "related_atom_id", this]);
});

Clazz.newMeth(C$, 'enterRelatedType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_chem_comp_atom_related", "related_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityBranchListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_branch_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_list", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterHetero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_list", "hetero", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_list", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_branch_list", "num", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityBranchLinkBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_branch_link", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterLinkId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_branch_link", "link_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "details", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterEntityBranchListNum1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_branch_link", "entity_branch_list_num_1", this]);
});

Clazz.newMeth(C$, 'enterEntityBranchListNum2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_entity_branch_link", "entity_branch_list_num_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "leaving_atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "atom_stereo_config_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterLeavingAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "leaving_atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomStereoConfig2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "atom_stereo_config_2", this]);
});

Clazz.newMeth(C$, 'enterValueOrder$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch_link", "value_order", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxEntityBranchBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_entity_branch", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_entity_branch", "type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "PdbxBranchSchemeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["pdbx_branch_scheme", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterHetero$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "hetero", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "mon_id", this]);
});

Clazz.newMeth(C$, 'enterNum$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["pdbx_branch_scheme", "num", this]);
});

Clazz.newMeth(C$, 'enterPdbAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "pdb_asym_id", this]);
});

Clazz.newMeth(C$, 'enterPdbSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "pdb_seq_num", this]);
});

Clazz.newMeth(C$, 'enterPdbMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "pdb_mon_id", this]);
});

Clazz.newMeth(C$, 'enterAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterAuthSeqNum$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "auth_seq_num", this]);
});

Clazz.newMeth(C$, 'enterAuthMonId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["pdbx_branch_scheme", "auth_mon_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStartingModelDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_starting_model_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "entity_description", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_details", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_details", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterStartingModelSource$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "starting_model_source", this]);
});

Clazz.newMeth(C$, 'enterStartingModelAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_details", "starting_model_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelSequenceOffset$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_details", "starting_model_sequence_offset", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_details", "dataset_list_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStartingComparativeModelsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_starting_comparative_models", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_comparative_models", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_comparative_models", "starting_model_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "starting_model_seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterStartingModelSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "starting_model_seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterTemplateAuthAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_auth_asym_id", this]);
});

Clazz.newMeth(C$, 'enterTemplateSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterTemplateSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterTemplateSequenceIdentity$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_sequence_identity", this]);
});

Clazz.newMeth(C$, 'enterTemplateSequenceIdentityDenominator$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_sequence_identity_denominator", this]);
});

Clazz.newMeth(C$, 'enterTemplateDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "template_dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterAlignmentFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_comparative_models", "alignment_file_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStartingComputationalModelsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_starting_computational_models", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_computational_models", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterScriptFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_computational_models", "script_file_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_computational_models", "software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStartingModelSeqDifBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_starting_model_seq_dif", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterDbEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "db_entity_id", this]);
});

Clazz.newMeth(C$, 'enterDbAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "db_asym_id", this]);
});

Clazz.newMeth(C$, 'enterDbSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "db_seq_id", this]);
});

Clazz.newMeth(C$, 'enterDbCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "db_comp_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_seq_dif", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmModelRepresentationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_model_representation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterRepresentationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "representation_id", this]);
});

Clazz.newMeth(C$, 'enterSegmentId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "segment_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "entity_description", this]);
});

Clazz.newMeth(C$, 'enterEntityAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "entity_asym_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterModelObjectPrimitive$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "model_object_primitive", this]);
});

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterModelMode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "model_mode", this]);
});

Clazz.newMeth(C$, 'enterModelGranularity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representation", "model_granularity", this]);
});

Clazz.newMeth(C$, 'enterModelObjectCount$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representation", "model_object_count", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStructAssemblyBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_struct_assembly", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterParentAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly", "parent_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly", "entity_description", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly", "seq_id_end", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStructAssemblyDetailsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_struct_assembly_details", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly_details", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly_details", "assembly_name", this]);
});

Clazz.newMeth(C$, 'enterAssemblyDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly_details", "assembly_description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStructAssemblyClassListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_struct_assembly_class_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterClassId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly_class_list", "class_id", this]);
});

Clazz.newMeth(C$, 'enterName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly_class_list", "name", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly_class_list", "type", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_struct_assembly_class_list", "description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStructAssemblyClassBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_struct_assembly_class", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly_class", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterClassId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly_class", "class_id", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_struct_assembly_class", "assembly_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmModelingProtocolBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_modeling_protocol", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterProtocolId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "protocol_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "step_id", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "struct_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "dataset_group_id", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "struct_assembly_description", this]);
});

Clazz.newMeth(C$, 'enterProtocolName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "protocol_name", this]);
});

Clazz.newMeth(C$, 'enterStepName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "step_name", this]);
});

Clazz.newMeth(C$, 'enterStepMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "step_method", this]);
});

Clazz.newMeth(C$, 'enterNumModelsBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "num_models_begin", this]);
});

Clazz.newMeth(C$, 'enterNumModelsEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "num_models_end", this]);
});

Clazz.newMeth(C$, 'enterMultiScaleFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "multi_scale_flag", this]);
});

Clazz.newMeth(C$, 'enterMultiStateFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "multi_state_flag", this]);
});

Clazz.newMeth(C$, 'enterOrderedFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "ordered_flag", this]);
});

Clazz.newMeth(C$, 'enterEnsembleFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_protocol", "ensemble_flag", this]);
});

Clazz.newMeth(C$, 'enterScriptFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "script_file_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_protocol", "software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmMultiStateModelingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_multi_state_modeling", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_multi_state_modeling", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterStateId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_multi_state_modeling", "state_id", this]);
});

Clazz.newMeth(C$, 'enterStateGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_multi_state_modeling", "state_group_id", this]);
});

Clazz.newMeth(C$, 'enterPopulationFraction$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_multi_state_modeling", "population_fraction", this]);
});

Clazz.newMeth(C$, 'enterPopulationFractionSd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_multi_state_modeling", "population_fraction_sd", this]);
});

Clazz.newMeth(C$, 'enterStateType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_multi_state_modeling", "state_type", this]);
});

Clazz.newMeth(C$, 'enterStateName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_multi_state_modeling", "state_name", this]);
});

Clazz.newMeth(C$, 'enterModelGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_multi_state_modeling", "model_group_id", this]);
});

Clazz.newMeth(C$, 'enterExperimentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_multi_state_modeling", "experiment_type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_multi_state_modeling", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmOrderedEnsembleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_ordered_ensemble", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterProcessId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ordered_ensemble", "process_id", this]);
});

Clazz.newMeth(C$, 'enterProcessDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ordered_ensemble", "process_description", this]);
});

Clazz.newMeth(C$, 'enterEdgeId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ordered_ensemble", "edge_id", this]);
});

Clazz.newMeth(C$, 'enterEdgeDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ordered_ensemble", "edge_description", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ordered_ensemble", "step_id", this]);
});

Clazz.newMeth(C$, 'enterStepDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ordered_ensemble", "step_description", this]);
});

Clazz.newMeth(C$, 'enterOrderedBy$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ordered_ensemble", "ordered_by", this]);
});

Clazz.newMeth(C$, 'enterModelGroupIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ordered_ensemble", "model_group_id_begin", this]);
});

Clazz.newMeth(C$, 'enterModelGroupIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ordered_ensemble", "model_group_id_end", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmModelingPostProcessBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_modeling_post_process", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "id", this]);
});

Clazz.newMeth(C$, 'enterProtocolId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "protocol_id", this]);
});

Clazz.newMeth(C$, 'enterAnalysisId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "analysis_id", this]);
});

Clazz.newMeth(C$, 'enterStepId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "step_id", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "struct_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "dataset_group_id", this]);
});

Clazz.newMeth(C$, 'enterType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_post_process", "type", this]);
});

Clazz.newMeth(C$, 'enterFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_post_process", "feature", this]);
});

Clazz.newMeth(C$, 'enterFeatureName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_modeling_post_process", "feature_name", this]);
});

Clazz.newMeth(C$, 'enterNumModelsBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "num_models_begin", this]);
});

Clazz.newMeth(C$, 'enterNumModelsEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "num_models_end", this]);
});

Clazz.newMeth(C$, 'enterScriptFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "script_file_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_modeling_post_process", "software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmEnsembleInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_ensemble_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterEnsembleId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_id", this]);
});

Clazz.newMeth(C$, 'enterEnsembleName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_name", this]);
});

Clazz.newMeth(C$, 'enterPostProcessId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "post_process_id", this]);
});

Clazz.newMeth(C$, 'enterModelGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "model_group_id", this]);
});

Clazz.newMeth(C$, 'enterEnsembleClusteringMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_clustering_method", this]);
});

Clazz.newMeth(C$, 'enterEnsembleClusteringFeature$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_clustering_feature", this]);
});

Clazz.newMeth(C$, 'enterNumEnsembleModels$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "num_ensemble_models", this]);
});

Clazz.newMeth(C$, 'enterNumEnsembleModelsDeposited$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "num_ensemble_models_deposited", this]);
});

Clazz.newMeth(C$, 'enterEnsemblePrecisionValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_precision_value", this]);
});

Clazz.newMeth(C$, 'enterEnsembleFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_ensemble_info", "ensemble_file_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmModelListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_model_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "model_id", this]);
});

Clazz.newMeth(C$, 'enterModelGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "model_group_id", this]);
});

Clazz.newMeth(C$, 'enterModelName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_list", "model_name", this]);
});

Clazz.newMeth(C$, 'enterModelGroupName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_list", "model_group_name", this]);
});

Clazz.newMeth(C$, 'enterAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "assembly_id", this]);
});

Clazz.newMeth(C$, 'enterProtocolId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "protocol_id", this]);
});

Clazz.newMeth(C$, 'enterRepresentationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_list", "representation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmModelRepresentativeBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_model_representative", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representative", "id", this]);
});

Clazz.newMeth(C$, 'enterModelGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representative", "model_group_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_model_representative", "model_id", this]);
});

Clazz.newMeth(C$, 'enterSelectionCriteria$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_model_representative", "selection_criteria", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmDatasetListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_dataset_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_list", "id", this]);
});

Clazz.newMeth(C$, 'enterDataType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_list", "data_type", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_list", "details", this]);
});

Clazz.newMeth(C$, 'enterDatabaseHosted$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_list", "database_hosted", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmDatasetGroupBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_dataset_group", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_group", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_group", "group_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_group", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterApplication$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_group", "application", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_group", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmRelatedDatasetsBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_related_datasets", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_related_datasets", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListIdDerived$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_related_datasets", "dataset_list_id_derived", this]);
});

Clazz.newMeth(C$, 'enterDatasetListIdPrimary$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_related_datasets", "dataset_list_id_primary", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmDatasetRelatedDbReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_dataset_related_db_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterDbName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "db_name", this]);
});

Clazz.newMeth(C$, 'enterAccessionCode$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "accession_code", this]);
});

Clazz.newMeth(C$, 'enterVersion$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "version", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_dataset_related_db_reference", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmExternalReferenceInfoBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_external_reference_info", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterReferenceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_external_reference_info", "reference_id", this]);
});

Clazz.newMeth(C$, 'enterReferenceProvider$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_reference_info", "reference_provider", this]);
});

Clazz.newMeth(C$, 'enterReferenceType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_reference_info", "reference_type", this]);
});

Clazz.newMeth(C$, 'enterReference$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_reference_info", "reference", this]);
});

Clazz.newMeth(C$, 'enterRefersTo$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_reference_info", "refers_to", this]);
});

Clazz.newMeth(C$, 'enterAssociatedUrl$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_reference_info", "associated_url", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmExternalFilesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_external_files", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_external_files", "id", this]);
});

Clazz.newMeth(C$, 'enterReferenceId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_external_files", "reference_id", this]);
});

Clazz.newMeth(C$, 'enterFilePath$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_files", "file_path", this]);
});

Clazz.newMeth(C$, 'enterFileFormat$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_files", "file_format", this]);
});

Clazz.newMeth(C$, 'enterContentType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_files", "content_type", this]);
});

Clazz.newMeth(C$, 'enterFileSizeBytes$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_external_files", "file_size_bytes", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_external_files", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmDatasetExternalReferenceBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_dataset_external_reference", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_external_reference", "id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_external_reference", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_dataset_external_reference", "file_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmLocalizationDensityFilesBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_localization_density_files", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_localization_density_files", "id", this]);
});

Clazz.newMeth(C$, 'enterFileId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_localization_density_files", "file_id", this]);
});

Clazz.newMeth(C$, 'enterEnsembleId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_localization_density_files", "ensemble_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_localization_density_files", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_localization_density_files", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_localization_density_files", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_localization_density_files", "asym_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmPredictedContactRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_predicted_contact_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "group_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "entity_description_1", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "entity_description_2", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterDistanceLowerLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "distance_lower_limit", this]);
});

Clazz.newMeth(C$, 'enterDistanceUpperLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "distance_upper_limit", this]);
});

Clazz.newMeth(C$, 'enterProbability$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "probability", this]);
});

Clazz.newMeth(C$, 'enterRestraintType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "restraint_type", this]);
});

Clazz.newMeth(C$, 'enterModelGranularity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "model_granularity", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_predicted_contact_restraint", "software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmHydroxylRadicalFpRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_hydroxyl_radical_fp_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "group_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "entity_description", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterFpRate$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "fp_rate", this]);
});

Clazz.newMeth(C$, 'enterFpRateError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "fp_rate_error", this]);
});

Clazz.newMeth(C$, 'enterLogPf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "log_pf", this]);
});

Clazz.newMeth(C$, 'enterLogPfError$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "log_pf_error", this]);
});

Clazz.newMeth(C$, 'enterPredictedSasa$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "predicted_sasa", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterSoftwareId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_hydroxyl_radical_fp_restraint", "software_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmCrossLinkListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_cross_link_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_list", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_list", "group_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "entity_description_1", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "entity_description_2", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_list", "seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_list", "seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterLinkerType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_list", "linker_type", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_list", "dataset_list_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmCrossLinkRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_cross_link_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_restraint", "group_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "entity_id_1", this]);
});

Clazz.newMeth(C$, 'enterEntityId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "entity_id_2", this]);
});

Clazz.newMeth(C$, 'enterAsymId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "asym_id_1", this]);
});

Clazz.newMeth(C$, 'enterAsymId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "asym_id_2", this]);
});

Clazz.newMeth(C$, 'enterCompId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "comp_id_1", this]);
});

Clazz.newMeth(C$, 'enterCompId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "comp_id_2", this]);
});

Clazz.newMeth(C$, 'enterSeqId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_restraint", "seq_id_1", this]);
});

Clazz.newMeth(C$, 'enterSeqId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_restraint", "seq_id_2", this]);
});

Clazz.newMeth(C$, 'enterAtomId1$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "atom_id_1", this]);
});

Clazz.newMeth(C$, 'enterAtomId2$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "atom_id_2", this]);
});

Clazz.newMeth(C$, 'enterRestraintType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "restraint_type", this]);
});

Clazz.newMeth(C$, 'enterConditionalCrosslinkFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "conditional_crosslink_flag", this]);
});

Clazz.newMeth(C$, 'enterModelGranularity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_restraint", "model_granularity", this]);
});

Clazz.newMeth(C$, 'enterDistanceThreshold$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_restraint", "distance_threshold", this]);
});

Clazz.newMeth(C$, 'enterPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_restraint", "psi", this]);
});

Clazz.newMeth(C$, 'enterSigma1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_restraint", "sigma_1", this]);
});

Clazz.newMeth(C$, 'enterSigma2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_restraint", "sigma_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmCrossLinkResultBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_cross_link_result", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterRestraintId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result", "restraint_id", this]);
});

Clazz.newMeth(C$, 'enterEnsembleId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result", "ensemble_id", this]);
});

Clazz.newMeth(C$, 'enterNumModels$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result", "num_models", this]);
});

Clazz.newMeth(C$, 'enterDistanceThreshold$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_result", "distance_threshold", this]);
});

Clazz.newMeth(C$, 'enterMedianDistance$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_result", "median_distance", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_cross_link_result", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmCrossLinkResultParametersBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_cross_link_result_parameters", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterRestraintId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "restraint_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "model_id", this]);
});

Clazz.newMeth(C$, 'enterPsi$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "psi", this]);
});

Clazz.newMeth(C$, 'enterSigma1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "sigma_1", this]);
});

Clazz.newMeth(C$, 'enterSigma2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_cross_link_result_parameters", "sigma_2", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Ihm2demClassAverageRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_2dem_class_average_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterNumberRawMicrographs$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "number_raw_micrographs", this]);
});

Clazz.newMeth(C$, 'enterPixelSizeWidth$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "pixel_size_width", this]);
});

Clazz.newMeth(C$, 'enterPixelSizeHeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "pixel_size_height", this]);
});

Clazz.newMeth(C$, 'enterImageResolution$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "image_resolution", this]);
});

Clazz.newMeth(C$, 'enterImageSegmentFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "image_segment_flag", this]);
});

Clazz.newMeth(C$, 'enterNumberOfProjections$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "number_of_projections", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "struct_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_2dem_class_average_restraint", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Ihm2demClassAverageFittingBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_2dem_class_average_fitting", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterRestraintId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "restraint_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "model_id", this]);
});

Clazz.newMeth(C$, 'enterCrossCorrelationCoefficient$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "cross_correlation_coefficient", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "rot_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterTrVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "tr_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterTrVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "tr_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterTrVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_2dem_class_average_fitting", "tr_vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "Ihm3demRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_3dem_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_3dem_restraint", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_3dem_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_3dem_restraint", "model_id", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_3dem_restraint", "struct_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterFittingMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_3dem_restraint", "fitting_method", this]);
});

Clazz.newMeth(C$, 'enterNumberOfGaussians$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_3dem_restraint", "number_of_gaussians", this]);
});

Clazz.newMeth(C$, 'enterMapSegmentFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_3dem_restraint", "map_segment_flag", this]);
});

Clazz.newMeth(C$, 'enterCrossCorrelationCoefficient$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_3dem_restraint", "cross_correlation_coefficient", this]);
});

Clazz.newMeth(C$, 'enterFittingMethodCitationId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_3dem_restraint", "fitting_method_citation_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_3dem_restraint", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmSasRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_sas_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sas_restraint", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sas_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sas_restraint", "model_id", this]);
});

Clazz.newMeth(C$, 'enterStructAssemblyId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sas_restraint", "struct_assembly_id", this]);
});

Clazz.newMeth(C$, 'enterProfileSegmentFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sas_restraint", "profile_segment_flag", this]);
});

Clazz.newMeth(C$, 'enterFittingAtomType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sas_restraint", "fitting_atom_type", this]);
});

Clazz.newMeth(C$, 'enterFittingMethod$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sas_restraint", "fitting_method", this]);
});

Clazz.newMeth(C$, 'enterFittingState$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sas_restraint", "fitting_state", this]);
});

Clazz.newMeth(C$, 'enterRadiusOfGyration$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sas_restraint", "radius_of_gyration", this]);
});

Clazz.newMeth(C$, 'enterChiValue$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sas_restraint", "chi_value", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sas_restraint", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmStartingModelCoordBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_starting_model_coord", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_coord", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterStartingModelId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "starting_model_id", this]);
});

Clazz.newMeth(C$, 'enterGroupPDB$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "group_PDB", this]);
});

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_coord", "id", this]);
});

Clazz.newMeth(C$, 'enterTypeSymbol$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "type_symbol", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "atom_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_coord", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_starting_model_coord", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_starting_model_coord", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_starting_model_coord", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_starting_model_coord", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterBIsoOrEquiv$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_starting_model_coord", "B_iso_or_equiv", this]);
});

Clazz.newMeth(C$, 'enterFormalCharge$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_starting_model_coord", "formal_charge", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmSphereObjSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_sphere_obj_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sphere_obj_site", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sphere_obj_site", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sphere_obj_site", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sphere_obj_site", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_sphere_obj_site", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sphere_obj_site", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sphere_obj_site", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sphere_obj_site", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterObjectRadius$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sphere_obj_site", "object_radius", this]);
});

Clazz.newMeth(C$, 'enterRmsf$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_sphere_obj_site", "rmsf", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_sphere_obj_site", "model_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGaussianObjSiteBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_gaussian_obj_site", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_site", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_gaussian_obj_site", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_site", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_site", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_gaussian_obj_site", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "mean_Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "mean_Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "mean_Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "weight", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_site", "covariance_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_site", "model_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGaussianObjEnsembleBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_gaussian_obj_ensemble", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "mean_Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "mean_Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterMeanCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "mean_Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterWeight$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "weight", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterCovarianceMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "covariance_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterEnsembleId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_gaussian_obj_ensemble", "ensemble_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmResiduesNotModeledBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_residues_not_modeled", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_residues_not_modeled", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterModelId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_residues_not_modeled", "model_id", this]);
});

Clazz.newMeth(C$, 'enterEntityDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_residues_not_modeled", "entity_description", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_residues_not_modeled", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_residues_not_modeled", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_residues_not_modeled", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_residues_not_modeled", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterReason$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_residues_not_modeled", "reason", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_residues_not_modeled", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmFeatureListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_feature_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_feature_list", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_feature_list", "feature_type", this]);
});

Clazz.newMeth(C$, 'enterEntityType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_feature_list", "entity_type", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmPseudoSiteFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_pseudo_site_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_pseudo_site_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterCartnX$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_pseudo_site_feature", "Cartn_x", this]);
});

Clazz.newMeth(C$, 'enterCartnY$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_pseudo_site_feature", "Cartn_y", this]);
});

Clazz.newMeth(C$, 'enterCartnZ$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_pseudo_site_feature", "Cartn_z", this]);
});

Clazz.newMeth(C$, 'enterRadius$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_pseudo_site_feature", "radius", this]);
});

Clazz.newMeth(C$, 'enterDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_pseudo_site_feature", "description", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmPolyAtomFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_poly_atom_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_atom_feature", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_atom_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_atom_feature", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_atom_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_atom_feature", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterSeqId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_atom_feature", "seq_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_atom_feature", "atom_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmPolyResidueFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_poly_residue_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_residue_feature", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_residue_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCompIdBegin$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "comp_id_begin", this]);
});

Clazz.newMeth(C$, 'enterCompIdEnd$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "comp_id_end", this]);
});

Clazz.newMeth(C$, 'enterSeqIdBegin$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_residue_feature", "seq_id_begin", this]);
});

Clazz.newMeth(C$, 'enterSeqIdEnd$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_poly_residue_feature", "seq_id_end", this]);
});

Clazz.newMeth(C$, 'enterResidueRangeGranularity$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "residue_range_granularity", this]);
});

Clazz.newMeth(C$, 'enterRepAtom$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "rep_atom", this]);
});

Clazz.newMeth(C$, 'enterInterfaceResidueFlag$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_poly_residue_feature", "interface_residue_flag", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmNonPolyFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_non_poly_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_non_poly_feature", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_non_poly_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_non_poly_feature", "entity_id", this]);
});

Clazz.newMeth(C$, 'enterAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_non_poly_feature", "asym_id", this]);
});

Clazz.newMeth(C$, 'enterCompId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_non_poly_feature", "comp_id", this]);
});

Clazz.newMeth(C$, 'enterAtomId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_non_poly_feature", "atom_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmInterfaceResidueFeatureBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_interface_residue_feature", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterOrdinalId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_interface_residue_feature", "ordinal_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_interface_residue_feature", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterBindingPartnerEntityId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_interface_residue_feature", "binding_partner_entity_id", this]);
});

Clazz.newMeth(C$, 'enterBindingPartnerAsymId$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_interface_residue_feature", "binding_partner_asym_id", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_interface_residue_feature", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_interface_residue_feature", "details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmDerivedDistanceRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_derived_distance_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_derived_distance_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterGroupId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_derived_distance_restraint", "group_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId1$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_derived_distance_restraint", "feature_id_1", this]);
});

Clazz.newMeth(C$, 'enterFeatureId2$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_derived_distance_restraint", "feature_id_2", this]);
});

Clazz.newMeth(C$, 'enterGroupConditionality$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_derived_distance_restraint", "group_conditionality", this]);
});

Clazz.newMeth(C$, 'enterRandomExclusionFraction$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "random_exclusion_fraction", this]);
});

Clazz.newMeth(C$, 'enterDistanceLowerLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "distance_lower_limit", this]);
});

Clazz.newMeth(C$, 'enterDistanceUpperLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "distance_upper_limit", this]);
});

Clazz.newMeth(C$, 'enterDistanceLowerLimitEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "distance_lower_limit_esd", this]);
});

Clazz.newMeth(C$, 'enterDistanceUpperLimitEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "distance_upper_limit_esd", this]);
});

Clazz.newMeth(C$, 'enterProbability$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_derived_distance_restraint", "probability", this]);
});

Clazz.newMeth(C$, 'enterRestraintType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_derived_distance_restraint", "restraint_type", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_derived_distance_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectListBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_list", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_list", "object_id", this]);
});

Clazz.newMeth(C$, 'enterObjectType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_list", "object_type", this]);
});

Clazz.newMeth(C$, 'enterObjectName$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_list", "object_name", this]);
});

Clazz.newMeth(C$, 'enterObjectDescription$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_list", "object_description", this]);
});

Clazz.newMeth(C$, 'enterOtherDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_list", "other_details", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectCenterBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_center", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_center", "id", this]);
});

Clazz.newMeth(C$, 'enterXcoord$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_center", "xcoord", this]);
});

Clazz.newMeth(C$, 'enterYcoord$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_center", "ycoord", this]);
});

Clazz.newMeth(C$, 'enterZcoord$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_center", "zcoord", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectTransformationBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_transformation", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_transformation", "id", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix11$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[1][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix21$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[2][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix31$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[3][1]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix12$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[1][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix22$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[2][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix32$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[3][2]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix13$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[1][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix23$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[2][3]", this]);
});

Clazz.newMeth(C$, 'enterRotMatrix33$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "rot_matrix[3][3]", this]);
});

Clazz.newMeth(C$, 'enterTrVector1$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "tr_vector[1]", this]);
});

Clazz.newMeth(C$, 'enterTrVector2$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "tr_vector[2]", this]);
});

Clazz.newMeth(C$, 'enterTrVector3$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_transformation", "tr_vector[3]", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectSphereBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_sphere", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_sphere", "object_id", this]);
});

Clazz.newMeth(C$, 'enterCenterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_sphere", "center_id", this]);
});

Clazz.newMeth(C$, 'enterTransformationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_sphere", "transformation_id", this]);
});

Clazz.newMeth(C$, 'enterRadiusR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_sphere", "radius_r", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectTorusBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_torus", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_torus", "object_id", this]);
});

Clazz.newMeth(C$, 'enterCenterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_torus", "center_id", this]);
});

Clazz.newMeth(C$, 'enterTransformationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_torus", "transformation_id", this]);
});

Clazz.newMeth(C$, 'enterMajorRadiusR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_torus", "major_radius_R", this]);
});

Clazz.newMeth(C$, 'enterMinorRadiusR$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_torus", "minor_radius_r", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectHalfTorusBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_half_torus", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_half_torus", "object_id", this]);
});

Clazz.newMeth(C$, 'enterThicknessTh$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_half_torus", "thickness_th", this]);
});

Clazz.newMeth(C$, 'enterSection$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_half_torus", "section", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectAxisBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_axis", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_axis", "object_id", this]);
});

Clazz.newMeth(C$, 'enterAxisType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_axis", "axis_type", this]);
});

Clazz.newMeth(C$, 'enterTransformationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_axis", "transformation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectPlaneBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_plane", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_plane", "object_id", this]);
});

Clazz.newMeth(C$, 'enterPlaneType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_plane", "plane_type", this]);
});

Clazz.newMeth(C$, 'enterTransformationId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_plane", "transformation_id", this]);
});

Clazz.newMeth(C$);
})()
;
(function(){/*c*/var C$=Clazz.newClass(P$.CategoryBuilder, "IhmGeometricObjectDistanceRestraintBuilder", function(){
Clazz.newInstance(this, arguments[0],false,C$);
}, 'org.rcsb.cif.generic.CategoryBuilder');

C$.$clinit$=1;

Clazz.newMeth(C$, '$init$', function () {
}, 1);

Clazz.newMeth(C$, 'c$$org_rcsb_cif_generic_BlockBuilder', function (parent) {
;C$.superclazz.c$$S$org_rcsb_cif_generic_BlockBuilder.apply(this, ["ihm_geometric_object_distance_restraint", parent]);C$.$init$.apply(this);
}, 1);

Clazz.newMeth(C$, 'enterId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "id", this]);
});

Clazz.newMeth(C$, 'enterObjectId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "object_id", this]);
});

Clazz.newMeth(C$, 'enterFeatureId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "feature_id", this]);
});

Clazz.newMeth(C$, 'enterObjectCharacteristic$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "object_characteristic", this]);
});

Clazz.newMeth(C$, 'enterRestraintType$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "restraint_type", this]);
});

Clazz.newMeth(C$, 'enterHarmonicForceConstant$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "harmonic_force_constant", this]);
});

Clazz.newMeth(C$, 'enterGroupConditionality$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "group_conditionality", this]);
});

Clazz.newMeth(C$, 'enterDistanceLowerLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "distance_lower_limit", this]);
});

Clazz.newMeth(C$, 'enterDistanceUpperLimit$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "distance_upper_limit", this]);
});

Clazz.newMeth(C$, 'enterDistanceLowerLimitEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "distance_lower_limit_esd", this]);
});

Clazz.newMeth(C$, 'enterDistanceUpperLimitEsd$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "distance_upper_limit_esd", this]);
});

Clazz.newMeth(C$, 'enterDistanceProbability$', function () {
return Clazz.new_($I$(1,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "distance_probability", this]);
});

Clazz.newMeth(C$, 'enterDatasetListId$', function () {
return Clazz.new_($I$(2,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "dataset_list_id", this]);
});

Clazz.newMeth(C$, 'enterOtherDetails$', function () {
return Clazz.new_($I$(3,1).c$$S$S$TP,["ihm_geometric_object_distance_restraint", "other_details", this]);
});

Clazz.newMeth(C$);
})()

Clazz.newMeth(C$);
})();
;Clazz.setTVer('3.2.5-v2');//Created 2019-12-07 15:26:30 Java2ScriptVisitor version 3.2.5-v2 net.sf.j2s.core.jar version 3.2.5-v2
